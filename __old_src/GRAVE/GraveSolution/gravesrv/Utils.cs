using System;
using System.Data;
using System.Data.OleDb;

using GRAVE.Server;
using GRAVE.Server.Entity.Definition; 
using GRAVE.Server.Entity.Implementation; 
using GRAVE.Server.Entity.Specification; 
using GRAVE.Server.Entity.RunTime; 

namespace GRAVE
{
	public class Utils
	{
		private Utils() {}
		public static long ObjectToLong(object v)
		{
			if (v != null && v != System.DBNull.Value)
				return System.Convert.ToInt32(v);

			return 0;
		}

		public static long ObjectToLong(string v)
		{
			if (v != null && v != "")
				return System.Convert.ToInt32(v);

			return 0;
		}

		public static string ObjectToString(object v)
		{
			if (v != null && v != System.DBNull.Value)
				return System.Convert.ToString(v).Trim();

			return "";
		}

		public static bool ObjectToBool(object v)
		{
			if (v != null && v != System.DBNull.Value)
				return System.Convert.ToBoolean(v);

			return false;
		}

		// passed in value is datetime in format generated by the RadDateTimePicker == YYYY-MM-DD-HH-MM
		public static DateTime ObjectToDateTime(object val)
		{
			string ts = Utils.ObjectToString(val); 

			// split
			string []tlets = ts.Split('-');

			string nt = "";
			if (tlets.Length >= 3)
				nt = tlets[1] + "/" + tlets[2] + "/" + tlets[3];

			if (tlets.Length >= 4)
				nt += " " + tlets[3];

			if (tlets.Length >= 5)
				nt += ":" + tlets[4];

			return System.Convert.ToDateTime(nt);
		}

		public static string ReplaceString(string input_string, int pos, int count, string to_replace)
		{
			if (pos < 0 || count < 0)
				return input_string;

			string subs = "";
			if (pos < input_string.Length-1)
				subs = input_string.Substring(pos, count);

			if (subs != "")
			{
				input_string = input_string.Remove(pos, subs.Length);
				input_string = input_string.Insert(pos, to_replace); 
				return input_string;
			}
			return input_string;
		}

		public static string GetDBString(object val, string type)
		{
			if (val == null || val.ToString() == "" || Utils.ObjectToString(val) == "")
			{
				if (type == "string" ||
					type == "char" || 
					type == "datetime")
					return "''";
				else
					return "";
			}

			if (type == "string" ||
				type == "char")
				return "'" + Utils.ObjectToString(val) + "'"; 
			else if (type == "datetime")
			{
				DateTime ntd = ObjectToDateTime(val);
				string nt = ntd.ToString();
				return "'" +  nt + "'";  
			}
			else if (type == "html_string")
			{
				return "'" + MakeHtmlForDB(Utils.ObjectToString(val)) + "'"; 
			}
			else if (type == "boolean")
			{
				string t = ObjectToString(val);
				if (t != null)
				{
					t = t.ToLower();
					if (t == "true" || t == "on" || t == "1")
						return "1";
				}
				return "0";
			}
			else
				return ObjectToString(val);
		}

		public static string GenNewGUID()
		{
			return System.Guid.NewGuid().ToString();  
		}

		public static string MakeHtmlForDB(string code)
		{
			code = code.Replace("\n","");
			code = code.Replace("\r","");
			code = code.Replace("'","\"");
			code = code.Replace("ucms:", "");

			code = code.Replace("ucmsradCln", "radCln:");

//			code = code.Replace("<![CDATA[", "");
//			code = code.Replace("]]>", "");

			return code;
		}

		public static string MakeHtmlForBrowser(string code)
		{
			code = code.Replace("<textarea", "<ucms:textarea");
			code = code.Replace("</textarea", "</ucms:textarea");

			code = code.Replace("radCln:", "ucmsradCln");

//			code = "<![CDATA[" + code + "]]>";

			return code;
		}

		public static string MakeGUICodeForProcessing(string in_string)
		{
			in_string = in_string.Replace("\t", "");

			return in_string;
		}

		public static string ReplaceHtmlAttribute(string ins, string attr, string replace)
		{
			int pos = ins.IndexOf(attr);
			while (pos != -1)
			{
				int quote_b = ins.IndexOf("\"", pos + attr.Length+1);
				int quote_e = ins.IndexOf("\"", quote_b+1);
				string old = ins.Substring(quote_b+1, quote_e-quote_b-1);
				if (old != null && old != "" && replace != null)
					ins = ins.Replace(old, replace);

				pos = ins.IndexOf(attr, quote_e+1);
			}
				
			return ins;
		}

		public static string MakeOutViewHtml(string code)
		{
			code = ReplaceHtmlAttribute(code, "SelectedDate", "");
			return code;
		}

		public static string IndentHtmlCode(string code)
		{
			if (code == "")
				return "";

			string new_code = "";
			// for every <tag> found add a new line and indent
			// for every </tag> found add a new ling and unindent
			int index = 0;
			int indent = -1;
			string last_tag = "";
			bool check_space = false;
			while (true)
			{
				if (index > code.Length-1)
					break;

				char c = code[index];

				if (c == '<' && code[index+1] == '%')
				{
					int pos = code.IndexOf("%>", index);
					if (pos >= 0)
					{
						string s = code.Substring(index, pos-index+2);
						new_code += "\n" + s;
						index=pos+1;
					}
				}
				else if (c == '<' && code[index+1] == '/')
				{
					int pos = code.IndexOf(">", index);
					if (pos >= 0)
					{
						string s = code.Substring(index, pos-index+1);
						indent--;
							
						if (last_tag != "" && s.IndexOf(last_tag, 0) != -1)
						{
							new_code += s;						
						}		
						else
						{
							string indent_s = "";
							for (int idx =0;idx<indent;idx++)
								indent_s+="     ";

							char []chrs = {' '};

							new_code = new_code.TrimEnd(chrs); 
							new_code += "\n" + indent_s + s;
						}

						index=pos;
					}

					check_space = true;
				}
				else if (c == '<')
				{
					int pos = code.IndexOf(">", index);
					if (pos >= 0)
					{
						string s = code.Substring(index, pos-index+1);
						indent++;
						string indent_s = "";
						for (int idx =0;idx<indent;idx++)
							indent_s+="     ";
						new_code += "\n" + indent_s +  s;
						index=pos;

						last_tag = s.Substring(1,s.Length-2);
						char []splitter = {' '};
						string []tag_split = last_tag.Split(splitter);
						if (tag_split != null && tag_split.Length > 0)
							last_tag = tag_split[0];
						else
							last_tag = "";
					}

					check_space = true;
				}
				else
				{
					if (!(check_space && (c == '\n' || c == '\r')))
					{
						new_code += c;
						check_space =false;
					}
				}

				index++; 
			}
					
			return new_code;
		}
		
		public class CNameObjectCollection : System.Collections.Specialized.NameObjectCollectionBase 
		{
			public CNameObjectCollection()
			{
			}

			public void AddItem(string key, object val)
			{
				base.BaseAdd(key, val); 
			}

			public object FindItem(string key)
			{
				return base.BaseGet(key); 
			}
		}
	}
}
