<?xml version='1.0'?>

<events>
<documentation>http://www.xulplanet.com/tutorials/xultu/events.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_EventHandlers.html</reference>
  The following describes the event handler attributes that are valid for most XUL  elements. The event name is the attribute without the 'on' prefix.  

<event name='CheckboxStateChange'>
  This event is sent when a checkbox is checked or unchecked, either by the  user or a script. This event has no corresponding attribute; it must be  added using the addEventListener method. Normally, you would use the command  event to listen to checkbox changes, however, the command event is only sent  when the user modifies the value, while the CheckboxStateChange event is  also sent when a script modifies the checked property of a checkbox. For user  changes, the CheckboxStateChange event is sent before the command event. The  CheckboxStateChange event does not bubble.
</event>
<event name='DOMAttrModified'>
  This event is sent to an element when one of its attributes is modified. In  the event handler, you can retrieve the attribute that was modified using  the event's attrName property, and you can retrieve the old and new values  of the attribute using the event's prevValue and newValue properties.
</event>
<event name='DOMMenuItemActive'>
  This event is sent when a menu or menuitem is hovered over, or highlighted.  This event bubbles.
</event>
<event name='DOMMenuItemInactive'>
  This event is sent when a menu or menuitem is no longer being hovered over,  or highlighted. This event bubbles.
</event>
<event name='DOMMouseScroll'>
  This event is sent when the mousewheel is moved, causing the content to  scroll.
</event>
<event name='DOMNodeInserted'>
  This event is sent when a node is added as a child of a element. If you  capture this element at the document level, you can be notified of document  changes.
</event>
<event name='DOMNodeRemoved'>
  This event is sent when a node is removed from an element. If you capture  this element at the document level, you can be notified of document changes.
</event>
<event name='RadioStateChange'>
  This event is sent when a radio button is selected, either by the user or a  script. This event has no corresponding attribute; it must be added using the  addEventListener method. Normally, you would use the command event to listen  to radio button selection changes, however, the command event is only sent  when the user changes the selected radio button, while the RadioStateChange  event is also sent when a script modifies the selection. For user changes,  the RadioStateChange event is sent before the command event. The  RadioStateChange event bubbles so you can also attach the event handler to  the enclosing radiogroup.
</event>
<event name='onblur'>
  The opposite of the focus event, the blur event is passed just as an element  loses the focus.
</event>
<event name='onbroadcast'>
  The event handler should be placed on an observer. The broadcast event is  sent when the attributes of the broadcaster being listened to are changed.
</event>
<event name='onchange'>
  This event is sent when the value of the textbox is changed.  The event is not sent until the focus is moved to another element.
</event>
<event name='onclick'>
  This event is sent when a mouse button is pressed and released. You can  determine which mouse button was clicked by retrieving the button property  of the event object. This event is also sent when the user double-clicks  with the mouse. The detail property specifies how many clicks occured. You  can also check for triple-clicks in a similar manner. For buttons and menus,  you should use oncommand instead.
</event>
<event name='onclose'>
  This event is sent when a request has been made to close the window, for  example, when the user presses the close button. If you place an event  handler on the window element, you can trap the window close. If you return  false from the onclose handler, the window will not close. Return true to  have it close normally.
</event>
<event name='oncommand'>
  This event handler is called when an element is activated. How it is activated  varies for each element and in many cases, there are several ways to activate  an element. For example, a button can be activated by clicking on it with the  mouse or by pressing ENTER while it has the focus. Menus can be activated by  selecting them with the mouse or by pressing a shortcut key. You should always  use the oncommand event instead of onclick because it will be called in all of  the needed cases.
</event>
<event name='oncommandupdate'>
  This event occurs when a command update occurs. You would use this to update  the disabled status of items.
</event>
<event name='oncontextmenu'>
  This event is sent to an element when the user requests to open the context menu  for the element. The action to do this varies by platform, but it will typically  be a right click. This handler is usually used to dynamically set the commands on  a menu when the user requests to display it, or you can use onpopupshowing event.  Returning false from this event handler prevents the popup from appearing.
</event>
<event name='ondblclick'>
  This event is like the click event except it is only sent when the user  double clicks with the mouse. This is an alternative to checking the detail  property in the click event.
</event>
<event name='ondragdrop'>
  This event is sent when the user releases the mouse button to drop an object  being dragged. The element, if it accepts the drop, should respond in some  manner such inserting the dragged object into itself.
</event>
<event name='ondragenter'>
  The dragenter event is sent when the mouse pointer first moves over an  element during a drag. It is similar to the mouseover event but occurs  while dragging.
</event>
<event name='ondragexit'>
  This event is sent when the mouse pointer moves away from an element during  a drag. It is also called after a drop on an element. It is similar to the  mouseout event but occurs during a drag.
</event>
<event name='ondraggesture'>
  This event is sent when the user starts dragging the element, usually by  holding down the mouse button and moving the mouse.
</event>
<event name='ondragover'>
  Related to the mousemove event, this event is sent while something is  being dragged over an element. The handler should indicate whether the  object being dragged can be dropped.
</event>
<event name='onfocus'>
  The focus event is sent to an element when it receives the focus. Once an  element has the focus, keyboard events are sent to it. The focus can be  changed by clicking on an element or by pressing TAB to switch to the next  element is sequence.
</event>
<event name='oninput'>
  This event is sent when a user enters text in a textbox. This event  is only called when the text displayed would change, thus it is not called  when the user presses non-displayable keys.
</event>
<event name='onkeydown'>
  The keydown event is sent to an element that has the focus and a key is  pressed but not released.
</event>
<event name='onkeypress'>
  The keypress event is sent to an element that has the focus and a key is  pressed and released. When the user presses a key, the keydown event is  first sent, followed by the keypress event and then the keyup event.  In a textbox, a user normally can hold down a key to repeat a character  In this case, multiple sets of key events are sent as if the user rapidly  pressed the same key repeatedly.
</event>
<event name='onkeyup'>
  The keyup event is sent to an element that has the focus and a key is  released.
</event>
<event name='onload'>
  This event is sent to the window after it has been fully loaded. You should  place this event handler on the window element. This event may also be used  on the image element, or an element that accepts an image attribute, and  will be fired when the image has finished loading. For images, this event  does not bubble up the element tree, so it will not conflict with the window's  onload event.
</event>
<event name='onmousedown'>
  This event is sent when the mouse is pressed on an element but not released.
</event>
<event name='onmousemove'>
  This event is sent repeatedly as the mouse is moved over an element.
</event>
<event name='onmouseout'>
  This mouseout event is sent to an element when the user moves the mouse  outside the element. This event is the reverse of onmouseover.
</event>
<event name='onmouseover'>
  This event is sent to an element when the mouse first moves over an element.  You can use this event to provide feedback to the user.
</event>
<event name='onmouseup'>
  This event is sent when the mouse is released on an element.
</event>
<event name='onoverflow'>
  This event is sent to a box or other layout element when there is not enough  space to display it at full size. This might be the result of maximum sizes  on elements. For example, if a box has a maximum size of 100 pixels, and only  enough space for 80 pixels is available, the overflow event will be sent to  the box. If the size changes, for example, by the user resizing the window,  you can use the onunderflow event handler to determine when enough space is  available.
</event>
<event name='onoverflowchanged'>
  This event is sent when the overflow state changes.
</event>
<event name='onpopuphidden'>
  This event is sent to a popup after it has been hidden.
</event>
<event name='onpopuphiding'>
  This event is sent to a popup when it is about to be hidden.
</event>
<event name='onpopupshowing'>
  This event is sent to a popup just before it is popped open. This handler is  usually used to dynamically set the contents when the user requests to display it.  Returning false from this event handler prevents the popup from appearing.
</event>
<event name='onpopupshown'>
  This is event is sent to a popup after it has been opened, much like the onload  event is sent to a window when it is opened.
</event>
<event name='onselect'>
  This event is sent to a listbox or tree when an item is selected.
</event>
<event name='onunderflow'>
  This event is sent to an element when there becomes enough space to display  it at full size. This applies to boxes and other layout elements.
</event>
<event name='onunload'>
  This event is sent to a window when the window has closed. This is done  after the close event. You should place this event handler on the window  element.
</event>
</events>