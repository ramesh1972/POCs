<?xml version='1.0'?>

<elements>
<element name='action'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_action.html</reference>
  Should be contained within a rule element. It is used to specify the generated  content for each matched node. Within the action, attributes are parsed for   resource and variable references .  
<html><![CDATA[
<p>  Should be contained within a rule element. It is used to specify the generated  content for each matched node. Within the action, attributes are parsed for  <a href="/tutorials/xultu/templateex.html">resource and variable references</a>.  </p>
]]></html>

</element>

<element name='arrowscrollbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menuscroll.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_arrowscrollbox.html</reference>
  A box which provides scroll arrows along its edges for scolling through  the contents of the box. The user only needs to hover the mouse over the  arrows to scroll the box. This element is typically used for large popup  menus.  

<method name='scrollByIndex'>
<prototype> scrollByIndex ( lines ) </prototype>
  
  Scrolls the contents of the arrowscrollbox by a certain number of lines. A line is a  single element. Use a positive value as the lines argument to scroll forward  that many lines, or a negative value to scroll backward that many lines.
</method>
</element>

<element name='bbox' spec='Moz1.5'>
<reference>http://www.xulplanet.com/reference/elemref/ref_bbox.html</reference>
  A horizontal box that is baseline aligned. It is equivalent to using  an hbox element with an align attribute set to baseline.

</element>

<element name='binding'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_binding.html</reference>
  Should be contained within a bindings element. A binding is used to  bind a variable to a node. Like the triple element in syntax, it can  be used to bind a particular property of a matched node to a particular  variable name. That name can then be used within the action of a rule.  

<prop name='object'>
  The object of a binding. It can be a variable reference, an RDF node URI,  or an RDF literal value.
</prop>
<prop name='predicate'>
  The predicate or property to match. This must be a URI of the property.
</prop>
<prop name='subject'>
  The subject of a binding. It can be a variable reference, an RDF node URI,  or an RDF literal value.
</prop>
</element>

<element name='bindings'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_bindings.html</reference>
  Should be contained within a rule. Used to specify a set of variable  bindings for a rule. This element should contain one or more binding  elements.  

</element>

<element name='box'>
<documentation>http://www.xulplanet.com/tutorials/xultu/boxes.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_box.html</reference>
  A container element which can contain any number of child elements. If the  box has an orient attribute that is set to horizontal, the child elements  are laid out from left to right in the order that they appear in the box.  If orient is set to vertical, the child elements are laid out from top to  bottom. Child elements do not overlap. The default orientation is horizontal.  

</element>

<element name='broadcaster'>
<documentation>http://www.xulplanet.com/tutorials/xultu/broadob.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_broadcaster.html</reference>
  A broadcaster is used whn you want multiple elements to share one or more  attribute values, or when you want elements to respond to a state change.  Any elements that are observing the broadcaster will share the attributes  placed on the broadcaster. For instance, if the broadcaster has a label  attribute, the observes will use that label. If the label changes, the  labels of the observers will update automatically. An onbroadcast event  will be sent to the observers when a change is made.        For menuitems or buttons that just want to have their disabled status set  when the feature should be disabled, you should use a command element  instead.  
<html><![CDATA[
<p>  A broadcaster is used whn you want multiple elements to share one or more  attribute values, or when you want elements to respond to a state change.  Any elements that are observing the broadcaster will share the attributes  placed on the broadcaster. For instance, if the broadcaster has a label  attribute, the observes will use that label. If the label changes, the  labels of the observers will update automatically. An onbroadcast event  will be sent to the observers when a change is made.  </p>  <p>  For menuitems or buttons that just want to have their disabled status set  when the feature should be disabled, you should use a command element  instead.  </p>
]]></html>

</element>

<element name='broadcasterset'>
<documentation>http://www.xulplanet.com/tutorials/xultu/broadob.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_broadcasterset.html</reference>
  A container element for broadcaster elements. The broadcasterset and its  descendants are not displayed.  

</element>

<element name='browser'>
<reference>http://www.xulplanet.com/reference/elemref/ref_browser.html</reference>
  A frame which is expected to contain a view of a Web document. It is  similar to an iframe except that it holds a page history and contains  additional methods to manipulate the currently displayed page.        Most of the properties and methods of the browser would rarely be used and can only  be called from chrome URLs. Other URLs will need to use the document and history  objects to change the displayed document.
<html><![CDATA[
<p>  A frame which is expected to contain a view of a Web document. It is  similar to an iframe except that it holds a page history and contains  additional methods to manipulate the currently displayed page.  </p>  <p>  Most of the properties and methods of the browser would rarely be used and can only  be called from chrome URLs. Other URLs will need to use the document and history  objects to change the displayed document.</p>
]]></html>

<implements>nsIAccessibleProvider</implements>
<attr name='autocompleteenabled' spec=' Firefox only ' type='boolean'>
  Set to true to enable autocomplete of fields.
</attr>
<attr name='autocompletepopup' type='id of popup element'>
  The id of a popup element used to hold autocomplete results for the browser.
</attr>
<attr name='autoscroll' spec=' Firefox only ' type='boolean'>
  Set to false to disable autoscroll for this browser. If this attribute is set to  true or omitted, autoscroll will be enabled or depending on the user  preference 'general.autoScroll'.
</attr>
<attr name='disablehistory' type='boolean'>
  If false, an arrow button will appear on the end of the textbox which, when  pressed, will open a dropdown menu of all available results. The default  value is true, which will hide the dropdown button.
</attr>
<attr name='disablesecurity' type='boolean'>
  Set this attribute to true to disable the security UI for this browser.  Leave the attribute off to enable it.
</attr>
<attr name='homepage' type='string home page URL'>
  This attribute allows you to set a homepage for the browser element. It does  not have any correlation with the user's browser homepage; instead it is a  convenient property to hold a home page. You can switch to this home page  using the goHome method.
</attr>
<attr name='src' type='URL'>
  The URL of the page to appear in the browser.
</attr>
<attr name='type' type='string'>
  If set to the string 'content-primary', this browser becomes the primary  content for the page. For instance, in a web browser, this would be the  element that displays the web page. The window for the primary content  can be retrieved more conveniently using 'window.content'.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the browser.
</prop>
<method name='addProgressListener'>
<prototype> addProgressListener ( listener ) </prototype>
  
  Add a progress listener to the browser which will monitor loaded documents. The  progress listener should implement the   nsIWebProgressListener   interface.
</method>
<prop name='canGoBack' type='boolean'>
  This read-only property is true if there is a page to go back to in the session  history and the Back button should be enabled.
</prop>
<prop name='canGoForward' type='boolean'>
  This read-only property is true if there is a page to go forward to in the session  history and the Forward button should be enabled.
</prop>
<prop name='contentDocument' type='document'>
  This read-only property contains the document object in the browser.
</prop>
<prop name='contentTitle' type='string'>
  This read-only property contains the title of the document object in the browser.
</prop>
<prop name='contentViewerEdit' type='nsIContentViewerEdit'>
  This read-only property contains the nsIContentViewerEdit which handles clipboard  operations on the document.
</prop>
<prop name='contentViewerFile' type='nsIContentViewerFile'>
  Reference to the nsIContentViewerFile interface for the document.
</prop>
<prop name='contentWindow' type='window'>
  This read-only property contains the window object in the browser.
</prop>
<prop name='currentURI' type='string current URI'>
  This read-only property contains the currently loaded URL. To change the  URL, use the loadURI method.
</prop>
<prop name='docShell' type='nsIDocShell'>
  This read-only property contains the nsIDocShell object for the document.
</prop>
<prop name='documentCharsetInfo' type='nsIDocumentCharsetInfo'>
  This read-only property contains the nsIDocumentCharsetInfo object for the document  which is used to handle which character set should be used to display the document.
</prop>
<method name='goBack'>
<prototype> goBack ( ) </prototype>
  
  Go back one page in the history.
</method>
<method name='goForward'>
<prototype> goForward ( ) </prototype>
  
  Go forward one page in the history.
</method>
<method name='goHome'>
<prototype> goHome ( ) </prototype>
  
  Load the user's home page into the browser.
</method>
<method name='gotoIndex'>
<prototype> gotoIndex ( index ) </prototype>
  
  Navigate to the page in the history with the given index. Use a positive  number to go forward and a negative number to go back.
</method>
<prop name='homePage' type='string home page URL'>
  This property holds the value of the user's home page setting.
</prop>
<method name='loadURI'>
<prototype> loadURI ( uri , referrer , charset ) </prototype>
  
  Load a URL into the document, with the given referrer and character set.
</method>
<method name='loadURIWithFlags'>
<prototype> loadURIWithFlags ( uri , flags , referrer , charset ) </prototype>
  
  Load a URL into the document, with the specified load flags and the given  referrer and character set. In addition to the flags allowed for the  reloadWithFlags methods, the following flags are also valid:
<value name='LOAD_FLAGS_IS_REFRESH'>
    This flag is used when the URL is loaded because of a meta tag refresh or redirect.
</value>
<value name='LOAD_FLAGS_IS_LINK'>
    This flag is used when the URL is loaded because a user clicked on a link. The
    HTTP Referer header is set accordingly.
</value>
<value name='LOAD_FLAGS_BYPASS_HISTORY'>
    Do not add the URL to the session history.
</value>
<value name='LOAD_FLAGS_REPLACE_HISTORY'>
    Replace the current URL in the session history with a new one. This flag might be
    used for a redirect.
</value>
</method>
<prop name='markupDocumentViewer' type='nsIMarkupDocumentViewer'>
  This read-only property contains the nsIMarkupDocumentViewer which is responsible  for drawing the document.
</prop>
<prop name='preferences' type='nsIPrefService'>
  This read-only property contains an nsIPref object for getting and setting user  preferences.
</prop>
<method name='reload'>
<prototype> reload ( ) </prototype>
  
  Reloads the document in the browser.
</method>
<method name='reloadWithFlags'>
<prototype> reloadWithFlags ( flags ) </prototype>
  
  Reloads the document in the browser with the given load flags. The flags listed below  may be used, which are all constants of the webNavigation property (or the  nsIWebNavigation interface). You may combine flags using a or symbol ( | )
<value name='LOAD_FLAGS_NONE'>
    No special flags. The document is loaded normally.
</value>
<value name='LOAD_FLAGS_BYPASS_CACHE'>
    Reload the page, ignoring if it is already in the cache. This is the flag used
    when the reload button is pressed while the Shift key is held down.
</value>
<value name='LOAD_FLAGS_BYPASS_PROXY'>
    Reload the page, ignoring the proxy server.
</value>
<value name='LOAD_FLAGS_CHARSET_CHANGE'>
    This flag is used if the document needs to be reloaded because the character
    set changed.
</value>
</method>
<method name='removeProgressListener'>
<prototype> removeProgressListener ( listener ) </prototype>
  
  Remove a progress listener from the browser.
</method>
<prop name='securityUI' type='nsISecureBrowserUI'>
  The readonly property holds an object which may be used to determine the  security level of the loaded document.
</prop>
<prop name='sessionHistory' type='nsISHistory'>
  This read-only property contains the nsISHistory object which holds the session  history.
</prop>
<method name='stop'>
<prototype> stop ( ) </prototype>
  
  Equivalent to pressing the Stop button, this method stops the currently loading  document.
</method>
<prop name='webBrowserFind' type='nsIWebBrowserFind'>
  This read-only property contains an nsIWebBrowserFind object which can be used  to search for text in the document.
</prop>
<prop name='webNavigation' type='nsIWebNavigation'>
  This read-only property contains the nsIWebNavigation object for the document.  Most of its methods are callable directly on the browser itself, such as goBack and  goForward. It also contains the load constants used by reloadWithFlags and  loadURIWithFlags.
</prop>
<prop name='webProgress' type='nsIWebProgress'>
  This read-only property contains an nsIWebProgress object which is used to monitor  the progress of a document loading.
</prop>
</element>

<element name='button'>
<documentation>http://www.xulplanet.com/tutorials/xultu/buttons.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_button.html</reference>
  A button that can be pressed by the user. Event handlers can be used to trap  mouse, keyboard and other events. It is typically rendered as a grey outset  rectangle. You can specify the label of the button using the label attribute  or by placing content inside the button.  

<example>
<![CDATA[
    &lt;button label=&quot;Press Me&quot;
            oncommand=&quot;alert('You pressed me!'); return false;&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULButtonElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the button.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the button will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='autoCheck' type='boolean'>
  If this attribute is true, or left out, the checked state of the button will  be switched each time the button is pressed. If this attribute is false, the  checked state must be adjusted manually.
</attr>
<attr name='checkState' type='integer: 0, 1 or 2'>
  This attribute may be used to create three state buttons, numbered 0, 1 and  2. When in state 0 or 1, pressing the button will switch to the opposite  state. When in state 2, pressing the button will switch to state 0. This  means that the button acts like a checkbox except that there is a third  state which must be set manually by adjusting the check state. If you wish  to have different behavior for how the states are adjusted, set the  autoCheck attribute to false and adjust the state with a script. The type  attribute must be set to 'checkbox' for buttons with a check state.  Constants for the possible values for this attribute are in the   nsIDOMXULButtonElement   interface.
</attr>
<attr name='checked' type='boolean'>
  Indicates whether the button is checked or not.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='crop'>
  If the label of the button is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='dir'>
  Specifies which side of the button's label that its image is placed.
<value name='ltr' default='true'>
    The image appears to the left or above the label.
</value>
<value name='rtl'>
    The image appears to the right or below the label.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the button is disabled or not. If this attribute is set to true,  the button is disabled. This is usually drawn with the text in grey. If the button is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the button, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='dlgType'>
  The dialog type of the button, used only when the button is in a dialog box.  You can use this feature to replace the standard dialog box buttons with custom  buttons, yet the dialog event methods will still function. For example, if the  dlgType is set to 'accept', the button will replace the dialog box's accept  button, which is usually labeled OK. Using this attribute on a button that is  not in a dialog box has no effect. The following values can be used as the dialog type:
<value name='accept'>
    The OK button, which will accept the changes when pressed.
</value>
<value name='cancel'>
    The cancel button which will cancel the operation.
</value>
<value name='help'>
    A help button for displaying help about the dialog.
</value>
<value name='disclosure'>
    A button to show more information. This might be a button or a disclosure
    triangle.
</value>
</attr>
<attr name='group' type='string group name'>
  Buttons with the same value for their group attribute are put into the same  group. Only one button from each group can be checked at a time. If the user  selects one the radio buttons, the others in the group are unchecked.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the button. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear on the button. If this is left out, no text appears.
</attr>
<attr name='open' type='boolean'>
  For the menu type buttons, the open attribute is set to true when the menu is  open. The open attribute is not present if the menu is closed.
</attr>
<attr name='orient'>
  Along with the dir attribute, the orient attribute is used to indicate  where the button's image appears in relation to the the label. 
<value name='horizontal' default='true'>
    The image appears to the left of the label if the dir attribute is 'ltr'
    or to the right of the text if the dir attribute is 'rtl'
</value>
<value name='vertical'>
    The image appears above the label if the dir attribute is 'ltr' or below
    the text if the dir attribute is 'rtl'
</value>
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='type'>
  The type of button. If this attribute is not present, a normal button is created.  Leave the attribute out for a normal button.
<value name='checkbox'>
    This type of button can be in two states. The user can click the button to
    switch between the states. This is not the same as a  checkbox  because it
    looks like a button.
</value>
<value name='menu'>
    Set the type attribute to the value 'menu' to create a button with a
    menu popup. Place a  menupopup  element inside the button in this case.
</value>
<value name='menu-button'>
     You can also use the value 'menu-button' to create a button with a
     menu. This second value will typically cause the button to be displayed
     with an arrow to the side indicating that a menu is present. This type of
     button is used for Mozilla's back and forward buttons.
</value>
<value name='radio'>
    The button acts like a radio button. Only one button in the group can be
    on a once.
</value>
</attr>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the button.
</prop>
<prop name='autoCheck'/>
<prop name='checkState'/>
<prop name='checked' type='boolean'/>
<prop name='command'/>
<prop name='crop'/>
<prop name='dir'/>
<prop name='disabled'/>
<prop name='dlgType'/>
<prop name='group'/>
<prop name='image'/>
<prop name='label'/>
<prop name='open'/>
<prop name='orient'/>
<prop name='type'/>
</element>

<element name='caption'>
<documentation>http://www.xulplanet.com/tutorials/xultu/titledbox.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_caption.html</reference>
  A header for a groupbox. It may contain either a text label, using the  label attribute, or child elements for a more complex caption.  

<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the caption.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the caption will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='crop'>
  If the label of the caption is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the caption. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear on the caption. If this is left out, no text appears.
</attr>
<prop name='accessKey'/>
<prop name='crop'/>
<prop name='image' type='image URL'/>
<prop name='label' type='string'/>
</element>

<element name='checkbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/inputs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_checkbox.html</reference>
  An element that can be turned on and off. This is most commonly rendered as  a box when the element is off and a box with a check when the element is on.  The user can switch the state of the check box by selecting it with the mouse.  A label, specified with the label attribute may be added beside the check box  to indicate to the user as to its function.  

<example>
<![CDATA[
    &lt;checkbox label=&quot;Enable JavaScript&quot; checked=&quot;false&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULCheckboxElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the checkbox.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the checkbox will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='checked' type='boolean'>
  Indicates whether the checkbox is checked or not.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='crop'>
  If the label of the checkbox is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the checkbox is disabled or not. If this attribute is set to true,  the checkbox is disabled. This is usually drawn with the text in grey. If the checkbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the checkbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the checkbox. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear beside the checkbox. If this is left out, no text appears.  The labels on checkboxes will wrap if there is not enough space.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the checkbox.
</prop>
<prop name='checked' type='boolean'>
  Indicates whether the checkbox is checked or not. You can change the checked  property to change the state of the checkbox. A CheckboxStateChange event  will be sent to the element when the checkbox is changed either via the  checked property or changed by the user.
</prop>
<prop name='command'/>
<prop name='crop'/>
<prop name='disabled'/>
<prop name='image'/>
<prop name='label'/>
</element>

<element name='colorpicker'>
<reference>http://www.xulplanet.com/reference/elemref/ref_colorpicker.html</reference>
  An element that the user may use to select a color from. Mozilla renders  this as a grid of colors. The user may select a color by clicking on one of  the grid cells.  

<attr name='color' type='color string'>
  The currently selected color. This is modified when the user selects a  color. You can assign a string of the form #RRGGBB to this property to  change the selected color.
</attr>
<attr name='onchange' type='script code'>
  The code in the onchange attribute is called when a color is selected.
</attr>
<attr name='type' type='string'>
  If this attribute is not present, the colorpicker is displayed inside the  window. If this is set to the text 'button', the colorpicker is displayed as  a button. When the user clicks the button, a popup appears for the user to  select a color.
</attr>
<prop name='color' type='color string'/>
</element>

<element name='column'>
<documentation>http://www.xulplanet.com/tutorials/xultu/grids.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_column.html</reference>
  A single column in a columns element. Each child of the column element is placed  in each successive cell of the grid. The column with the most child elements  determines the number of rows in each column.  

</element>

<element name='columns'>
<documentation>http://www.xulplanet.com/tutorials/xultu/grids.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_columns.html</reference>
  Defines the columns of a grid. Each child of a columns element should be a  column element.  

</element>

<element name='command'>
<documentation>http://www.xulplanet.com/tutorials/xultu/commands.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_command.html</reference>
  A command element can be used to invoke an operation that can come from multiple  sources. For example, a clipboard paste operation can be invoked from the Edit  menu, a context menu and by pressing a keyboard shortcut. You attach the code  to the command using the oncommand attribute. It will be called no matter how it  is invoked by the user. In addition, disabling the command will automatically  disable the menu items and keyboard shortcuts.        Commands are identified by their id. If you include the script  chrome://global/content/globalOverlay.js in your window, you can use the  function goDoCommand function to invoke the command. Using this function has  the advantage that the command will be sent to the part of the UI which will  respond to it. Typically, this will be the currently focused element. For  example, the following code will sent a paste command (cmd_paste) to the  currently focused element:         goDoCommand("cmd_paste");           Like a broadcaster, commands forward attributes to other elements.  
<html><![CDATA[
<p>  A command element can be used to invoke an operation that can come from multiple  sources. For example, a clipboard paste operation can be invoked from the Edit  menu, a context menu and by pressing a keyboard shortcut. You attach the code  to the command using the oncommand attribute. It will be called no matter how it  is invoked by the user. In addition, disabling the command will automatically  disable the menu items and keyboard shortcuts.  </p>  <p>  Commands are identified by their id. If you include the script  chrome://global/content/globalOverlay.js in your window, you can use the  function goDoCommand function to invoke the command. Using this function has  the advantage that the command will be sent to the part of the UI which will  respond to it. Typically, this will be the currently focused element. For  example, the following code will sent a paste command (cmd_paste) to the  currently focused element:  </p>  <p><pre>  goDoCommand("cmd_paste");  </pre>  </p>  <p>  Like a broadcaster, commands forward attributes to other elements.  </p>
]]></html>

<attr name='disabled' type='boolean'>
  If you set the disabled attribute to true, any menu items and keys attached to  the command become disabled. If you remove the disabled attribute, the menu  items and keys become enabled.
</attr>
<attr name='label' type='string'>
  The label inherited by the menu items and keys that are attached to the command.
</attr>
<attr name='oncommand' type='script code'>
  This event handler is called when the command is activated. This occurs when a  user selects a menu item or presses a keyboard shortcut attached to the command.
</attr>
</element>

<element name='commandset'>
<documentation>http://www.xulplanet.com/tutorials/xultu/commandupdate.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_commandset.html</reference>
  This element is not displayed and serves as a container for command elements.        In addition, this element can serve as a command updater, which is used to  update the enabled state of one or more commands when certain events occur.  A common use of the command updater is to update the cut, copy, and paste  menu items as the user selects text.  
<html><![CDATA[
<p>  This element is not displayed and serves as a container for command elements.  </p>  <p>  In addition, this element can serve as a command updater, which is used to  update the enabled state of one or more commands when certain events occur.  A common use of the command updater is to update the cut, copy, and paste  menu items as the user selects text.  </p>
]]></html>

<attr name='commandupdater' type='boolean'>
  If true, the commandset is used for updating commands. Typically, this  is used to update menu commands such as Undo and Cut based on when  an event occurs. For example, since the Cut command is only valid when  something is selected, a command updater might be used when the select  event occurs.
</attr>
<attr name='events' type='comma separated list'>
  A comma separated list of event names that the command updater will update upon.  If this attribute is not specified, or you set it to the value '*', all events  are valid. Valid events are listed below, or you can use your own events. You can  send a custom event by calling the UpdateCommands method of the   command dispatcher .
<value name='focus'>
    Occurs when the focused element changes.
</value>
<value name='select'>
    Occurs when the selected text changed.
</value>
<value name='clipboard'>
    Occurs when the clipboard is changed.
</value>
<value name='undo'>
    Occurs when the undo buffer is changed.
</value>
</attr>
<attr name='oncommandupdate' type='script code'>
  This event occurs when a command update occurs. You would use this to update  the disabled status of items.
</attr>
<attr name='targets' type='comma separated list of element ids'>
  A comma separated list of element ids that the command updater will update upon.  If this attribute is not specified, or you set it to the value '*', all elements  are valid. The command update will only occur when the event occurs to one of  the specified elements.
</attr>
</element>

<element name='conditions'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_conditions.html</reference>
  This element should appear directly inside a rule element and is used to  define conditions for the rule. Within the conditions can be placed content,  member and triple elements. These may have attributes whose value is a  variable name beginning with a question mark (?). When evaluating the rule for  a particular RDF resource, the variables are replaced with values from the  resource. If all variables can be replaced, the rule matched.  

</element>

<element name='content'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_content.html</reference>
  This element should appear inside a conditions element. A rule's conditions  should contain one and only one content element. The content element should  also have a uri attribute. It is used to bind a variable to a content node  during matching. When using a tree with the 'flags' attribute set to  'dont-build-content', use a treeitem element instead.  

<prop name='tag'>
  This may be set to a tag name. If set, the conditions will only match if the  template builder is parsing content for an element directly inside this tag.  For example, by using a value of 'treechildren', the condition will only match  when placing elements directly inside a treechildren tag. Thus, nested elements  will not match because they are directly inside a treeitem. This attribute is  useful to provide different rules for outer and inner elements.
</prop>
<prop name='uri'>
  Used to specify the variable name for the content. When a rule is  evaluated, it scans through each resource in the RDF datasource looking  for a match. Each resource is placed in the variable specified in the  uri attribute in turn. Then, the other rules are evaluated for a match.  This attribute should always be present.
</prop>
</element>

<element name='deck'>
<documentation>http://www.xulplanet.com/tutorials/xultu/stacks.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_deck.html</reference>
  An element that displays only one of its children at a time. The selectedIndex  attribute determines which child is displayed.  

<attr name='selectedIndex' type='integer'>
  Gets and sets the index of the currently selected panel in the deck.  The first item is at index 0.
</attr>
<prop name='selectedIndex' type='integer'>
  Gets and sets the index of the currently selected panel in the deck.  The first item is at index 0. A non-bubbling select event will be sent to  the deck when the selected panel is changed.
</prop>
<prop name='selectedPanel' type='element'>
  Holds a reference to the currently selected panel in the deck. Assign a value  to this property to modify the selected panel. A non-bubbling select event  will be sent to the deck when the selected panel is changed.
</prop>
</element>

<element name='description'>
<documentation>http://www.xulplanet.com/tutorials/xultu/textimage.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_description.html</reference>
  This element is used to create a block of text. The text can be set either  with the value attribute or by placing text inside the open and close  description tags. The value attribute is used to set text that appears in  a single line. If text appears as a child of the description, it will wrap  to multiple lines. If may contain arbitrary markup, which can be styled  as needed.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULDescriptionElement</implements>
<attr name='crop'>
  If the label of the description is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the description is disabled or not. If this attribute is set to true,  the description is disabled. This is usually drawn with the text in grey. If the description is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the description, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='value' type='string'>
  The text to be used for the description. The text will appear on a single  line and will not wrap. Normally, you would not use a value attribute on a  description element and instead place the text as the content inside the  description tag.
</attr>
<class name='header'>
  A class used for headings. Typically, this will cause the text to  appear bold.
</class>
<class name='indent'>
  This class causes the text to be indented on its left side.
</class>
<class name='monospace'>
  This class causes the text to be displayed in a monospace font.
</class>
<class name='plain'>
  This class causes the text to be displayed with no margin.
</class>
<class name='small-margin'>
  This class causes the text to be displayed with a smaller margin.
</class>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the description.
</prop>
<prop name='crop'/>
<prop name='disabled'/>
<prop name='value'/>
</element>

<element name='dialog'>
<documentation>http://www.xulplanet.com/tutorials/xultu/dialogs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_dialog.html</reference>
  This element should be used in place of the window element for dialog boxes.  The buttons attribute may be used to set which buttons should appear in the  dialog box. These buttons will be placed in the correct locations for the  user's platform.  

<attr name='buttonalign' type='string'>
  The value of the 'align' attribute for the box containing the buttons.
</attr>
<attr name='buttondir' type='string'>
  The value of the 'dir' attribute for the box containing the buttons.
</attr>
<attr name='buttonorient' type='string'>
  The value of the 'orient' attribute for the box containing the buttons.
</attr>
<attr name='buttonpack' type='string'>
  The value of the 'pack' attribute for the box containing the buttons.
</attr>
<attr name='buttons' type='comma-separated list of the values below'>
  A comma-separated list of buttons to appear on the dialog box. The buttons will  be placed in suitable locations for the user's platform and basic event handling  will be performed automatically. The following values can be used in the list:
<value name='accept'>
    The OK button, which will accept the changes when pressed. This button will also
    be the default button.
</value>
<value name='cancel'>
    The cancel button which will cancel the operation.
</value>
<value name='help'>
    A help button for displaying help about the dialog.
</value>
<value name='disclosure'>
    A button to show more information. This might be a button or a disclosure
    triangle.
</value>
</attr>
<attr name='ondialogaccept' type='script code'>
  The code in this attribute is called when the OK button is pressed, or when  the acceptDialog function is called.
</attr>
<attr name='ondialogcancel' type='script code'>
  The code in this attribute is called when the Cancel button is pressed, or when  the cancelDialog function is called.
</attr>
<attr name='ondialogdisclosure' type='script code'>
  The code in this attribute is called when the disclosure button is pressed.
</attr>
<attr name='ondialoghelp' type='script code'>
  The code in this attribute is called when the Help button is pressed.
</attr>
<attr name='title' type='string'>
  The text to appear on the title bar of the dialog box.
</attr>
<method name='acceptDialog'>
<prototype> acceptDialog ( ) </prototype>
  
  Accepts the dialog and closes it, similar to pressing the OK button.
</method>
<prop name='buttons' type='comma-separated list of the values below'>
  A comma-separated list of buttons to appear on the dialog box. The buttons will  be placed in suitable locations for the user's platform and basic event handling  will be performed automatically. The following values can be used in the list:
<value name='accept'>
    The OK button, which will accept the changes when pressed. This button will also
    be the default button.
</value>
<value name='cancel'>
    The cancel button which will cancel the operation.
</value>
<value name='help'>
    A help button for displaying help about the dialog.
</value>
<value name='disclosure'>
    A button to show more information. This might be a button or a disclosure
    triangle.
</value>
</prop>
<method name='cancelDialog'>
<prototype> cancelDialog ( ) </prototype>
  
  Cancels the dialog and closes it, similar to pressing the Cancel button.
</method>
<prop name='centerWindowOnScreen' type='no return value'>
  Centers the dialog on the screen.
</prop>
<prop name='enterDefaultAlways' type='boolean'>
  If set to true, pressing enter will always close the dialog, no matter which  element is focused. If false, pressing Enter while another button is focused  will not cause the dialog to close.
</prop>
<method name='getButton' returns='button element'>
<prototype> getButton ( type ) </prototype>
  
  Returns the button element in the dialog corresponding to the given type.
</method>
<prop name='moveToAlertPosition' type='no return value'>
  Moves and resizes the dialog to a position and size suitable for an alert box.
</prop>
</element>

<element name='dialogheader'>
<reference>http://www.xulplanet.com/reference/elemref/ref_dialogheader.html</reference>
  A heading row for a dialog box. This element should be placed inside a  dialog element. The header may have a title and a description.

<attr name='crop'>
  If the label of the dialogheader is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='description' type='string'>
  Descriptive text to appear in addition to the dialog title.
</attr>
<attr name='title' type='string'>
  A title for the dialogheader.
</attr>
</element>

<element name='editor'>
<reference>http://www.xulplanet.com/reference/elemref/ref_editor.html</reference>
  A frame which is expected to contain an editable document. Set the value of  the editortype attribute to 'html' to create an editor document. Mozilla  provides two types of editors, the HTML editor and the plaintext editor.  The editor does not provide any editing user interface; you would supply that  yourself. However, text editing, image resizing, and table row and cell  editing capabilities are provided. If you do not set the editortype  attribute on an editor, you must enable editing using the makeEditable  method.        To specify the document to load in the editor use the src attribute.  However, an issue is that if you specify the src attribute initially on the  editor tag in the XUL file, the document does not become editable by  default. To enable editing on an editor, do one of two things:           Set the src attribute on the editor after the outer window has loaded,        for example, in the onload handler. You might also set the src        attribute based on what the user selects from a file dialog. In this        case, set the editortype attribute on the editor.      Call the makeEditable function to make the document loaded in the        editor editable.         To edit a new document, set the src attribute to 'about:blank'.   
<html><![CDATA[
<p>  A frame which is expected to contain an editable document. Set the value of  the editortype attribute to 'html' to create an editor document. Mozilla  provides two types of editors, the HTML editor and the plaintext editor.  The editor does not provide any editing user interface; you would supply that  yourself. However, text editing, image resizing, and table row and cell  editing capabilities are provided. If you do not set the editortype  attribute on an editor, you must enable editing using the makeEditable  method.  </p>  <p>  To specify the document to load in the editor use the src attribute.  However, an issue is that if you specify the src attribute initially on the  editor tag in the XUL file, the document does not become editable by  default. To enable editing on an editor, do one of two things:  </p>  <ol>    <li>Set the src attribute on the editor after the outer window has loaded,        for example, in the onload handler. You might also set the src        attribute based on what the user selects from a file dialog. In this        case, set the editortype attribute on the editor.</li>    <li>Call the makeEditable function to make the document loaded in the        editor editable.</li>  </ol>  <p>  To edit a new document, set the src attribute to 'about:blank'.  </p></p>
]]></html>

<example>
<![CDATA[
    &lt;editor src=&quot;http://www.xulplanet.com&quot;/&gt;
    &lt;button label=&quot;Edit&quot; oncommand=&quot;this.previousSibling.makeEditable('html',false);&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<attr name='editortype'>
  The type of editor to use. This value will be overriden depending on the  content type of the document in the editor.
<value name='html'>
    An HTML editor.
</value>
<value name='text'>
    A plaintext editor.
</value>
</attr>
<attr name='src' type='document URL'>
  The URL of the file to load into the editor.
</attr>
<attr name='type' type='string'>
  If set to the string 'content-primary', this editor becomes the primary  content for the page. The window for the primary content can be retrieved  more conveniently using 'window.content'.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the editor.
</prop>
<prop name='commandManager' type='nsICommandManager'>
  The command manager handles operations on the editor.
</prop>
<prop name='contentDocument' type='document'>
  This read-only property contains the document object in the editor.
</prop>
<prop name='contentWindow' type='window'>
  This read-only property contains the window object in the editor.
</prop>
<prop name='docShell' type='nsIDocShell'>
  This read-only property contains the nsIDocShell object for the document.
</prop>
<prop name='editingSession' type='nsIEditorSession'>
  The editing session for the editor which is used to initialize the editor.  You would not normally need to use this.
</prop>
<prop name='editortype'>
  The type of editor to use. This value will be overriden depending on the  content type of the document in the editor.
<value name='html'>
    An HTML editor.
</value>
<value name='text'>
    A plaintext editor.
</value>
</prop>
<method name='getEditor' returns='nsIEditor'>
<prototype> getEditor ( window ) </prototype>
  
  Returns the editing interface for the editor which contains numerous  methods for manipulating the document. Pass the editor's contentWindow  as the argument.
</method>
<method name='getHTMLEditor' returns='nsIHTMLEditor'>
<prototype> getHTMLEditor ( window ) </prototype>
  
  Returns the HTML editing interface for the editor which contains   methods  for  manipulating an HTML document. Pass the editor's contentWindow  as the argument.
</method>
<method name='makeEditable'>
<prototype> makeEditable ( editortype , waitForLoad ) </prototype>
  
  This function enables editing for an editor. Specify 'text' or 'html' as the  editortype.
</method>
<prop name='webBrowserFind' type='nsIWebBrowserFind'>
  This read-only property contains an nsIWebBrowserFind object which can be used  to search for text in the document.
</prop>
<prop name='webNavigation' type='nsIWebNavigation'>
  This read-only property contains the nsIWebNavigation object for the document.  Most of its methods are callable directly on the editor itself, such as goBack and  goForward. It also contains the load constants used by reloadWithFlags and  loadURIWithFlags.
</prop>
</element>

<events>
<documentation>http://www.xulplanet.com/tutorials/xultu/events.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_EventHandlers.html</reference>
  The following describes the event handler attributes that are valid for most XUL  elements. The event name is the attribute without the 'on' prefix.  

<event name='CheckboxStateChange'>
  This event is sent when a checkbox is checked or unchecked, either by the  user or a script. This event has no corresponding attribute; it must be  added using the addEventListener method. Normally, you would use the command  event to listen to checkbox changes, however, the command event is only sent  when the user modifies the value, while the CheckboxStateChange event is  also sent when a script modifies the checked property of a checkbox. For user  changes, the CheckboxStateChange event is sent before the command event. The  CheckboxStateChange event does not bubble.
</event>
<event name='DOMAttrModified'>
  This event is sent to an element when one of its attributes is modified. In  the event handler, you can retrieve the attribute that was modified using  the event's attrName property, and you can retrieve the old and new values  of the attribute using the event's prevValue and newValue properties.
</event>
<event name='DOMMenuItemActive'>
  This event is sent when a menu or menuitem is hovered over, or highlighted.  This event bubbles.
</event>
<event name='DOMMenuItemInactive'>
  This event is sent when a menu or menuitem is no longer being hovered over,  or highlighted. This event bubbles.
</event>
<event name='DOMMouseScroll'>
  This event is sent when the mousewheel is moved, causing the content to  scroll.
</event>
<event name='DOMNodeInserted'>
  This event is sent when a node is added as a child of a element. If you  capture this element at the document level, you can be notified of document  changes.
</event>
<event name='DOMNodeRemoved'>
  This event is sent when a node is removed from an element. If you capture  this element at the document level, you can be notified of document changes.
</event>
<event name='RadioStateChange'>
  This event is sent when a radio button is selected, either by the user or a  script. This event has no corresponding attribute; it must be added using the  addEventListener method. Normally, you would use the command event to listen  to radio button selection changes, however, the command event is only sent  when the user changes the selected radio button, while the RadioStateChange  event is also sent when a script modifies the selection. For user changes,  the RadioStateChange event is sent before the command event. The  RadioStateChange event bubbles so you can also attach the event handler to  the enclosing radiogroup.
</event>
<event name='onblur'>
  The opposite of the focus event, the blur event is passed just as an element  loses the focus.
</event>
<event name='onbroadcast'>
  The event handler should be placed on an observer. The broadcast event is  sent when the attributes of the broadcaster being listened to are changed.
</event>
<event name='onchange'>
  This event is sent when the value of the textbox is changed.  The event is not sent until the focus is moved to another element.
</event>
<event name='onclick'>
  This event is sent when a mouse button is pressed and released. You can  determine which mouse button was clicked by retrieving the button property  of the event object. This event is also sent when the user double-clicks  with the mouse. The detail property specifies how many clicks occured. You  can also check for triple-clicks in a similar manner. For buttons and menus,  you should use oncommand instead.
</event>
<event name='onclose'>
  This event is sent when a request has been made to close the window, for  example, when the user presses the close button. If you place an event  handler on the window element, you can trap the window close. If you return  false from the onclose handler, the window will not close. Return true to  have it close normally.
</event>
<event name='oncommand'>
  This event handler is called when an element is activated. How it is activated  varies for each element and in many cases, there are several ways to activate  an element. For example, a button can be activated by clicking on it with the  mouse or by pressing ENTER while it has the focus. Menus can be activated by  selecting them with the mouse or by pressing a shortcut key. You should always  use the oncommand event instead of onclick because it will be called in all of  the needed cases.
</event>
<event name='oncommandupdate'>
  This event occurs when a command update occurs. You would use this to update  the disabled status of items.
</event>
<event name='oncontextmenu'>
  This event is sent to an element when the user requests to open the context menu  for the element. The action to do this varies by platform, but it will typically  be a right click. This handler is usually used to dynamically set the commands on  a menu when the user requests to display it, or you can use onpopupshowing event.  Returning false from this event handler prevents the popup from appearing.
</event>
<event name='ondblclick'>
  This event is like the click event except it is only sent when the user  double clicks with the mouse. This is an alternative to checking the detail  property in the click event.
</event>
<event name='ondragdrop'>
  This event is sent when the user releases the mouse button to drop an object  being dragged. The element, if it accepts the drop, should respond in some  manner such inserting the dragged object into itself.
</event>
<event name='ondragenter'>
  The dragenter event is sent when the mouse pointer first moves over an  element during a drag. It is similar to the mouseover event but occurs  while dragging.
</event>
<event name='ondragexit'>
  This event is sent when the mouse pointer moves away from an element during  a drag. It is also called after a drop on an element. It is similar to the  mouseout event but occurs during a drag.
</event>
<event name='ondraggesture'>
  This event is sent when the user starts dragging the element, usually by  holding down the mouse button and moving the mouse.
</event>
<event name='ondragover'>
  Related to the mousemove event, this event is sent while something is  being dragged over an element. The handler should indicate whether the  object being dragged can be dropped.
</event>
<event name='onfocus'>
  The focus event is sent to an element when it receives the focus. Once an  element has the focus, keyboard events are sent to it. The focus can be  changed by clicking on an element or by pressing TAB to switch to the next  element is sequence.
</event>
<event name='oninput'>
  This event is sent when a user enters text in a textbox. This event  is only called when the text displayed would change, thus it is not called  when the user presses non-displayable keys.
</event>
<event name='onkeydown'>
  The keydown event is sent to an element that has the focus and a key is  pressed but not released.
</event>
<event name='onkeypress'>
  The keypress event is sent to an element that has the focus and a key is  pressed and released. When the user presses a key, the keydown event is  first sent, followed by the keypress event and then the keyup event.  In a textbox, a user normally can hold down a key to repeat a character  In this case, multiple sets of key events are sent as if the user rapidly  pressed the same key repeatedly.
</event>
<event name='onkeyup'>
  The keyup event is sent to an element that has the focus and a key is  released.
</event>
<event name='onload'>
  This event is sent to the window after it has been fully loaded. You should  place this event handler on the window element. This event may also be used  on the image element, or an element that accepts an image attribute, and  will be fired when the image has finished loading. For images, this event  does not bubble up the element tree, so it will not conflict with the window's  onload event.
</event>
<event name='onmousedown'>
  This event is sent when the mouse is pressed on an element but not released.
</event>
<event name='onmousemove'>
  This event is sent repeatedly as the mouse is moved over an element.
</event>
<event name='onmouseout'>
  This mouseout event is sent to an element when the user moves the mouse  outside the element. This event is the reverse of onmouseover.
</event>
<event name='onmouseover'>
  This event is sent to an element when the mouse first moves over an element.  You can use this event to provide feedback to the user.
</event>
<event name='onmouseup'>
  This event is sent when the mouse is released on an element.
</event>
<event name='onoverflow'>
  This event is sent to a box or other layout element when there is not enough  space to display it at full size. This might be the result of maximum sizes  on elements. For example, if a box has a maximum size of 100 pixels, and only  enough space for 80 pixels is available, the overflow event will be sent to  the box. If the size changes, for example, by the user resizing the window,  you can use the onunderflow event handler to determine when enough space is  available.
</event>
<event name='onoverflowchanged'>
  This event is sent when the overflow state changes.
</event>
<event name='onpopuphidden'>
  This event is sent to a popup after it has been hidden.
</event>
<event name='onpopuphiding'>
  This event is sent to a popup when it is about to be hidden.
</event>
<event name='onpopupshowing'>
  This event is sent to a popup just before it is popped open. This handler is  usually used to dynamically set the contents when the user requests to display it.
</event>
<event name='onpopupshown'>
  This is event is sent to a popup after it has been opened, much like the onload  event is sent to a window when it is opened.
</event>
<event name='onselect'>
  This event is sent to a listbox or tree when an item is selected.
</event>
<event name='onunderflow'>
  This event is sent to an element when there becomes enough space to display  it at full size. This applies to boxes and other layout elements.
</event>
<event name='onunload'>
  This event is sent to a window when the window has closed. This is done  after the close event. You should place this event handler on the window  element.
</event>
</events>
<object>
<documentation>http://www.xulplanet.com/tutorials/xultu/xpiadv.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_File.html</reference>
  The File object can be used to manipulate files. Like the Install functions, the  functions of the File object only assign an operation to be performed once the  installation has begun.      Most functions take a file or folder as an argument. This  argument must be one returned by the   Install.getFolder  function.        This object is only available in an installation script.  
<html><![CDATA[
<p>  The File object can be used to manipulate files. Like the Install functions, the  functions of the File object only assign an operation to be performed once the  installation has begun.</p>  <p>  Most functions take a file or folder as an argument. This  argument must be one returned by the  <a href="ref_Install.html#prop_getFolder">Install.getFolder</a> function.  </p>  <p>  This object is only available in an installation script.  </p>
]]></html>

<method name='copy'>
<prototype> copy ( source , dest ) </prototype>
  
  Assigns a file to be copied. The file specified by source is copied to the location  specified by dest.
</method>
<method name='dirCreate'>
<prototype> dirCreate ( folder ) </prototype>
  
  Assigns the directory referred to by the folder argument to be created. This folder must  have been returned by the Install.getFolder function.
</method>
<method name='dirGetParent'>
<prototype> dirGetParent ( folder ) </prototype>
  
  Returns the parent directory of the folder argument. This folder must have  been returned by the Install.getFolder function.
</method>
<method name='dirRemove'>
<prototype> dirRemove ( folder , recurse ) </prototype>
  
  Assigns the directory referred to by the folder argument to be removed. If recurse is set  to true, the directory is deleted recursively. If false, the directory is only deleted if  it is empty.
</method>
<method name='dirRename'>
<prototype> dirRename ( folder , newname ) </prototype>
  
  Assigns the directory referred to by the folder argument to be renamed. The newname  argument should be set to a string that contains the new name of the directory.
</method>
<method name='diskSpaceAvailable'>
<prototype> diskSpaceAvailable ( folder ) </prototype>
  
  Returns the number of bytes of available space on the disk on which the given folder  is located on.
</method>
<method name='execute'>
<prototype> execute ( file , args ) </prototype>
  
  Assigns a file to be executed during the installation. You may optionally specify arguments.  This function is not the same as the   Install.execute  function. That function runs  files from inside the installer archive only. This function is used to run files which  are already on disk.
</method>
<method name='exists'>
<prototype> exists ( file ) </prototype>
  
  Returns true if the file exists.
</method>
<method name='isDirectory'>
<prototype> isDirectory ( folder ) </prototype>
  
  Returns true if the given folder is a reference to a directory.
</method>
<method name='isFile'>
<prototype> isFile ( file ) </prototype>
  
  Returns true if the given folder is a reference to a file.
</method>
<method name='macAlias'>
<prototype> macAlias ( sourceFolder , sourceFile , aliasFolder ) </prototype>
  
  Assigns a Macintosh shortcut to another file be created. On non-Macintosh systems, this  function does nothing. Arguments are as follows:               sourceFolder  Refers to the folder containing the file which the alias points                               to. This argument must be returned by getFolder.             sourceFile  A string that holds the filename of the alias.             aliasFolder  Refers to the location of the new alias. This argument must be                            returned by getFolder.        
</method>
<method name='modDate'>
<prototype> modDate ( file ) </prototype>
  
  Returns the last modified date of the given file. The date is returned as a number,  which you can then pass to the JavaScript Date object.
</method>
<method name='modDateChanged'>
<prototype> modDateChanged ( file , date ) </prototype>
  
  Returns true if last modified date of the given file is different than the date  given by the second argument. This might be used to compare versions of files.
</method>
<method name='move'>
<prototype> move ( source , dest ) </prototype>
  
  Assigns a file given by source to be moved to a different location given by dest.
</method>
<method name='nativeVersion'>
<prototype> nativeVersion ( file ) </prototype>
  

</method>
<method name='remove'>
<prototype> remove ( file ) </prototype>
  
  Assigns a file to be removed.
</method>
<method name='rename'>
<prototype> rename ( file , newname ) </prototype>
  
  Assigns the file referred to by the file argument to be renamed. The newname  argument should be set to a string that contains the new name of the file.
</method>
<method name='size'>
<prototype> size ( file ) </prototype>
  
  Returns the size in bytes of the given file.
</method>
<method name='unixLink'>
<prototype> unixLink ( source , flags ) </prototype>
  

</method>
<method name='windowsRegisterServer'>
<prototype> windowsRegisterServer ( folder ) </prototype>
  
  Used to register Windows COM servers. The argument folder should refer to the library  file.
</method>
<method name='windowsShortcut'>
<prototype> windowsShortcut ( target , shortcut , desc , workingDir , args , icon , iconid ) </prototype>
  
  Assigns a Windows shortcut to another file to be created. On non-Windows systems, this  function does nothing. Arguments are as follows:               target  A string that holds the target of the shortcut.             shortcut  A string that holds the path and filename of the shortcut.             desc  The description of the shortcut.             workingDir  The working directory of the shortcut, when it is executed,                             assuming that the shortcut points to an executable file.             args  The arguments passed to the shortcut when executed.             icon  A string that holds the path of the file that contains the shortcut's                       icon.             iconid  The ID of the icon within the icon file.        
</method>
</object>

<element name='grid'>
<documentation>http://www.xulplanet.com/tutorials/xultu/grids.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_grid.html</reference>
  A grid is an element that contains both rows and columns elements. It is used  to create a grid of elements. Both the rows and columns are displayed at once  although only one will typically contain content, while the other may provide  size information. Whichever is last in the grid is displayed on top.  

</element>

<element name='grippy'>
<documentation>http://www.xulplanet.com/tutorials/xultu/splitter.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_grippy.html</reference>
  An element that may be used inside a splitter which can be used to  collapse a sibling element of the splitter.  

</element>

<element name='groupbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/titledbox.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_groupbox.html</reference>
  A box that draws a frame around it, intended to group a set of elements  together. If a caption element is placed inside the groupbox, it will be  used as a caption which appears along the top of the groupbox.  

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the groupbox.
</prop>
</element>

<element name='hbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/boxes.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_hbox.html</reference>
  A container element which can contain any number of child elements. This is  equivalent to the box element.  

</element>

<element name='iframe'>
<documentation>http://www.xulplanet.com/tutorials/xultu/cpanels.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_iframe.html</reference>
  An inner frame that works much the HTML iframe element. The src attribute can  be used to specify the content of the frame. This content is a separate  document. The children of the iframe are ignored.  

<implements>nsIAccessibleProvider</implements>
<attr name='src' type='URL'>
  The URL of the page to appear in the iframe.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the iframe.
</prop>
<prop name='contentDocument' type='document'>
  This read-only property contains the document object in the iframe.
</prop>
<prop name='contentWindow' type='window'>
  This read-only property contains the window object in the iframe.
</prop>
<prop name='docShell' type='nsIDocShell'>
  Returns the XPCOM object that implements the iframe's document  functionality.
</prop>
<prop name='webNavigation' type='nsIWebNavigation'>
  This read-only property contains the nsIWebNavigation object for the document.
</prop>
</element>

<element name='image'>
<documentation>http://www.xulplanet.com/tutorials/xultu/textimage.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_image.html</reference>
  An element that displays an image, much like the HTML img element. The src  attribute can be used to specify the URL of the image.  

<example>
<![CDATA[
    &lt;image src='my-face.png' width='60' height='80'/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULImageElement</implements>
<attr name='onerror' type='script code'>
  This event is sent to an image element when an error occurs loading the image.
</attr>
<attr name='onload' type='script code'>
  This event handler will be called on the image element when the image has  finished loading. This applies whether the image is applied via the src  attribute or the list-style-image style property. If you change the image,  the event will fire again when the new image loads. This event will not bubble  up the element tree.
</attr>
<attr name='src' type='image URL'>
  The URL of the image to appear on the image. If this attribute is left  out, no image appears.
</attr>
<attr name='validate'>
  This attribute indicates whether to load the image from the cache or not.  This would be useful if the images are stored remotely or you plan on swapping  the image frequently. The following values are accepted, or leave out the  attribute entirely for default handling:
<value name='always'>
    The image is always checked to see whether it should be reloaded.
</value>
<value name='never'>
    The image will be loaded from the cache if possible.
</value>
</attr>
<class name='alert-icon'>
  Class that adds a alert icon. This typically looks like an exclamation mark.  This and the other icon classes may be used by image elements or other  elements which can have an image.
</class>
<class name='error-icon'>
  Class that adds a error icon. This will typically be a red X icon.
</class>
<class name='message-icon'>
  Class that adds a message box icon.
</class>
<class name='question-icon'>
  Class that adds a question icon, which usually looks like a question mark.
</class>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the image.
</prop>
<prop name='src'/>
</element>

<object>
<documentation>http://www.xulplanet.com/tutorials/xultu/xpiscript.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_Install.html</reference>
  An object used for installations. This object is only available within an installation  script.        The methods can can be called without the preceding Install reference. Most  of the functions only add an operation to an installation queue. When the function  performInstall is called, each operation from the queue is performed. This makes it  convenient to cancel an installation by calling cancelInstall. Functions generally  return error codes, but you can also use the getLastError function to get the error  code generated by the last function, if any.  
<html><![CDATA[
<p>  An object used for installations. This object is only available within an installation  script.  </p>  <p>  The methods can can be called without the preceding Install reference. Most  of the functions only add an operation to an installation queue. When the function  performInstall is called, each operation from the queue is performed. This makes it  convenient to cancel an installation by calling cancelInstall. Functions generally  return error codes, but you can also use the getLastError function to get the error  code generated by the last function, if any.  </p>
]]></html>

<prop name='Install'>
  Refers to the Install object itself. This property is used to allow syntax  such as Install.initInstall() or initInstall().
</prop>
<method name='addDirectory'>
<prototype> addDirectory ( jarDir )
addDirectory ( regName , jarDir , destDir , subDir )
addDirectory ( regName , version , jarDir , destDir , subDir )
addDirectory ( regName , version , jarDir , destDir , subDir , force ) </prototype>
  
  Assigns a new directory to be installed from the installation file. Parameters are  as follows:               regName  The registry name of the package being installed. This should                          be of the form /Company Name/Package Name/Program             version  The version of the files in the directory being installed, as digits                          separated by periods, such as 1.5.3.9             jarDir  The directory within the XPI archive to be installed. The                            contents of this directory will be installed.             destDir  The destination directory to install into. If this parameter                          is not supplied, you must first call setPackageFolder first to                          set the destination directory for the installation.             subDir  The name of the directory to create.             force  If true, the directory contents are always installed. If false,                        the files are only installed if the existing files, if any, are                        older versions. Newer versions are not installed. If not                        specified, the default is true.        
</method>
<method name='addFile'>
<prototype> addFile ( sourceFile )
addFile ( regName , sourceFile , destDir , target )
addFile ( regName , version , sourceFile , destDir , target )
addFile ( regName , version , sourceFile , destDir , target , force ) </prototype>
  
  Assigns a new file to be installed from the installation file. Parameters are  as follows:               regName  The registry name of the package which the file belongs to.             version  The version of the file being installed, as digits                          separated by periods, such as 2.9.15.67             sourceFile  The name of the file within the XPI archive to be installed.             destDir  The destination directory to install into. If this parameter                          is not supplied, you must first call setPackageFolder first to                          set the destination directory for the installation.             target  If you want to change the name of the file, you can assign a                         different one using the target parameter. Otherwise, just pass                         in a null string.             force  If true, the file is always installed. If false, the file is                        only installed if the existing file, if it exists, is an older                        version. If not specified, the default is true.        
</method>
<method name='alert'>
<prototype> alert ( text ) </prototype>
  
  Displays an alert dialog. Equivalent to the  window.alert  function.
</method>
<prop name='archive'>
  This property is equivalent to the jarfile property.
</prop>
<prop name='arguments'>
  Returns the HTTP arguments to the installer archive. This property is read only.
</prop>
<prop name='buildID'>
  The build ID of the browser.
</prop>
<method name='cancelInstall'>
<prototype> cancelInstall ( errorCode ) </prototype>
  
  Cancels an installation. The queue of files to be installed and other operations to  perform is emptied. Use this function when an error occurs and you need to stop an  installation. You should present a message to the user indicating why. The argument  may be used to supply an error code.
</method>
<method name='confirm'>
<prototype> confirm ( text ) </prototype>
  
  Displays a confirmation dialog. Equivalent to the  window.confirm  function.
</method>
<method name='deleteRegisteredFile'>
<prototype> deleteRegisteredFile ( regName ) </prototype>
  
  Assigns an installed file or directory to be deleted during the installation process.
</method>
<method name='execute'>
<prototype> execute ( sourceFile , args ) </prototype>
  
  Assigns a file in the installation package to be executed during the installation. You  may supply arguments to the file, which, of course, must be an executable file.
</method>
<method name='gestalt'>
<prototype> gestalt ( selector ) </prototype>
  
  Performs a Macintosh gestalt operation and returns the result. The selector should  be a four character string that corresponds to the gestalt selector you want to  examine. The function does nothing on non-Macintosh systems.
</method>
<method name='getComponentFolder'>
<prototype> getComponentFolder ( regName )
getComponentFolder ( regName , subDir ) </prototype>
  
  Returns the directory where the component installed with the name regName is located.  You may optionally append a subdirectory to the path at the same time. Returns a null  string if the component is not found.
</method>
<method name='getFolder'>
<prototype> getFolder ( folder )
getFolder ( folder , subDir ) </prototype>
  
  Returns a special folder object given by the folder argument. You may also use a  subdirectory argument to have this directory or file appended to the returned folder.  You can later use the returned value as the first argument to the getFolder function  to get a further subdirectory. The subdirectory does not have to exist. To check for  existence of a directory, use the  File.exists   function.        Despite the name, you can also use this function to get files.        The following strings can be used as the first argument:                  Plugins        Program        Temporary        Profile             Preferences        OS Drive        file:///        Components             Chrome        Win System        Windows        Mac System             Mac Desktop        Mac Trash        Mac Startup        Mac Shutdown             Mac Apple Menu        Mac Control Panel        Mac Extension        Mac Fonts             Mac Preferences        Mac Documents        Unix Local        Unix Lib           
</method>
<method name='getLastError'>
<prototype> getLastError ( ) </prototype>
  
  Returns the last error code generated by the installer functions.
</method>
<method name='getWinProfile'>
<prototype> getWinProfile ( folder , file ) </prototype>
  
  Returns an object which can be used to read and write to Windows INI files. The  arguments specify the folder and filename of the INI file. This function does  nothing on non-Windows systems.
</method>
<method name='getWinRegistry'>
<prototype> getWinRegistry ( ) </prototype>
  
  Returns an object which can be used to read and write to the Windows registry. This  function does nothing on non-Windows systems.
</method>
<method name='initInstall'>
<prototype> initInstall ( packageName , regPackage , version ) </prototype>
  
  Initializes for an installation. Call this function at the beginning of your  installation script. The packageName is the name of the package being installed.  This name should be the name as the user sees it. The second parameter should be  the registry name of the package. This should be of the form  /Company Name/Package Name. The third parameter is a version number of the package.
</method>
<prop name='jarfile'>
  A file object that refers to the JAR file of the installer. This property is read  only.
</prop>
<method name='loadResources'>
<prototype> loadResources ( sourceFile ) </prototype>
  
  Loads the property file from the install archive and returns a string bundle created  from it. You can use these strings in dialog boxes to present localized text.
</method>
<method name='logComment'>
<prototype> logComment ( text ) </prototype>
  
  Logs the specified text to an installation log.
</method>
<method name='patch'>
<prototype> patch ( jarPath )
patch ( regName , sourceFile , destDir , target )
patch ( regName , version , sourceFile , destDir , target ) </prototype>
  
  Assigns a patch to be applied to an installed file. Arguments are similar to the  addFile function except that the file refers to a patch file instead. An error occurs  if the file is not already installed.
</method>
<method name='performInstall'>
<prototype> performInstall ( ) </prototype>
  
  Begins the installation process. Call this at the end of the installation script once  you have specified files and directories to be installed.
</method>
<prop name='platform'>
  The platform that the package is being installed on. This is equivalent to  the value of the navigator.platform property, but it isn't available in install  scripts.
</prop>
<method name='refreshPlugins'>
<prototype> refreshPlugins ( ) </prototype>
  
  Refreshes the list of installed plugins.
</method>
<method name='registerChrome'>
<prototype> registerChrome ( type , folder )
registerChrome ( type , folder , jarpath ) </prototype>
  
  Assigns a new content, skin or locale to be registered into the chrome system. It can  then be referred to with a chrome URL. The type may be one of the following values:        Install.SKIN - Register a new skin      Install.LOCALE - Register a new locale      Install.CONTENT - Register a new content package         The folder argument must be one generated from a call to getFolder. The folder should  be a reference to the directory containing the contents.rdf manifest file for the chrome  to be registered. (not a reference to the contents.rdf file itself however). It may also  be a reference to a JAR file, in which case you should set jarpath to the path to the  contents.rdf within the JAR file. This function does not install any files. You must call  addDirectory or addFile first.
</method>
<method name='resetError'>
<prototype> resetError ( ) </prototype>
  
  Clears the error code status.
</method>
<method name='setPackageFolder'>
<prototype> setPackageFolder ( folder ) </prototype>
  
  Sets the destination directory for the package. The folder argument should be  set to this directory and must be one generated from a call to getFolder.
</method>
<method name='uninstall'>
<prototype> uninstall ( regName ) </prototype>
  
  Uninstalls a package with the given name.
</method>
<prop name='url'>
  Returns the URL of the installer archive. This property is read only.
</prop>
</object>

<object>
<documentation>http://www.xulplanet.com/tutorials/xultu/xpinstall.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_InstallTrigger.html</reference>
  Used to trigger an installation of a component. The component should be  an XPI file containing the files to installed. The XPI file will be downloaded  and the install.js script within the installer will be executed. This object  is a global object and its methods can be called directly.  

<method name='compareVersion'>
<prototype> compareVersion ( String name , String version )
compareVersion ( String name , String version , major , minor , release , build ) </prototype>
  
  Compares the version of a package being installed with the current version installed.  You can either pass in a string as the version or a set of up to four integers,  representing each part of the version.        If you don't supply all four integers, the missing values default to 0. The string  version is a set of numbers separated by periods, as in 4.2.5 which is major  version 4, minor version 2 and release 5.        The compareVersion function returns a value which determines what value is different.  The following table describes possible return values:             Constant    Value    Description         EQUAL  0  The versions are the same.        BLD_DIFF  1  The current installation has a higher build version number.        BLD_DIFF_MINUS  -1  The current installation has a lower build version number.        REL_DIFF  2  The current installation has a higher release version number.        REL_DIFF_MINUS  -2  The current installation has a lower release version number.        MINOR_DIFF  3  The current installation has a higher minor version number.        MINOR_DIFF_MINUS  -3  The current installation has a lower minor version number.        MAJOR_DIFF  4  The current installation has a higher major version number.        MAJOR_DIFF_MINUS  -4  The current installation has a lower major version number.     
</method>
<method name='enabled'>
<prototype> enabled ( ) </prototype>
  
  Returns true if installs are enabled. This corresponds to the value of the  Mozilla preference 'xpinstall.enabled'.
</method>
<method name='getVersion'>
<prototype> getVersion ( component ) </prototype>
  
  Returns the version of a component currently installed as a string. Returns null  if the component is not installed.
</method>
<method name='install'>
<prototype> install ( arr , notifyFunction ) </prototype>
  
  Starts an installation. The first argument is an array of packages to be installed.    The notifyFunction is a callback function which you may define which is called  when an installation is complete or when an error occurs. The callback function takes  two arguments, the first will be the URL of the package that was installed and the  second is an integer which will be zero if successful and non-zero if an error occured.  The special value 999 indicates that the user must restart their system before the  installation can complete (usually due to locked files).    You will typically install only one package but you may install as many as you  wish. A dialog box will be presented to the user to confirm the installation. The  example below will install two packages     xpi["Calculator"] = "calc.xpi"; xpi["PictureViewer"] = "pict.xpi"; InstallTrigger.install(xpi , myCallbackFunction);       Two packages, the Calculator and PictureViewer are installed. The XPI files are     URLs relative to the script triggering the installation.
</method>
<method name='installChrome'>
<prototype> installChrome ( type , url, name ) </prototype>
  
  Installs a new chrome package. This function is a shorthand for the more  general install function. The following values are valid for the type:        InstallTrigger.SKIN - Install a new skin      InstallTrigger.LOCALE - Install a new locale      InstallTrigger.CONTENT - Install a new content package    
</method>
<method name='startSoftwareUpdate'>
<prototype> startSoftwareUpdate ( url , flags ) </prototype>
  
  Starts a software installation. The first argument is the URL of the installation  archive file. The second argument is used for flags, which is currently unused.  The function is simply a shorthand for the install function when only one component  is being installed and no callback function is desired.
</method>
</object>

<element name='key'>
<documentation>http://www.xulplanet.com/tutorials/xultu/keyshort.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_key.html</reference>
  The key element defines a keyboard shortcut. Event handlers can be used  to respond when the appropriate keys are pressed. A key element must be  placed inside a keyset element.  

<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='disabled' type='boolean'>
  Set to true to disable the key. This is often used with a broadcaster to  disable a menu command and key at the same time.
</attr>
<attr name='key' type='character'>
  The character that is must be pressed. This should be set to a displayable  character.
</attr>
<attr name='keycode' type='string key code'>
  For keys that do not have displayable characters, such as the enter key or  function keys, use this attribute, instead of the key attribute. Valid keys  are listed  here .
</attr>
<attr name='keytext' type='string'>
  A label for the keyboard shortcut. This text would appear next to a menuitem  label if that menuitem is associated with the key element via its key  attribute.
</attr>
<attr name='modifiers' type='space separated list of the values below'>
  A list of modifier keys that should be pressed to invoke the keyboard  shortcut. Multiple keys may be separated by spaces or commas. Keys will map  to other keys on platforms that do not have them.
<value name='shift'>
    The Shift key.
</value>
<value name='alt'>
    The Alt key. On the Macintosh, this is the Option key.
</value>
<value name='meta'>
    The Meta key. On the Macintosh, this is the Command key.
</value>
<value name='control'>
    The Control key.
</value>
<value name='accel'>
    The key used for keyboard shortcuts on the user's platform. Usually, this would
    be the value you would use.
</value>
</attr>
<attr name='oncommand' type='script code'>
  This event handler is called when an element is activated. How it is activated  varies for each element and in many cases, there are several ways to activate  an element. For example, a button can be activated by clicking on it with the  mouse or by pressing ENTER while it has the focus. Menus can be activated by  selecting them with the mouse or by pressing a shortcut key. You should always  use the oncommand event instead of onclick because it will be called in all of  the needed cases.
</attr>
<attr name='phase' type='string'>
  The event phase where the handler is invoked. This should be set to the  value 'capturing' to indicate during the event capturing phase or 'target'  to indicate at the target element or left out entirely for the bubbling  phase.
</attr>
</element>

<element name='keyset'>
<documentation>http://www.xulplanet.com/tutorials/xultu/keyshort.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_keyset.html</reference>
  A container element for key elements. The keyset and its descendants are not  displayed.  

</element>

<element name='label'>
<documentation>http://www.xulplanet.com/tutorials/xultu/textimage.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_label.html</reference>
  This element is used to provide a label for an control element, If the user  clicks the label, it will move the focus to the associated control, specified  with the control attribute.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULLabelElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the label.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the label will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='control' type='element id'>
  This attribute should be set to the id of an element that the label is  associated with. When the user clicks on the label, the associated element  is given the focus.
</attr>
<attr name='crop'>
  If the label of the label is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  If this attribute is set to true, the label is disabled. This is usually  drawn with the text in grey. Leave the attribute out entirely for a regular  enabled label.
</attr>
<attr name='value' type='string'>
  The text to be used for the label.
</attr>
<class name='header'>
  A class used for headings. Typically, this will cause the text to  appear bold.
</class>
<class name='indent'>
  This class causes the text to be indented on its left side.
</class>
<class name='monospace'>
  This class causes the text to be displayed in a monospace font.
</class>
<class name='plain'>
  This class causes the text to be displayed with no margin.
</class>
<class name='small-margin'>
  This class causes the text to be displayed with a smaller margin.
</class>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the label.
</prop>
<prop name='control'/>
<prop name='crop'/>
<prop name='disabled'/>
<prop name='value'/>
</element>

<element name='listbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/lists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listbox.html</reference>
  This element is used to create a list of items. This is a simpler version of  a tree. Nested rows are not supported, but a listbox may contain multiple  columns. There are numerous methods which allow the items in the listbox to  be retrieved and modified.        You may specify the number of rows to display in the list using the rows  attribute. Additional rows can be viewed by using a scroll bar. All of the  rows in the listbox are the same height, which is the height of the largest  item in the list.  
<html><![CDATA[
<p>  This element is used to create a list of items. This is a simpler version of  a tree. Nested rows are not supported, but a listbox may contain multiple  columns. There are numerous methods which allow the items in the listbox to  be retrieved and modified.  </p>  <p>  You may specify the number of rows to display in the list using the rows  attribute. Additional rows can be viewed by using a scroll bar. All of the  rows in the listbox are the same height, which is the height of the largest  item in the list.  </p>
]]></html>

<example>
<![CDATA[
    &lt;listbox id=&quot;theList&quot;&gt;
      &lt;listitem label=&quot;Ruby&quot;/&gt;
      &lt;listitem label=&quot;Emerald&quot;/&gt;
      &lt;listitem label=&quot;Sapphire&quot;/&gt;
      &lt;listitem label=&quot;Diamond&quot;/&gt;
    &lt;/listbox&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULMultiSelectControlElement</implements>
<attr name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the list by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a listbox by setting this attribute  to true.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the listbox is disabled or not. If this attribute is set to true,  the listbox is disabled. This is usually drawn with the text in grey. If the listbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the listbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='rows' type='integer'>
  The number of rows to display in the list box. If the listbox contains more  than this many rows, a scrollbar will appear which the user can use to  scroll to the other rows. To get the actual number of rows in the listbox,  use the getRowCount method.
</attr>
<attr name='seltype'>
  Used to indicate whether multiple selection is allowed.
<value name='single'>
    Only one row may be selected at a time.
</value>
<value name='multiple'>
    Multiple rows may be selected at once.
</value>
</attr>
<attr name='suppressonselect' type='boolean'>
  If this attribue is not specified, a select event is fired whenever an item  is selected, either by the user or by calling one of the select methods. If  set to true, the select event is never fired.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='value' type='string'>
  You can associate a data value with each listitem. It is not used for any  specific purpose but you can access it with a script for your own use.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the listbox.
</prop>
<method name='addItemToSelection'>
<prototype> addItemToSelection ( item ) </prototype>
  
  Selects the given item, without deselecting any other items that are already  selected.
</method>
<method name='appendItem' returns='listitem element'>
<prototype> appendItem ( label , value ) </prototype>
  
  Creates a new listitem element and adds it to the end of the list box. You  may optionally set a value. The function returns the new item.
</method>
<method name='clearSelection'>
<prototype> clearSelection ( ) </prototype>
  
  Deselects all of the items.
</method>
<prop name='currentItem' type='listitem element'>
  Returns the last selected item in the list box, which is only useful in a  multiple selection list box.
</prop>
<prop name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the list by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a listbox by setting this attribute  to true.
</prop>
<prop name='disabled'/>
<method name='ensureElementIsVisible'>
<prototype> ensureElementIsVisible ( element ) </prototype>
  
  If the element in the list box is not currently visible to the user, the list  box view is scrolled so that it is. If the item is already visible, no  scrolling occurs.
</method>
<method name='ensureIndexIsVisible'>
<prototype> ensureIndexIsVisible ( index ) </prototype>
  
  If the item at the specified index is not currently visible to the user,  the list box view is scrolled so that it is. If the item is already visible,  no scrolling occurs.
</method>
<method name='getIndexOfFirstVisibleRow' returns='integer'>
<prototype> getIndexOfFirstVisibleRow ( ) </prototype>
  
  Returns the index of the first displayed row in the list box. This is not  the same as the first row. If the view of the list box has been scrolled  down, the function can be used to retrieve the index of the first  row that the user can see.
</method>
<method name='getIndexOfItem' returns='integer'>
<prototype> getIndexOfItem ( item ) </prototype>
  
  Returns the zero-based position of the given item. Items are numbered  starting from the first item displayed in the list.
</method>
<method name='getItemAtIndex' returns='listitem element'>
<prototype> getItemAtIndex ( index ) </prototype>
  
  Returns the item that is at the position specified by the parameter  index in the list box.
</method>
<method name='getNextItem' returns='listitem element'>
<prototype> getNextItem ( startItem, delta ) </prototype>
  
  This method returns a item after another one. The parameter startItem is  the item and delta is the number of items to count to.    getNextItem ( someItem, 2 );     This example, given a item someItem, will return the item 2 rows after  it, or null if no such item exists.
</method>
<method name='getNumberOfVisibleRows' returns='integer'>
<prototype> getNumberOfVisibleRows ( ) </prototype>
  
  Returns the number of rows of the list box that are currently visible to  the user.
</method>
<method name='getPreviousItem' returns='listitem element'>
<prototype> getPreviousItem ( startItem, delta ) </prototype>
  
  This method returns a item before another one. The parameter startItem is  the item and delta is the number of items to count to.    getPreviousItem ( someItem, 5 );     This example, given a item someItem, will return the item 5 rows before  it, or null if no such item exists.
</method>
<method name='getRowCount' returns='integer'>
<prototype> getRowCount ( ) </prototype>
  
  Returns the total number of rows in the list box, regardless of how many  rows are displayed.
</method>
<method name='getSelectedItem' returns='listitem element'>
<prototype> getSelectedItem ( index ) </prototype>
  
  When multiple items are selected, you can retrieve each selected item  using this function. The argument index specifies the index in the list  of selected items, not the row number of the item. Thus, getSelectedItem(7)  will return the seventh selected item.
</method>
<method name='insertItemAt' returns='listitem element'>
<prototype> insertItemAt ( index, label , value ) </prototype>
  
  Creates a new listitem element and inserts it at a specific position in the  list box. You may optionally set a value. The function returns the new item.
</method>
<method name='invertSelection'>
<prototype> invertSelection ( ) </prototype>
  
  Reverses the selected state of all the items. Selected items become  deselected and deselected items become selected.
</method>
<prop name='listBoxObject' type='nsIListBoxObject'>
  The nsIListBoxObject behind the list box. This property is read-only. Most  of the features of the list box object are already available directly in the  listbox, so you will rarely have need to use this box object directly.
</prop>
<method name='removeItemAt' returns='listitem element'>
<prototype> removeItemAt ( index ) </prototype>
  
  Removes the child item in the list box at the given index.  The function returns the removed item.
</method>
<method name='removeItemFromSelection'>
<prototype> removeItemFromSelection ( item ) </prototype>
  
  Deselects the given item without deselecting other items.
</method>
<method name='scrollToIndex'>
<prototype> scrollToIndex ( index ) </prototype>
  
  Scrolls the list box view to the specified index. This is different than  ensureIndexIsVisible because the view is always scrolled.
</method>
<prop name='selType'/>
<method name='selectAll'>
<prototype> selectAll ( ) </prototype>
  
  Selects all of the items. A select event is sent after the selection is made.
</method>
<method name='selectItem'>
<prototype> selectItem ( item ) </prototype>
  
  Deselects all of the currently selected items and selects the given item.  A select event is sent after the selection is made.
</method>
<method name='selectItemRange'>
<prototype> selectItemRange ( startItem , endItem ) </prototype>
  
  Selects the items in-between two items given as arguments, including the  start and end items. All other items are deselected. This method does  nothing for single-selection list boxes. A select event is sent after the  selection is made.
</method>
<prop name='selectedCount' type='integer'>
  Returns the number of items that are currently selected.
</prop>
<prop name='selectedIndex' type='integer'>
  Returns the index of the currently selected item. You may select an item by  assigning its index to this property. By assigning -1 to this property, all  items will be deselected.
</prop>
<prop name='selectedItem' type='listitem element'>
  Returns the currently selected item. If there are multiple items selected,  the property will hold only the first selected item. To get all of the  selected items, use the selectedItems property. You may select an item by  assigning a listitem element to this property. All other items will be  deselected.
</prop>
<prop name='selectedItems' type='array of listitems'>
  Returns an array of the selected items in the list.
</prop>
<method name='timedSelect'>
<prototype> timedSelect ( item , timeout ) </prototype>
  
  Selects the item specified by the argument item after the number of  milliseconds given by the timeout argument. All other items are deselected.
</method>
<method name='toggleItemSelection'>
<prototype> toggleItemSelection ( item ) </prototype>
  
  If the specified item is selected, it is deselected. If it is not selected,  it is selected. Other items in the list box that are selected are not affected,  and retain their selected state.
</method>
<prop name='value'/>
</element>

<element name='listcell'>
<documentation>http://www.xulplanet.com/tutorials/xultu/morelists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listcell.html</reference>
  A single cell of a listbox, used for cells which contain text only.  

<attr name='crop'>
  If the label of the listcell is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the listcell is disabled or not. If this attribute is set to true,  the listcell is disabled. This is usually drawn with the text in grey. If the listcell is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the listcell, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the listcell. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes. You must use the class 'listcell-iconic' to have an  image appear.
</attr>
<attr name='label' type='string'>
  The label that will appear on the listcell. If this is left out, no text appears.
</attr>
<attr name='type' type='string'>
  You can make a cell in a listbox a checkbox by setting this attribute to  the value 'checkbox'.
</attr>
<class name='listcell-iconic'>
  Use this class to have an image appear on the listcell. Specify the image  using the image attribute.
</class>
</element>

<element name='listcol'>
<documentation>http://www.xulplanet.com/tutorials/xultu/morelists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listcol.html</reference>
  A column in a list box. You can make some columns flexible and other columns  non-flexible.  

</element>

<element name='listcols'>
<documentation>http://www.xulplanet.com/tutorials/xultu/morelists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listcols.html</reference>
  A container for the columns of a listbox, each of which are created with  the listcol element. There should be only one listcols element in a list  box. If there is no listcols element, the list box has a single column.  

</element>

<element name='listhead'>
<documentation>http://www.xulplanet.com/tutorials/xultu/morelists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listhead.html</reference>
  A header row of a listbox. It is usual to place listheader elements  inside the listhead, one for each column.  

</element>

<element name='listheader'>
<reference>http://www.xulplanet.com/reference/elemref/ref_listheader.html</reference>
  A header for a single column in a listbox.

<attr name='crop'>
  If the label of the listheader is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='label' type='string'>
  The label that will appear on the listheader. If this is left out, no text appears.
</attr>
<attr name='sortDirection'>
  Set this attribute to place a sort indicator on the listbox column header.  This does not sort the data, it only serves as an indicator as to how the  list is sorted. You would set this yourself after sorting the data.
<value name='ascending'>
    The data is sorted in ascending order.
</value>
<value name='descending'>
    The data is sorted in descending order.
</value>
<value name='natural' default='true'>
    The data is sorted in natural order, which means the order that it is stored in.
</value>
</attr>
</element>

<element name='listitem'>
<documentation>http://www.xulplanet.com/tutorials/xultu/lists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_listitem.html</reference>
  A single row in a list box. The text of the listitem is specified either  using listcell elements, or by placing a label attribute directly on the  listitem element. You may also place other elements inside the listitem for  more complex content.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the listitem.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the listitem will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='checked' type='boolean'>
  Indicates whether the listitem is checked or not.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='crop'>
  If the label of the listitem is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='current' type='boolean'>
  This attribute will be set to true if the listitem is the current item. This  is typically used by a theme to customize the focus ring. To change the  currently selected item in a listbox, use the listbox property selectedItem.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the listitem is disabled or not. If this attribute is set to true,  the listitem is disabled. This is usually drawn with the text in grey. If the listitem is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the listitem, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the listitem. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes. You must use the class 'listitem-iconic' to have an  image appear.
</attr>
<attr name='label' type='string'>
  The label that will appear on the listitem. If this is left out, no text appears.
</attr>
<attr name='selected' type='boolean'>
  Indicates whether the listitem is selected or not. This property is read  only. To change the selection, set either the selectedIndex or selectedItem  property of the containing listbox.
</attr>
<attr name='type' type='string'>
  You can make an item in a listbox a checkbox by setting this attribute to  the value 'checkbox'.
</attr>
<attr name='value' type='string'>
  A value associated with the listitem. You may use it in a script for your own  purposes.
</attr>
<class name='listitem-iconic'>
  Use this class to have an image appear on the listitem. Specify the image  using the image attribute.
</class>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the listitem.
</prop>
<prop name='checked' type='boolean'>
  For checkbox type listitems, indicates whether the listitem is checked or  not. You can change the checked property to change the state of the  listitem. A CheckboxStateChange event will be sent to the listitem when it  is changed either via the checked property or changed by the user.
</prop>
<prop name='control' type='listbox element'>
  A reference to the listitem's containing listbox.
</prop>
<prop name='crop'/>
<prop name='current'/>
<prop name='disabled'/>
<prop name='image'/>
<prop name='label'/>
<prop name='selected'/>
<prop name='value'/>
</element>

<element name='member'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_member.html</reference>
  Used within a rule's conditions element to match elements that are containers  or are contained within another element. Both the container and child  attributes may use variables.  

<prop name='child'>
  A variable reference to a node that is expected to be a child of the  element that is referred to by the container element.
</prop>
<prop name='container'>
  A variable reference to a node that is expected to be a container. If the  variable is the same as the uri attribute on the content element, the  resource must be a container element in order to match.
</prop>
</element>

<element name='menu'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menubar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menu.html</reference>
  An element, much like a button, that is placed on a menu bar. When the user  clicks the menu element, the child menupopup of the menu will be displayed.  This element is also used to create submenus.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<attr name='acceltext' type='string'>
  Text that appears beside beside the menu label to indicate the shortcut key  (accelerator key) to use to invoke the command. If this value is set, it  overrides an assigned key set in the key attribute. This attribute does not  apply to menus directly on the menubar.
</attr>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the menu.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the menu will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='allowevents' type='boolean'>
  If true, events are passed to children of the menu. Otherwise, events are  passed to the menu only.
</attr>
<attr name='crop'>
  If the label of the menu is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the menu is disabled or not. If this attribute is set to true,  the menu is disabled. This is usually drawn with the text in grey. If the menu is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the menu, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='key' type='key element id'>
  The id of a key element that is used as the menu command's shortcut key.  If used, text will be displayed beside the menu label to indicate which  keys can be pressed to invoke the command. Normally, you would not set a  key on a menu element.
</attr>
<attr name='label' type='string'>
  The label that will appear on the menu. If this is left out, no text appears.
</attr>
<attr name='menuactive' type='boolean'>
  This attribute is set on an item in a menu when it is being hovered over.  Typcially, the theme will use this to highlight the item. A  DOMMenuItemActive event will be sent to the item when the item is hovered  over, and a DOMMenuItemInactive event will be sent to the item when the  selection moves away.
</attr>
<attr name='open' type='boolean'>
  This attribute is set on the menu when it is open. To open the menu, call  the showPopup method of the menupopup.
</attr>
<attr name='sizetopopup' type='string'>
  Indicates how the menu width and the popup width are determined. If the  sizetopopup attribute is left out, the menu will be its preferred width and  the popup may extend outside of this width, unaffected by the maximum width  of the menu itself.
<value name='always'>
    If set to always, the menu's width will be the same as that necessary for
    the menupopup. If the menu has a maximum width, the popup will also be
    this width.
</value>
</attr>
<attr name='value' type='string'>
  A value associated with the menu. You may use it in a script for your own  purposes.
</attr>
<prop name='value' type='string'>
  A value associated with the menu. You may use it in a script for your own  purposes.
</prop>
</element>

<element name='menubar'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menubar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menubar.html</reference>
  A container that usually contains menu elements. On the Macintosh, the menubar  is displayed along the top of the screen, and all non-menu related elements  inside the menubar will be ignored.  

<implements>nsIAccessibleProvider</implements>
<attr name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the menubar.
</attr>
<attr name='grippyhidden' spec=' Not in Firefox ' type='boolean'>
  When set to true, the grippy will be hidden. When set to false, the default, the  grippy will be shown.
</attr>
<attr name='statusbar' spec=' Firefox Only ' type='id of statusbar element'>
  If you set this attribute to the id of a statusbar element, the label on  the statusbar will update to the statustext of the items on the menu as the  user moves the mouse over them.
</attr>
<prop name='statusbar' spec=' Firefox Only ' type='id of statusbar element'>
  Gets and sets the value of the statusbar attribute.
</prop>
</element>

<element name='menuitem'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menubar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menuitem.html</reference>
  A single choice in a menupopup element. It acts much like a button but it is  rendered on a menu.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<attr name='acceltext' type='string'>
  Text that appears beside beside the menu label to indicate the shortcut key  (accelerator key) to use to invoke the command. If this value is set, it  overrides an assigned key set in the key attribute. This attribute does not  apply to menus directly on the menubar.
</attr>
<attr name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the menuitem.
</attr>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the menuitem.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the menuitem will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='allowevents' type='boolean'>
  If true, events are passed to children of the menuitem. Otherwise, events are  passed to the menuitem only.
</attr>
<attr name='autocheck'>
  If this attribute is true, or left out, the menuitem check mark will update  each time the menu item is selected. If this attribute is false, the  check mark must be adjusted manually.
</attr>
<attr name='checked' type='boolean'>
  Indicates whether the menuitem is checked or not.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the menuitem.  If the command element's disabled attribute is set to true, the menuitem will  become disabled. If the command disabled attribue is removed, the menuitem will  be enabled. Similarly, the command's label attribute can be used to set the  menuitem's label.
</attr>
<attr name='crop'>
  If the label of the menuitem is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the menuitem is disabled or not. If this attribute is set to true,  the menuitem is disabled. This is usually drawn with the text in grey. If the menuitem is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the menuitem, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the menuitem. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes. You must use the class 'menuitem-iconic' to have an  image appear.
</attr>
<attr name='key' type='key element id'>
  The id of a key element that is used as the menu command's shortcut key.  If used, text will be displayed beside the menu label to indicate which  keys can be pressed to invoke the command.
</attr>
<attr name='label' type='string'>
  The label that will appear on the menuitem. If this is left out, no text appears.
</attr>
<attr name='name' type='string name'>
  Radio menuitems with the same name as put into a group. Only one  menuitem from each radio group can be checked at a time.
</attr>
<attr name='selected' type='boolean'>
  Indicates that the menuitem is selected in a menulist. This property is  read only. To change the selection, set either the selectedIndex or  selectedItem property of the containing menulist.
</attr>
<attr name='type'>
  Can be used to create checkable menuitems or for radio button  menuitems.
<value name='checkbox'>
    The menuitem is checked. The checked attribute determines whether the menuitem
    is checked or not.
</value>
<value name='radio'>
    The menuitem becomes part of a radio group. Other menuitems that have the same
    value for their name attributes are part of the same radio group. Only one
    menuitem in the same radio group can be checked at once.
</value>
</attr>
<attr name='validate'>
  This attribute indicates whether to load the image from the cache or not.  This would be useful if the images are stored remotely or you plan on swapping  the image frequently. The following values are accepted, or leave out the  attribute entirely for default handling:
<value name='always'>
    The image is always checked to see whether it should be reloaded.
</value>
<value name='never'>
    The image will be loaded from the cache if possible.
</value>
</attr>
<attr name='value' type='string'>
  You can associate a data value with each menu and menuitem. It is  not used for any specific purpose but you can access it with a script  for your own use.
</attr>
<class name='menuitem-iconic'>
  Use this class to have an image appear on the menuitem. Specify the image  using the image attribute.
</class>
<class name='menuitem-non-iconic'>
  Normally, menuitems have a margin to the left for an image or checkmark.  This class may be used to remove this margin so that the menuitem appears  on the left edge of the menupopup.
</class>
<prop name='label'/>
<prop name='value'/>
</element>

<element name='menulist'>
<documentation>http://www.xulplanet.com/tutorials/xultu/lists.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menulist.html</reference>
  An element that can be used for drop-down choice lists. The user may select one  of the elements displayed in the menulist. The currently selected choice is  displayed on the menulist element. To create the drop-down, put a menupopup  inside the menulist containing the choices as menuitem elements.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULMenuListElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the menulist.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the menulist will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='crop'>
  If the label of the menulist is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disableautoselect' type='boolean'>
  If this attribute is true or omitted, the selected item on the menu will  update to match what the user entered in the textbox. If the text does not  match any of the items in the list, the menu selection is cleared. If this  attribute is false, the selection is never updated to match the text box.  This attribute applies only to editable menulists.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the menulist is disabled or not. If this attribute is set to true,  the menulist is disabled. This is usually drawn with the text in grey. If the menulist is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the menulist, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='editable' type='boolean'>
  Indicates that the value of the menulist can be modified by typing directly  into the value field. This is rendered as a textbox with a drop-down arrow  beside it. The user may enter text into the textbox or select one of the choices  by clicking from the drop-down.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the menulist element is focused.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the menulist. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear on the menulist. If this is left out, no text appears.
</attr>
<attr name='open' type='boolean'>
  If true, the menu popup is showing. You can change this value to show or hide the popup.
</attr>
<attr name='src' type='image URL'>
  The URL of the image to appear on the menulist. If this attribute is left  out, no image appears.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='value' type='string'>
  The value of the value property of the currently selected item in the menulist.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the menulist.
</prop>
<method name='appendItem' returns='menuitem element'>
<prototype> appendItem ( label , value ) </prototype>
  
  Creates a new menuitem element and adds it to the end of the menulist. You  may optionally set a value. The function returns the new item.
</method>
<prop name='crop'/>
<prop name='disableautoselect'/>
<prop name='disabled'/>
<prop name='inputField' type='textbox element'>
  A reference to the textbox element used for editable menu lists. This property is  read only and applies to editable menulists only.
</prop>
<method name='insertItemAt' returns='menuitem element'>
<prototype> insertItemAt ( index, label , value ) </prototype>
  
  Creates a new menuitem element and inserts it at a specific position in the  menu. You may optionally set a value.  The function returns the new item.
</method>
<prop name='label'/>
<prop name='menuBoxObject' spec=' Moz1.3 ' type='nsIMenuBoxObject'>
  A reference to the nsIMenuBoxObject which implements the menu.
</prop>
<prop name='menupopup' spec=' Moz1.3 ' type='menupopup element'>
  A reference to the menupopup used by the menulist. This property is read-only.
</prop>
<prop name='open'/>
<method name='removeAllItems' spec=' Moz1.3 '>
<prototype> removeAllItems ( ) </prototype>
  
  Removes all of the items in the menu.
</method>
<method name='removeItemAt' returns='menuitem element'>
<prototype> removeItemAt ( index ) </prototype>
  
  Removes the child item in the menu at the given index.  The function returns the removed item.
</method>
<method name='select' spec=' Moz1.3 '>
<prototype> select ( ) </prototype>
  
  Select all the text in the menulist's textbox. This property applies to  editable menulists only.
</method>
<prop name='selectedIndex' type='integer'>
  Holds the index of the currently selected item in the menu. If no item is  currently selected, this will be set to -1. You can select an item by setting  this value.
</prop>
<prop name='selectedItem' type='menuitem element'>
  Holds the element of the menu that is currently selected. If no element is  currently selected, this will be null. Use selectedIndex to retrieve the  position of the selected item in the menu.
</prop>
<prop name='src'/>
<prop name='value'/>
</element>

<element name='menupopup'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menubar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menupopup.html</reference>
  A container used to display menus. It should be placed inside a menu,  menulist or menu-type button element. It can contain any element but  usually will contain menuitem elements. It is a type of box that defaults  to vertical orientation.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULPopupElement</implements>
<attr name='ignorekeys' type='boolean'>
  If true, keyboard navigation between menu items in the popup is disabled.
</attr>
<attr name='left' type='integer'>
  Overrides the horizontal position of the popup specified by the showPopup  function.
</attr>
<attr name='onpopuphidden' type='script code'>
  This event is sent to a popup after it has been hidden.
</attr>
<attr name='onpopuphiding' type='script code'>
  This event is sent to a popup when it is about to be hidden.
</attr>
<attr name='onpopupshowing' type='script code'>
  This event is sent to a menupopup just before it is popped open. This handler is  usually used to dynamically set the commands on a menu when the user requests  to display it. Returning false from this event handler prevents the popup from  appearing.
</attr>
<attr name='onpopupshown' type='script code'>
  This is event is sent to a popup after it has been opened, much like the onload  event is sent to a window when it is opened.
</attr>
<attr name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup. This allows you to place the menu on one side  on a button.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned. This is typically used for drop-down menus.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element.
</value>
</attr>
<attr name='top' type='integer'>
  Overrides the vertical position of the popup specified by the showPopup  function.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the menupopup.
</prop>
<method name='hidePopup'>
<prototype> hidePopup ( ) </prototype>
  
  Closes the popup menu immediately.
</method>
<method name='moveTo'>
<prototype> moveTo ( x , y ) </prototype>
  
  Moves the popup to a new location.
</method>
<prop name='popupBoxObject' type='nsIPopupBoxObject'>
  This read-only property holds the nsIPopupBoxObject that implements the menupopup.  You wouldn't normally need to use this property as all of its functions are  available via the menupopup itself.
</prop>
<prop name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup. This allows you to place the menu on one side  on a button.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned. This is typically used for drop-down menus.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element.
</value>
</prop>
<method name='showPopup'>
<prototype> showPopup ( element, x , y , popupType, anchor, align ) </prototype>
  
  Opens a popup window. There are two ways of specifying where the popup  appears, either at a specific screen position, or relative to some element  in the window. If either x and y are set to values, the popup will  appear at the screen coordinate (x,y). If x and y are -1, the popup will be  positioned relative to the element specified as the first argument. This is  what you might do to show a popup underneath a button for example. In this  latter case, the anchor and align arguments may be used to further control  where the popup appears relative to the element.  The anchor argument  corresponds to the popupanchor attribute on the element. The align argument  corresponds to the popupalign attribute on the element. The anchor and align  attributes are ignored if either x or y are not -1.        To have a popup appear relative to another element yet still be offset by  some number of pixels, determine the actual screen position of the element  using the boxObject.screenX and boxObject.screenY properties of the element  and use those as the x and y arguments offset by the desired values.        Type should be either the string "popup", "context" or "tooltip". Each type  of popup is intended to be displayed only temporarily; they are not excepted  to be displayed permanently. Only one popup may be displayed at a time. This  example will open the popup anchored on the bottom-left corner of the button  someButton:         menupopup.showPopup (someButton,-1,-1,"popup","bottomleft","topleft");    
</method>
<method name='sizeTo'>
<prototype> sizeTo ( width , height ) </prototype>
  
  Changes the current size of the popup to a new width and height.
</method>
</element>

<element name='menuseparator'>
<documentation>http://www.xulplanet.com/tutorials/xultu/menubar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_menuseparator.html</reference>
  Used to create a separator between menu items. Typically drawn as a thin line.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the menuseparator.
</prop>
</element>

<element name='observes'>
<documentation>http://www.xulplanet.com/tutorials/xultu/broadob.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_observes.html</reference>
  The observes element can be used to listen to a broadcaster and receive  events and attributes from it. The observes element should be placed inside  the element that wants to observe the broadcaster. When an observed  attribute is modified on the broadcaster, the attribute's value will be  forwarded and set on the parent element of the observer.  

<attr name='attribute' type='attribute name'>
  The attribute that the observer is observing. When the value of the  attribute changes, the broadcast event is called on the observer. Use the  value '*' to observe all attribute of the broadcasters. The id, ref and  persist attributes are not observed.
</attr>
<attr name='element' type='broadcaster element id'>
  The id of the broadcaster element that the observer is observing.
</attr>
</element>

<element name='overlay'>
<documentation>http://www.xulplanet.com/tutorials/xultu/overlay.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_overlay.html</reference>
  An overlay is used when it is desirable for a block of content to be shared  between several different windows. In addition, it can be used to append or  alter content in an existing window. An overlay is defined in a separate XUL  file. Overlays are applied while the XUL is being loaded.        Each element within the overlay is inserted at a location in the master window,  determined by matching id attributes. For instance, if an element in an overlay  has an id of 'filemenu', the corresponding element with the id 'filemenu' in  the master window that uses the overlay would be altered. Attributes declared  in the overlay are added to that element and child elements are inserted into  the window within that element. Elements directly inside the overlay element  as children that do not have id attributes are appended to the master  window. This allows the addition of scripts to the master window from the  overlay.        Overlays do not have an onload event. To have initialization code in an  overlay, place it directly in a script outside of a function. This is  commonly used to call the addEventListener method to listen to the load  event for the window which does not fire until the master window and all  overlays are applied.     Overlays may be applied to windows in other packages. Files, such as scripts,  that are referenced from the overlay should be specified as absolute URLs. If  you do specify a relative URL, it will be relative to the window that the  overlay applies to, not the overlay's file.  
<html><![CDATA[
<p>  An overlay is used when it is desirable for a block of content to be shared  between several different windows. In addition, it can be used to append or  alter content in an existing window. An overlay is defined in a separate XUL  file. Overlays are applied while the XUL is being loaded.  </p>  <p>  Each element within the overlay is inserted at a location in the master window,  determined by matching id attributes. For instance, if an element in an overlay  has an id of 'filemenu', the corresponding element with the id 'filemenu' in  the master window that uses the overlay would be altered. Attributes declared  in the overlay are added to that element and child elements are inserted into  the window within that element. Elements directly inside the overlay element  as children that do not have id attributes are appended to the master  window. This allows the addition of scripts to the master window from the  overlay.  </p>  <p>  Overlays do not have an onload event. To have initialization code in an  overlay, place it directly in a script outside of a function. This is  commonly used to call the addEventListener method to listen to the load  event for the window which does not fire until the master window and all  overlays are applied.  <p>  Overlays may be applied to windows in other packages. Files, such as scripts,  that are referenced from the overlay should be specified as absolute URLs. If  you do specify a relative URL, it will be relative to the window that the  overlay applies to, not the overlay's file.  </p>
]]></html>

<attr name='class' type='string'>
  The style class of the overlay. Multiple classes may be specified by  separating them with spaces.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the overlay with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='page'>
<reference>http://www.xulplanet.com/reference/elemref/ref_page.html</reference>
  Similar to a window, except it should be used for XUL files that are  to be loaded into an iframe.

</element>

<element name='popup'>
<documentation>http://www.xulplanet.com/tutorials/xultu/popups.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_popup.html</reference>
  A container that appears in a child window. The popup window does not have any  special frame. Popups can be displayed when an element is clicked by assigning  the id of the popup to either the popup, context or tooltip attribute of the  element. A popup is a type of box that defaults to vertical orientation.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULPopupElement</implements>
<attr name='ignorekeys' type='boolean'>
  If true, keyboard navigation between menu items in the popup is disabled.
</attr>
<attr name='left' type='integer'>
  Overrides the horizontal position of the popup specified by the showPopup  function.
</attr>
<attr name='onpopuphidden' type='script code'>
  This event is sent to a popup after it has been hidden.
</attr>
<attr name='onpopuphiding' type='script code'>
  This event is sent to a popup when it is about to be hidden.
</attr>
<attr name='onpopupshowing' type='script code'>
  This event is sent to a popup just before it is popped open. This handler is  usually used to dynamically set the contents when the user requests to display it.
</attr>
<attr name='onpopupshown' type='script code'>
  This is event is sent to a popup after it has been opened, much like the onload  event is sent to a window when it is opened.
</attr>
<attr name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element. This is the value used for
    tooltips.
</value>
</attr>
<attr name='top' type='integer'>
  Overrides the vertical position of the popup specified by the showPopup  function.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the popup.
</prop>
<method name='hidePopup'>
<prototype> hidePopup ( ) </prototype>
  
  Closes the popup window immediately.
</method>
<method name='moveTo'>
<prototype> moveTo ( x , y ) </prototype>
  
  Moves the popup to a new location.
</method>
<prop name='popupBoxObject' type='nsIPopupBoxObject'>
  This read-only property holds the nsIPopupBoxObject that implements the popup.  You wouldn't normally need to use this property as all of its functions are  available via the popup itself.
</prop>
<prop name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element. This is the value used for
    tooltips.
</value>
</prop>
<method name='showPopup'>
<prototype> showPopup ( element, x , y , popupType, anchor, align ) </prototype>
  
  Opens a popup window. There are two ways of specifying where the popup  appears, either at a specific screen position, or relative to some element  in the window. If either x and y are set to values, the popup will  appear at the screen coordinate (x,y). If x and y are -1, the popup will be  positioned relative to the element specified as the first argument. This is  what you might do to show a popup underneath a button for example. In this  latter case, the anchor and align arguments may be used to further control  where the popup appears relative to the element.  The anchor argument  corresponds to the popupanchor attribute on the element. The align argument  corresponds to the popupalign attribute on the element. The anchor and align  attributes are ignored if either x or y are not -1.        To have a popup appear relative to another element yet still be offset by  some number of pixels, determine the actual screen position of the element  using the boxObject.screenX and boxObject.screenY properties of the element  and use those as the x and y arguments offset by the desired values.        Type should be either the string "popup", "context" or "tooltip". Each type  of popup is intended to be displayed only temporarily; they are not excepted  to be displayed permanently. Only one popup may be displayed at a time.
</method>
<method name='sizeTo'>
<prototype> sizeTo ( width , height ) </prototype>
  
  Changes the current size of the popup to a new width and height.
</method>
</element>

<element name='popupset'>
<documentation>http://www.xulplanet.com/tutorials/xultu/popups.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_popupset.html</reference>
  A container for popup elements. You should declare all popup elements as  children of a popupset. This element does not directly display on screen.  Child popups will be displayed when asked to by other elements.  

</element>

<element name='progressmeter'>
<documentation>http://www.xulplanet.com/tutorials/xultu/progress.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_progressmeter.html</reference>
  A meter which can be used to display the progress of a lengthy operation.  It is drawn as a bar that is filled as the operation completes. In addition,  a non-deterministic progressmeter may be created by setting the mode attribute.  This is used when the length of time to complete an operation is not known  beforehand.  

<example>
<![CDATA[
    &lt;progressmeter mode=&quot;determined&quot; value=&quot;50%&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<attr name='mode'>
  A determined progressmeter is used in cases where you know how long an  operation will take. Undeterminate progressmeters can be used when  you don't and will typically be drawn as a spinning barber pole.
<value name='determined' default='true'>
    The progress meter uses its value attribute to determine the amount of
    the bar that is filled in.
</value>
<value name='undetermined'>
    The progressmeter is undeterminate.
</value>
</attr>
<attr name='value' type='inetger'>
  A percentage value that specifies the amount of the meter that is filled  in. Because it is a percentage, it ranges from 0 to 100.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the progressmeter.
</prop>
<prop name='mode'/>
<prop name='value'/>
</element>

<element name='radio'>
<documentation>http://www.xulplanet.com/tutorials/xultu/inputs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_radio.html</reference>
  An element that can be turned on and off. Radio buttons are almost always  grouped together in groups. Only one radio button within the same  radiogroup may be selected at a time. The user can switch which radio  button is turned on by selecting it with the mouse or keyboard. Other radio  buttons in the same group are turned off. A label, specified with the label  attribute may be added beside the radio button to indicate to the user as to  its function.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the radio.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the radio will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='crop'>
  If the label of the radio is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the radio is disabled or not. If this attribute is set to true,  the radio is disabled. This is usually drawn with the text in grey. If the radio is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the radio, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the radio element is focused.
</attr>
<attr name='label' type='string'>
  The label that will appear beside the radio. If this is left out, no text appears.  The labels on radio buttons will wrap if there is not enough space.
</attr>
<attr name='selected' type='boolean'>
  This attribute is set to true if the radio button is selected by  default. Leave this attribute out if it should not be set by default. To  change the currently selected radio button, modify either the selectedIndex  or selectedItem property of the radiogroup.
</attr>
<attr name='src' type='image URL'>
  The URL of the image to appear on the radio. If this attribute is left  out, no image appears.
</attr>
<attr name='value' type='string'>
  You can associate a data value with each radio button.
</attr>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the radio.
</prop>
<prop name='crop'/>
<prop name='disabled'/>
<prop name='label'/>
<prop name='radioGroup' type='radiogroup element'>
  Returns the enclosing radiogroup that the radio element is contained within,  which may or may not be its direct parent.
</prop>
<prop name='selected'/>
<prop name='value'/>
</element>

<element name='radiogroup'>
<documentation>http://www.xulplanet.com/tutorials/xultu/inputs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_radiogroup.html</reference>
  A group of radio buttons. Only one radio button inside the group can be  selected at a time. The radio buttons may either direct children of the  radiogroup or descendants. Place the radiogroup inside a groupbox if you  would like a border or caption around the group. The radiogroup defaults  to vertical orientation.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlElement</implements>
<attr name='disabled' type='boolean'>
  Indicates whether the radiogroup is disabled or not. If this attribute is set to true,  the radiogroup is disabled. This is usually drawn with the text in grey. If the radiogroup is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the radiogroup, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the radiogroup element is focused.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='value' type='string'>
  Returns the value property of the currently selected radio button. To  change the selection, use the selectedIndex or selectedItem property.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the radiogroup.
</prop>
<method name='appendItem' returns='radio element'>
<prototype> appendItem ( label , value ) </prototype>
  
  Creates a new radio element and adds it to the end of the radiogroup. You  may optionally set a value. The function returns the new item.
</method>
<method name='checkAdjacentElement'>
<prototype> checkAdjacentElement ( dir ) </prototype>
  
  Deselects the currently selected radio button in the group and selects the one  adjacent to it. If the argument dir is true, the next radio button is selected.  If it is false, the previous radio button is selected.
</method>
<prop name='disabled'/>
<prop name='focusedItem' type='radio element'>
  Holds the currently focused item in the radiogroup, which may or may not be  the same as the selected one. You can change the focused item by setting this  property.
</prop>
<method name='insertItemAt' returns='radio element'>
<prototype> insertItemAt ( index, label , value ) </prototype>
  
  Creates a new radio element and inserts it at a specific position in the  radiogroup. You may optionally set a value. The function returns the new item.
</method>
<method name='removeItemAt' returns='radio element'>
<prototype> removeItemAt ( index ) </prototype>
  
  Removes the child item in the radiogroup at the given index.  The function returns the removed item.
</method>
<prop name='selectedIndex' type='radio element'>
  Holds the index of the currently selected item in the radiogroup. If no item  is currently selected, this value will be set to -1.. You can select an item  by setting this value.
</prop>
<prop name='selectedItem' type='radio element'>
  Holds the currently selected item in the radiogroup. If no item is currently  selected, this value will be null. You can select an item by setting this  value. A RadioStateChange event will be sent to the selected radio button  when it is changed either via this property, the selectedIndex property, or  changed by the user.
</prop>
<prop name='value'/>
</element>

<element name='rdf:bookmarks'>
<documentation>http://www.xulplanet.com/tutorials/xultu/datasrc.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rdfbookmarks.html</reference>
  This datasource holds the user's bookmarks. Each bookmark holds a title and URL  and information about when the user has visited the bookmark and the schedule  for checking when the URL is checked for updates. The root of the bookmarks  datasource is NC:BookmarksRoot. You can also use the roots NC:PersonalToolbarFolder  for the folder holding personal toolbar items and NC:IEFavoritesRoot for the folder  containing the imported IE favorites.  

<attr name=' BookmarkAddDate (http://home.netscape.com/NC-rdf#BookmarkAddDate) '>
  
  The date and time that the bookmark was added.
</attr>
<attr name=' Description (http://home.netscape.com/NC-rdf#Description) '>
  
  The description or comments of the bookmark. The user can set this in a bookmark's  property window.
</attr>
<attr name=' LastModifiedDate (http://home.netscape.com/WEB-rdf#LastModifiedDate) '>
  
  The date that URL was last modified.
</attr>
<attr name=' LastVisitDate (http://home.netscape.com/WEB-rdf#LastVisitDate) '>
  
  The date that URL was last visited.
</attr>
<attr name=' Name (http://home.netscape.com/NC-rdf#Name) '>
  
  The name of the resource. This will be the title of the page.
</attr>
<attr name=' Schedule (http://home.netscape.com/WEB-rdf#Schedule) '>
  
  The schedule for checking the bookmark's URL for updates. This is a string of the  following format:   &lt;days to check&gt;|&lt;times to check&gt;|&lt;duration&gt;|&lt;alert options&gt;        For example: '1|4-11|30|icon,alert' means check on Monday between 4 and 11, every  thirty minutes. If the page has been updated, the icon changed and an alert is  displayed. The first value may contain multiple digits for multiple days. Additional  alert options are 'sound' and 'open' to play a sound and open a new window. These  options correspond to those in the bookmark properties dialog.
</attr>
<attr name=' ShortcutURL (http://home.netscape.com/NC-rdf#ShortcutURL) '>
  
  The shortcut keyword for the resource. You can set this for a bookmark in its  properties window.
</attr>
<attr name=' URL (http://home.netscape.com/NC-rdf#URL) '>
  
  The URL for the resource. This will be the URL that is opened when a user double-clicks  on the entry in a tree.
</attr>
<attr name=' status (http://home.netscape.com/WEB-rdf#status) '>
  
  This property is set to the string 'new' when an update check determines that the  page has been modified. This only applies when the schedule has the icon alert option  set.
</attr>
<attr name=' type (http://www.w3.org/1999/02/22-rdf-syntax-ns#type) '>
  
  The type of bookmark. This will be set to one of three possible values. The bookmarks  window uses the type to determine how to render the bookmark, including which icon  to use.
<value name='http://home.netscape.com/NC-RDF#Bookmark'>
    A regular bookmark.
</value>
<value name='http://home.netscape.com/NC-RDF#BookmarkSeparator'>
    A bookmark separator. You will typically draw a horizontal line for this type.
</value>
<value name='http://home.netscape.com/NC-RDF#Folder'>
    A bookmark folder, which can contain other bookmarks.
</value>
</attr>
<method name='rdf:deletebookmark'>
<prototype> deletebookmark (http://home.netscape.com/NS-rdf#command?cmd=deletebookmark) </prototype>
  
  Deletes a bookmark from the datasource.
</method>
<method name='rdf:deletebookmarkfolder'>
<prototype> deletebookmarkfolder (http://home.netscape.com/NS-rdf#command?cmd=deletebookmarkfolder) </prototype>
  
  Deletes a bookmark from the datasource.
</method>
<method name='rdf:deletebookmarkseparator'>
<prototype> deletebookmarkseparator (http://home.netscape.com/NS-rdf#command?cmd=deletebookmarkseparator) </prototype>
  
  Deletes a bookmark separator from the datasource.
</method>
<method name='rdf:export'>
<prototype> export (http://home.netscape.com/NS-rdf#command?cmd=export) </prototype>
  
  Used to export bookmarks to a file. Use the URL property to specify a file URL  to export to.
</method>
<method name='rdf:import'>
<prototype> import (http://home.netscape.com/NS-rdf#command?cmd=import) </prototype>
  
  Used to import bookmarks from a file. Use the URL property to specify a file URL  to import from.
</method>
<method name='rdf:newbookmark'>
<prototype> newbookmark (http://home.netscape.com/NS-rdf#command?cmd=newbookmark) </prototype>
  
  Adds a new bookmark to the datasource. Arguments include the Name and URL of  the new bookmark. You should pass nsIResource objects for the name and URL as  arguments.
</method>
<method name='rdf:newfolder'>
<prototype> newfolder (http://home.netscape.com/NS-rdf#command?cmd=newfolder) </prototype>
  
  Adds a new bookmark folder to the datasource. Use the Name argument to specify  the folder title.
</method>
<method name='rdf:newseparator'>
<prototype> newseparator (http://home.netscape.com/NS-rdf#command?cmd=newseparator) </prototype>
  
  Adds a new bookmark separator to the datasource.
</method>
<method name='rdf:setnewbookmarkfolder'>
<prototype> setnewbookmarkfolder (http://home.netscape.com/NS-rdf#command?cmd=setnewbookmarkfolder) </prototype>
  
  Indicates that a bookmark is a folder.
</method>
<method name='rdf:setnewsearchfolder'>
<prototype> setnewsearchfolder (http://home.netscape.com/NS-rdf#command?cmd=setnewsearchfolder) </prototype>
  
  indicates that a folder is the one used for storing search results.
</method>
<method name='rdf:setpersonaltoolbarfolder'>
<prototype> setpersonaltoolbarfolder (http://home.netscape.com/NS-rdf#command?cmd=setpersonaltoolbarfolder) </prototype>
  
  Indicates that a folder is the one used for the items that appear on the  personal toolbar.
</method>
</element>

<element name='rdf:files'>
<documentation>http://www.xulplanet.com/tutorials/xultu/datasrc.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rdffiles.html</reference>
  The files datasource holds a tree of the user's filesystem. Use NC:FilesRoot in  a ref attribute to grab the file list from the root. Alternatively, you can use  a file URL to specify a particular directory.  

<attr name=' Content-Length (http://home.netscape.com/NC-rdf#Content-Length) '>
  
  The length of the file.
</attr>
<attr name=' LastModifiedDate (http://home.netscape.com/WEB-rdf#LastModifiedDate) '>
  
  The date that URL was last modified.
</attr>
<attr name=' Name (http://home.netscape.com/NC-rdf#Name) '>
  
  The name of the resource. This will be the title of the page.
</attr>
<attr name=' URL (http://home.netscape.com/NC-rdf#URL) '>
  
  The URL for the resource. This will be the URL that is opened when a user double-clicks  on the entry in a tree.
</attr>
<attr name=' extension (http://home.netscape.com/NC-rdf#extension) '>
  
  The extension of the file, including the period. This property is only available  on platforms that use file extensions.
</attr>
</element>

<element name='rdf:history'>
<documentation>http://www.xulplanet.com/tutorials/xultu/datasrc.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rdfhistory.html</reference>
  The history datasource holds a list of the pages that the user has visited. It is  available in two forms, a flat list by using NC:HistoryRoot and organized by day  by using NC:HistoryByDate. In this latter form, items are stored in one of seven  folders, storing URLs visited in each of the recent seven days. URLs visited earlier  are placed in the last folder.  

<attr name=' Date (http://home.netscape.com/NC-rdf#Date) '>
  
  Holds the date when the user last visited the URL.
</attr>
<attr name=' FirstVisitDate (http://home.netscape.com/NC-rdf#FirstVisitDate) '>
  
  Holds the date when the user first visited the URL.
</attr>
<attr name=' Hostname (http://home.netscape.com/NC-rdf#Hostname) '>
  
  The hostname part of the URL.
</attr>
<attr name=' Name (http://home.netscape.com/NC-rdf#Name) '>
  
  The name of the resource. This will be the title of the page.
</attr>
<attr name=' Referrer (http://home.netscape.com/NC-rdf#Referrer) '>
  
  The referrer of the URL, which is, in general, the URL of the page which  contained the link to this one.
</attr>
<attr name=' URL (http://home.netscape.com/NC-rdf#URL) '>
  
  The URL for the resource. This will be the URL that is opened when a user double-clicks  on the entry in a tree.
</attr>
<attr name=' VisitCount (http://home.netscape.com/NC-rdf#VisitCount) '>
  
  Holds the number of times that the user has visited the URL.
</attr>
</element>

<element name='rdf:window-mediator'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xpcomex.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rdfwindow-mediator.html</reference>
  This datasource holds a list of all of the open windows. Use a ref value of  NC:WindowMediatorRoot in a template.  

<attr name=' Name (http://home.netscape.com/NC-rdf#Name) '>
  
  The title of the window.
</attr>
</element>

<element name='resizer'>
<reference>http://www.xulplanet.com/reference/elemref/ref_resizer.html</reference>
  An element used for window resizing. If you place a custom resizing button  inside the resizer, the user will be able to resize the window by dragging  it. The resizer will send a command event after the resize is complete.

<attr name='dir'>
  The direction that the window is resized.
<value name='left'>
    Resized to the left.
</value>
<value name='right'>
    Resized to the right.
</value>
<value name='top'>
    Resized up.
</value>
<value name='bottom'>
    Resized down.
</value>
<value name='bottomleft'>
    Resized down and to the left.
</value>
<value name='bottomright'>
    Resized down and to the right.
</value>
<value name='topleft' default='true'>
    Resized up and to the left.
</value>
<value name='topright'>
    Resized up and to the right.
</value>
</attr>
</element>

<element name='row'>
<documentation>http://www.xulplanet.com/tutorials/xultu/grids.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_row.html</reference>
  A single row in a rows element. Each child of the row element is placed in  each successive cell of the grid. The row with the most child elements  determines the number of columns in each row.  

</element>

<element name='rows'>
<documentation>http://www.xulplanet.com/tutorials/xultu/grids.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rows.html</reference>
  Defines the rows of a grid. Each child of a rows element should be a row  element.  

</element>

<element name='rule'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_rule.html</reference>
  A rule is used in a template. The children of the rule are used to declare the  conditions in which the rule matches and the content that is generated. When  the content needs to be displayed, the template builder scans through the  RDF datasource searching for nodes that match the rules. When a rule is  matched, the corresponding content is generated.        A rule contains two or three child elements. The conditions element is used to  specify the conditions on which the resources in a datasource can match.  Matching resources are used to generate content. Non-matching resources have no  content generated for them. The action element specifies the content that is  generated. The bindings element is optional and may specify additional variable  bindings to be used.        All three children may use variables in place of attribute values. Variables are  a question mark followed by a name. For a matched rule, each variable will be a  reference to an RDF resource node. If the same variable appears multiple times,  it must have the same value in each place.     A rule may use a shortcut syntax for matching that involves placing additional  attributes on the rule element. The rule will match if the attribute matches  an attribute on the RDF resource. When comparing attributes, the id, property  and instanceOf attributes are ignored.        Each generated element will be given an id values automatically. The id values  will correspond to an id of the resource in the datasource. You can use this id  in a script to examine the resource.  
<html><![CDATA[
<p>  A rule is used in a template. The children of the rule are used to declare the  conditions in which the rule matches and the content that is generated. When  the content needs to be displayed, the template builder scans through the  RDF datasource searching for nodes that match the rules. When a rule is  matched, the corresponding content is generated.  </p>  <p>  A rule contains two or three child elements. The conditions element is used to  specify the conditions on which the resources in a datasource can match.  Matching resources are used to generate content. Non-matching resources have no  content generated for them. The action element specifies the content that is  generated. The bindings element is optional and may specify additional variable  bindings to be used.  </p>  <p>  All three children may use variables in place of attribute values. Variables are  a question mark followed by a name. For a matched rule, each variable will be a  reference to an RDF resource node. If the same variable appears multiple times,  it must have the same value in each place.  <p>  A rule may use a shortcut syntax for matching that involves placing additional  attributes on the rule element. The rule will match if the attribute matches  an attribute on the RDF resource. When comparing attributes, the id, property  and instanceOf attributes are ignored.  </p>  <p>  Each generated element will be given an id values automatically. The id values  will correspond to an id of the resource in the datasource. You can use this id  in a script to examine the resource.  </p>
]]></html>

<attr name='iscontainer' type='boolean'>
  Indicates whether rules match based on containment. If not specified, the rule  may match regardless of whether a node is a container or not.
<value name='true'>
    The rule will only match nodes that are marked as containers. This would
    apply to nodes that represent folders.
</value>
<value name='false'>
    The rule will only match nodes that are not marked as containers.
</value>
</attr>
<attr name='isempty' type='boolean'>
  Indicates whether rules match based on emptyness. If not specified, the rule  may match regardless of whether a node has children or not.
<value name='true'>
    The rule will only match nodes that contain no child elements.
</value>
<value name='false'>
    The rule will only match nodes that contain one or more child elements.
</value>
</attr>
<attr name='parent' type='element tag name'>
  If set, the rule will only match the corresponding tag. This may be used to  have separate rules for leaf and container nodes with different tags.
</attr>
<attr name='parsetype' type='string'>
  If this attribute is set to 'Integer', the rule will only match RDF nodes  with a parse type of Integer.
</attr>
</element>

<element name='script'>
<documentation>http://www.xulplanet.com/tutorials/xultu/events.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_script.html</reference>
  Much like the HTML script element, this is used to declare a script to be  used by the XUL window. You should usually put scripts in a separate file  pointed to by the src attribute, but you may also place the script inline  inside the opening and closing script tags.  

<example>
<![CDATA[
    &lt;script src=&quot;test.js&quot;/&gt;

]]>
</example>
<attr name='src' type='script URL'>
  The URL of the script.
</attr>
<attr name='type' type='language content type'>
  The language of the script. Usually, you would set this to  'application/x-javascript'. 
</attr>
</element>

<element name='scrollbar'>
<documentation>http://www.xulplanet.com/tutorials/xultu/scroll.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_scrollbar.html</reference>
  When a container contains contents which are larger that the size of the  content, scroll bars may be placed at the side of the container to allow the  user to scroll around in the container. The scroll bar may also be used  independently when a numeric value or percentage needs to be selected by the  user. The user can adjust the position of the scroll bar by clicking arrows  on either end of the scroll bar or by dragging the scroll bar thumb around.  

<example>
<![CDATA[
    &lt;scrollbar curpos=&quot;5&quot; maxpos=&quot;50&quot;/&gt;

]]>
</example>
<attr name='curpos' type='integer'>
  The current position of the scrollbar, which ranges from 0 to the value of the  maxpos attribute. The default value is 0.
</attr>
<attr name='increment' type='integer'>
  The amount that the value of the curpos attribute changes by when the scroll bar  arrows are clicked. The default value is 1.
</attr>
<attr name='maxpos' type='integer'>
  The maximum position of the scrollbar. The default value is 100.
</attr>
<attr name='pageincrement' type='integer'>
  The amount that the value of the curpos attribute changes by when the tray  of the scroll bar is clicked. The tray is the area in which the scroll bar  thumb moves along. The default value is 10.
</attr>
</element>

<element name='scrollbox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_scrollbox.html</reference>
  A box that has additional functions that can be used to scroll the content. Note  that a scrollbox doesn't display scrollbars. It is intended to be used when an  application wants to be able to adjust the scroll position itself. If you just  want scrollbars to appear, add style='overflow: auto;' to any container element.

</element>

<element name='separator'>
<reference>http://www.xulplanet.com/reference/elemref/ref_separator.html</reference>
  Creates a small separating gap between elements. This type of separator should be  used to separate parts of a dialog. It doesn't draw a bar visually, but is just a  small space. It is functionally equivalent to a spacer except it defaults to a  small size (usually 1.5 ems).  

<attr name='orient'>
  Used to specify whether the separator is a horizontal or vertical separator.  Note that the values are the reverse of what seems more likely.
<value name='horizontal' default='true'>
    The separator separates vertically placed elements.
</value>
<value name='vertical'>
    The separator separates horizontally placed elements.
</value>
</attr>
<class name='groove'>
  A grooved separator.
</class>
<class name='groove-thin'>
  A thin grooved separator.
</class>
<class name='thin'>
  A thinner separator which is usually 0.5 ems. 
</class>
</element>

<element name='spacer'>
<documentation>http://www.xulplanet.com/tutorials/xultu/springs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_spacer.html</reference>
  An element that takes up space but does not display anything. It is usually  used to place spacing within a container. If you don't specify that the  spacer has a size or is flexible, the spacer does not occupy any space. If  you want a small gap, consider using a separator instead.  

<example>
<![CDATA[
    &lt;box&gt;
      &lt;button label=&quot;Left&quot;/&gt;
      &lt;spacer flex=&quot;1&quot;/&gt;
      &lt;button label=&quot;Right&quot;/&gt;
    &lt;/box&gt;

]]>
</example>
</element>

<element name='splitter'>
<documentation>http://www.xulplanet.com/tutorials/xultu/splitter.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_splitter.html</reference>
  An element which should appear before or after an element inside a container.  When the splitter is dragged, the sibling elements of the splitter are resized.  If a grippy in placed inside the splitter, one sibling element of the  splitter is collapsed when the grippy is clicked.  

<attr name='collapse'>
  Determines which side of the splitter is collapsed when its grippy is  clicked. If this attribute is not specified, the splitter will not  cause a collapse. It is common to put a grippy element inside the splitter  when it is used for collapsing.
<value name='none' default='true'>
    No collpasing occurs.
</value>
<value name='before'>
    When the grippy is clicked, the element immediately before the splitter in
    the same parent is collapsed so that its width or height is 0.
</value>
<value name='after'>
    When the grippy is clicked, the element immediately after the splitter in
    the same parent is collapsed so that its width or height is 0.
</value>
</attr>
<attr name='resizeafter'>
  This attribute indicates which element to the right or below the splitter should  be resized when the splitter is repositioned.
<value name='closest' default='true'>
    The element immediately to the right or below the splitter resizes.
</value>
<value name='farthest'>
    The element that is the farthest away from the splitter to the right or below
    the splitter resizes.
</value>
<value name='grow'>
    The elements to the right or below the splitter do not change size (unless
    they are flexible) when the splitter is dragged, but instead the entire
    container changes size.
</value>
</attr>
<attr name='resizebefore'>
  This attribute indicates which element to the left or above the splitter should  be resized when the splitter is repositioned.
<value name='closest' default='true'>
    The element immediately to the left or above the splitter resizes.
</value>
<value name='farthest'>
    The element that is the farthest away from the splitter to the left or above
    the splitter resizes.
</value>
</attr>
<attr name='state'>
  Indicates whether the splitter has collapsed content or not. This attribute  will be updated automatically as the splitter is moved, and is generally used  in a stylesheet to apply a different appearance for each state.
<value name='open'>
    The content either before or after the splitter, depending on the value of
    the collapsed attribute, is currently displayed.
</value>
<value name='collapsed'>
    The content either before or after the splitter is collapsed and is not
    visible.
</value>
<value name='dragging'>
    The user is current adjutsing the position of the splitter, typically by
    dragging it with the mouse.
</value>
</attr>
<class name='tree-splitter'>
  This splitter is intended to be used in tree columns (in-between <a href='ref_treecol.html'>treecol</a>  elements). The splitter will be drawn with no width so that it isn't  visible, however, the columns may still be resized.
</class>
</element>

<element name='stack'>
<documentation>http://www.xulplanet.com/tutorials/xultu/stacks.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_stack.html</reference>
  An element that renders its children on top of each other. The first element  if placed on the bottom, and each successive child is place above the  previous one. All elements are displayed at once. Child elements may also  be placed at absolute positions within the stack.        The left and top attributes on a child of the stack specify the position of  that element.  
<html><![CDATA[
<p>  An element that renders its children on top of each other. The first element  if placed on the bottom, and each successive child is place above the  previous one. All elements are displayed at once. Child elements may also  be placed at absolute positions within the stack.  </p>  <p>  The left and top attributes on a child of the stack specify the position of  that element.  </p>
]]></html>

</element>

<element name='statusbar'>
<reference>http://www.xulplanet.com/reference/elemref/ref_statusbar.html</reference>
  An element used to create a status bar, usually placed along the bottom of  a window. It is virtually equivalent to a standard box, but may be rendered  differently.  

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the statusbar.
</prop>
</element>

<element name='statusbarpanel'>
<reference>http://www.xulplanet.com/reference/elemref/ref_statusbarpanel.html</reference>
  An individual element of a statusbar. This is a special type of button  which is drawn differently. Unlike normal buttons, a statusbarpanel can only  have a label or an image but not both. This element is often used with a  short label or icon to indicate status, for instance whether the user is  online or whether there are new messages.  

<attr name='crop'>
  If the label of the statusbarpanel is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='label' type='string'>
  The label that will appear on the statusbarpanel. If this is left out, no text appears.
</attr>
<attr name='src' type='image URL'>
  The URL of the image to appear on the statusbarpanel. If this attribute is left  out, no image appears.
</attr>
<class name='statusbarpanel-iconic'>
  Use this class to have an image appear on the statusbarpanel. Specify the  image using the src attribute. The image will appear instead of the label.
</class>
<class name='statusbarpanel-menu-iconic'>
  Use this class to have an image appear on the statusbarpanel, and also allow  a popup menu. Specify the image using the src attribute, and place a  <a href='ref_menupopup.html'>menupopup</a> element inside the statusbarpanel. The image will appear instead  of the label.
</class>
<prop name='label'/>
<prop name='src'/>
</element>

<element name='stringbundle'>
<documentation>http://www.xulplanet.com/tutorials/xultu/locprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_stringbundle.html</reference>
  An element which can be used to load localized resources from property files.  Stringbundles should be placed inside a stringbundleset element.        A property file is a list of property key-value pairs each on a separate  line. The key and value is separated with an equals sign. For example, the  following defines two properties:         message.displayError=An error occured trying to display this message   message.nameAlreadyUsed=The name %s is already being used by another account.      
<html><![CDATA[
<p>  An element which can be used to load localized resources from property files.  Stringbundles should be placed inside a stringbundleset element.  </p>  <p>  A property file is a list of property key-value pairs each on a separate  line. The key and value is separated with an equals sign. For example, the  following defines two properties:  </p>  <p><pre>  message.displayError=An error occured trying to display this message<br>  message.nameAlreadyUsed=The name %s is already being used by another account.  </pre></p>  </p>
]]></html>

<attr name='src' type='string properties file URL'>
  The URL of the property file that contains the localized strings.
</attr>
<prop name='appLocale' type='nsILocale'>
  Returns the XPCOM object which holds information about the user's locale. This is  an object which implements nsILocale.
</prop>
<method name='getFormattedString' returns='string'>
<prototype> getFormattedString ( key , strArray ) </prototype>
  
  Returns a formatted string with the given key name from the string  bundle, where each occurance of %s is replaced by each successive  element in the supplied array. You may also use other formatting codes  
</method>
<method name='getString' returns='string'>
<prototype> getString ( key ) </prototype>
  
  Returns the string with the given key name from the string bundle.
</method>
<prop name='src'/>
<prop name='stringBundle' type='nsIStringBundle'>
  Returns the XPCOM string bundle object which implements nsIStringBundle.
</prop>
</element>

<element name='stringbundleset'>
<reference>http://www.xulplanet.com/reference/elemref/ref_stringbundleset.html</reference>
    A container for stringbundle elements.

</element>

<item>
<reference>http://www.xulplanet.com/reference/elemref/ref_StyleProperties.html</reference>
  The following lists some of the custom style properties that Mozilla supports.  

<prop name='-moz-appearance'>
  Used to cause an element to take its border, background style and size from the  operating system's theme. This causes XUL elements to be drawn similar to the  way the user's system draws such elements. This currently only has an effect on  Windows XP and Mac OS X.
</prop>
<prop name='-moz-background-clip' spec=' Moz1.2 '>
  Indicates whether the background, either the color or image, should extend  into the border area of the element. This property is similar to the CSS3   background-clip   property.
<value name='border'>
    The background extends into the border of the element. It will be drawn
    behind the border.
</value>
<value name='padding'>
    The background does not extend into the border.
</value>
</prop>
<prop name='-moz-background-inline-policy' spec=' Moz1.3 '>
  Specifies how the background image of an inline element is determined when  the content of the inline element wraps onto multiple lines.
<value name='bounding-box'>
</value>
<value name='continuous'>
    The background image wraps around on to each line as if the text had no
    line breaks. For example, if the image is 500 pixels and the inline box is
    300 pixels, the first 300 pixels of the image appears on the first line,
    and the last 200 pixels followed by the first 100 pixels of the image
    appear on the second line. The image repeats until the end of the content.
</value>
<value name='each-box'>
</value>
</prop>
<prop name='-moz-background-origin' spec=' Moz1.2 '>
  Determines how the background-position property is determined.  This property is similar to the CSS3   background-origin   property.
<value name='content'>
    The position is relative to the content.
</value>
<value name='border'>
    The position is relative to the border.
</value>
<value name='padding'>
    The position is relative to the padding.
</value>
</prop>
<prop name='-moz-binding'>
  Used to specify an XBL binding to use for the element. The property should be a  URL of an XBL file containing the binding. The URL should contain an anchor to  point to a specific binding with the XBL file, referenced by its id attribute.
</prop>
<prop name='-moz-border-bottom-colors'>
  Sets the border colors for the bottom edge. It should be set to a list  of colors. When an element has a border that is larger than a single  pixel, each line of pixels uses the next color specified in this  property. This eliminates the need for nested boxes. If the border  is wider than the number of colors specified for this property, the  remaining part of the border is the color specified by the border  property.
</prop>
<prop name='-moz-border-left-colors'>
  Sets the border colors for the bottom edge. See the -moz-border-colors-bottom  property for more information.
</prop>
<prop name='-moz-border-radius'>
  This property can be used to give borders rounded corners. This should be set  to a numeric value indicating the amount of rounding to use. You must use a unit  (usually px for pixels). A higher number makes the border rounder.
</prop>
<prop name='-moz-border-radius-bottomleft'>
  Sets the rounding of the lower left corner of the border.
</prop>
<prop name='-moz-border-radius-bottomright'>
  Sets the rounding of the lower right corner of the border.
</prop>
<prop name='-moz-border-radius-topleft'>
  Sets the rounding of the upper left corner of the border.
</prop>
<prop name='-moz-border-radius-topright'>
  Sets the rounding of the upper right corner of the border.
</prop>
<prop name='-moz-border-right-colors'>
  Sets the border colors for the right edge. See the -moz-border-colors-bottom  property for more information.
</prop>
<prop name='-moz-border-top-colors'>
  Sets the border colors for the top edge. See the -moz-border-colors-bottom  property for more information.
</prop>
<prop name='-moz-box-align'>
  The align attribute specifies how child elements of the box are aligned, when  the size of the box is larger than the total size of the children. For boxes that  have horizontal orientation, it specifies how its children will be aligned  vertically. For boxes that have vertical orientation, it is used to specify how  its children are algined horizontally. The pack attribute is related to the alignment  but is used to specify the position in the opposite direction. You  can also specify the value of align using the style property '-moz-box-align'.
<value name='start'>
    Child elements are align starting from the left or top edge of the box. If
    the box is larger than the total size of the children, the extra space is
    placed on the right or bottom side.
</value>
<value name='center'>
    Extra space is split equally along each side of the child elements, resulting
    the children being placed in the center of the box.
</value>
<value name='end'>
    Child elements are placed on the right or bottom edge of the box. If the box
    is larger than the total size of the children, the extra space is placed on
    the left or top side.
</value>
<value name='baseline'>
    This value applies to horizontally oriented boxes only. It causes the child
    elements to be aligned so that their text labels are lined up.
</value>
<value name='stretch' default='true'>
    The child elements are stretched to fit the size of the box. For a horizontal
    box, the children are stretched to be the height of the box. For a vertical
    box, the children are stretched to be the width of the box. If the size of the
    box changes, the children stretch to fit. Use the flex attribute to create
    elements that stretch in the opposite direction.
</value>
</prop>
<prop name='-moz-box-direction'>
  Specifies the direction in the which the children of a box are placed.
<value name='normal' default='true'>
    Children are placed either from left to right or top to bottom in the
    order the elements appear in the XUL source or document tree.
</value>
<value name='reverse'>
    Children are placed either from right to left or bottom to top in the
    order the elements appear in the XUL source or document tree.
</value>
</prop>
<prop name='-moz-box-flex'>
  Indicates the flexibility of an element. Flexible elements grow and shrink  to fit their given space. The actual value is not relevant unless there are  other flexible elements within the same container. Elements with larger  flex values will grow more than elements with lower flex values, at the  ratio determined by the two elements.
</prop>
<prop name='-moz-box-flexgroup'>
  This property is used to group flexible elements together and should be set to  an integer. Elements with a lower flexgroup are flexed first. When those elements  have reached their maximum sizes, the elements with the next higher flexgroup are  flexed. This process continues until there are no more elements remaining. The same  process occurs when decreasing the size, except in the other direction.
</prop>
<prop name='-moz-box-orient'>
  This is the corresponding style property for a XUL element's orient attribute.  For elements that are types of boxes, it determines whether the children are  laid out horizontally or vertically.
<value name='horizontal' default='true'>
    The children of the element are placed horizontally in a row.
</value>
<value name='vertical'>
    The children of the element are placed vertically in a column.
</value>
</prop>
<prop name='-moz-box-pack'>
  The pack attribute specifies where child elements of the box are placed when  the box is larger that the size of the children. For boxes with horizontal  orientation, it is used to indicate the position of children horizontally.  For boxes with vertical orientation, it is used to indicate the position of  children vertically. The align attribute is used to specify the position in the  opposite direction. You can also specify the value of pack using the style property  '-moz-box-pack'.
<value name='start' default='true'>
    Child elements are placed starting from the left or top edge of the box. If
    the box is larger than the total size of the children, the extra space is
    placed on the right or bottom side.
</value>
<value name='center'>
    Extra space is split equally along each side of the child elements, resulting
    the children being placed in the center of the box.
</value>
<value name='end'>
    Child elements are placed on the right or bottom edge of the box. If the box
    is larger than the total size of the children, the extra space is placed on
    the left or top side.
</value>
</prop>
<prop name='-moz-box-sizing'>
  This property determines how the width and height of the element is calculated.  It affects the width and height properties.
<value name='content-box'>
    The width and height properties specify the size of the element including the
    padding.
</value>
<value name='border-box'>
    The width and height properties specify the size of the element including the
    padding and border.
</value>
<value name='padding-box'>
    The width and height properties specify the size of the element. The padding,
    border and margin are added outside of this size.
</value>
</prop>
<prop name='-moz-image-region'>
  For elements that have an image, this property sets the area of the image  that is used. You can set multiple elements to use the same image but use  a different region of the image, reducing the amount of memory required.  You can change this property to simulate animation. The syntax is similar  to the clip property. All four values are relative to the upper left corner  of the image.        -moz-image-region: rect(top, right, bottom, left);   
</prop>
<prop name='-moz-key-equivalent'>
</prop>
<prop name='-moz-opacity'>
  This property can be used to make an element partially transparent. Any content  behind the element will be partially visible. This should be a decimal number  between 0 and 1, where 0 means invisible and 1 means fully opaque. Thus, 0.5  means half-way between. Newer versions of Mozilla (1.7 and later) support  the CSS3 property 'opacity'.
</prop>
<prop name='-moz-outline'>
  This property can be used to set the outline of the element. An outline is  like a border but has some differences in the way it is drawn. This is similar to  the CSS2 outline property which Mozilla does not currently support.
</prop>
<prop name='-moz-outline-color'>
  Sets the color of the outline.
</prop>
<prop name='-moz-outline-radius'>
  This property can be used to give outlines rounded corners. This should be set  to a numeric value indicating the amount of rounding to use. You must use a unit  (usually px for pixels). A higher number makes the outline rounder.
</prop>
<prop name='-moz-outline-radius-bottomleft'>
  Sets the rounding of the lower left corner of the outline.
</prop>
<prop name='-moz-outline-radius-bottomright'>
  Sets the rounding of the lower right corner of the outline.
</prop>
<prop name='-moz-outline-radius-topleft'>
  Sets the rounding of the upper left corner of the outline.
</prop>
<prop name='-moz-outline-radius-topright'>
  Sets the rounding of the upper right corner of the outline.
</prop>
<prop name='-moz-outline-style'>
  Sets the style of the border, which can have the same values as the border-style  property.
</prop>
<prop name='-moz-outline-width'>
  Sets the width of the outline.
</prop>
<prop name='-moz-user-focus'>
  Used to indicate whether the element can have the focus. By setting this to  'ignore', you can disable focusing the element, which means that the user will  not be able to activate the element. The element will be skipped in the tab  sequence. A similar property 'user-focus' has been proposed for CSS3.
<value name='ignore'>
    The element does not accept the keyboard focus and will be skipped in the
    tab order.
</value>
<value name='normal'>
    The element can accept the keyboard focus.
</value>
</prop>
<prop name='-moz-user-input'>
  This can be used to indicate whether the value of the element can be modifed.  This mainly applies to textboxes.
<value name='disabled'>
    The user cannot edit the value of the textbox. The user may still select text
    in the textbox.
</value>
<value name='enabled'>
    The user can edit the value of the textbox.
</value>
</prop>
<prop name='-moz-user-select'>
  Used to indicate whether the text of the element can be selected. This doesn't  have any affect on content loaded as chrome, except in textboxes. A similar  property 'user-select' has been proposed for CSS3.
<value name='none'>
    The text of the element cannot be selected.
</value>
<value name='normal'>
    The text can be selected by the user.
</value>
</prop>
<prop name='display'>
  Although the display property is part of standard CSS, some additional values  are allowed, for the XUL layout styles. You can use these values for non-XUL  elements too, although they may produce unusual results.
<value name='-moz-box'>
    Child elements are laid out horizontally or vertically.
</value>
<value name='-moz-inline-box'>
</value>
<value name='-moz-grid'>
    Child elements are laid out as a XUL  grid .
</value>
<value name='-moz-inline-grid'>
</value>
<value name='-moz-grid-group'>
    Child elements are laid out as a group of grid columns or rows. This is the
    layout used by the  rows  and  columns  elements. You can use the orientation
    (-moz-box-orient) to set which direction. Rows would normally have vertical
    orientation and columns would have a horizontal orientation.
</value>
<value name='-moz-grid-line'>
    Child elements are laid out as a single column or row of a grid. You can use
    the orientation (-moz-box-orient) to set which direction.
</value>
<value name='-moz-stack'>
    Child elements are laid out one on top of each other like the XUL  stack 
    element.
</value>
<value name='-moz-inline-stack'>
</value>
<value name='-moz-deck'>
    Child elements are laid out one on top of each other like the XUL  deck 
    element. Unlike a stack, only the top element is displayed.
</value>
<value name='-moz-popup'>
</value>
<value name='-moz-groupbox'>
</value>
</prop>
<prop name='overflow'>
  Mozilla supports some additional values for the overflow property that are not  in standard CSS. The overflow property is used to specify what happens when the  content is too large for the container.
<value name='-moz-scrollbars-horizontal'>
    Indicates that horizontal scrollbars should appear.
</value>
<value name='-moz-scrollbars-vertical'>
    Indicates that vertical scrollbars should appear.
</value>
<value name='-moz-scrollbars-none'>
    Indicates that no scrollbars should appear.
</value>
</prop>
</item>

<element name='tab'>
<documentation>http://www.xulplanet.com/tutorials/xultu/tabpanel.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tab.html</reference>
  A single tab which should be placed inside a tabs element. The user may click  a tab to bring the associated page of the tabbox to the front.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlItemElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the tab.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the tab will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='afterselected' type='boolean'>
  This is set to true if the tab is immediately after the currently selected tab.  This is set automatically set when needed and you shouldn't adjust it manually.  This is primarily useful for themes so that they can adjust the appearance of the  area around the selected tab.
</attr>
<attr name='beforeselected' type='boolean'>
  This is set to true if the tab is immediately before the currently selected tab.  This is set automatically set when needed and you shouldn't adjust it manually.  This is primarily useful for themes so that they can adjust the appearance of the  area around the selected tab.
</attr>
<attr name='crop'>
  If the label of the tab is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the tab is disabled or not. If this attribute is set to true,  the tab is disabled. This is usually drawn with the text in grey. If the tab is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the tab, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the tab. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear on the tab. If this is left out, no text appears.
</attr>
<attr name='linkedpanel' type='id of a tabpanel element'>
  The id of the linked tabpanel element that will be displayed when the tab  is selected. If this attribute is not used, the tab will be connected to the  panel at the corresponding index in the tabpanels element that the tab is  in its tabs container. However, if this attribute is used, this behavior  is overridden, and the tab will always be linked to a specific panel. This  might be used to avoid duplication by linking several tabs to one panel with  slight differences to the content adjusted in the select event.
</attr>
<attr name='selected' type='boolean'>
  This attribute is set to true if the tab is selected by default.
</attr>
<attr name='validate'>
  This attribute indicates whether to load the image from the cache or not.  This would be useful if the images are stored remotely or you plan on swapping  the image frequently. The following values are accepted, or leave out the  attribute entirely for default handling:
<value name='always'>
    The image is always checked to see whether it should be reloaded.
</value>
<value name='never'>
    The image will be loaded from the cache if possible.
</value>
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the tab.
</prop>
<prop name='label' type='string'>
  The label that will appear on the tab. If this is left out, no text appears.
</prop>
<prop name='linkedPanel'>
</prop>
<prop name='selected' type='boolean'>
  This attribute is set to true if the tab is selected by default.
</prop>
<prop name='tabs' type='tabs element'>
  The tabs element that the tab is contained in.
</prop>
</element>

<element name='tabbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/tabpanel.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tabbox.html</reference>
  A container used to display tabbed pages of elements to the user. The  tabbox should contain two children, the first a tabs element which contains  the tabs and the second a tabpanels element which contains the contents of  the pages. This is a type of box that defaults to vertical orientation.  

<implements>nsIAccessibleProvider</implements>
<attr name='eventnode'>
  Indicates from where keyboard navigation events are listened from. If this  attribute is not specified, events are listened to from the tabbox. Thus, if  this attribute is not used, the tabbox or an element inside it must have the  focus for the keyboard navigation to apply.
<value name='parent'>
    Keyboard navigation is captured at the parent of the tabbox.
</value>
<value name='window'>
    Keyboard navigation is captured at the window level. Tab navigation will
    occur as long as any element in the window is focused.
</value>
<value name='document'>
    Keyboard navigation is captured at the document level. Tab navigation will
    occur as long as any element in the document is focused.
</value>
</attr>
<attr name='handleCtrlPageUpDown' type='boolean'>
  If set to true or omitted, the tabbox will switch to the next tab when the  Control and Page Up or Page Down keys are pressed. If this attribute is set  to false, these keys do not navigate between tabs.
</attr>
<attr name='handleCtrlTab' type='boolean'>
  If set to true or omitted, the tabbox will switch to the next tab when the  Control and Tab keys are pressed. If the Shift key is also held down, the  previous tab will be displayed. If this attribute is set to false, these  keys do not navigate between tabs.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the tabbox.
</prop>
<prop name='eventNode'/>
<prop name='handleCtrlPageUpDown'/>
<prop name='handleCtrlTab'/>
<prop name='selectedIndex' type='integer'>
  Gets and sets the index of the currently selected tab. A non-bubbling select  event will be sent to the tabs element when the selection is changed.
</prop>
<prop name='selectedPanel' type='tabpanel element'>
  Holds a reference to the currently selected tabpanel. You can assign a  value to this property to change the displayed tab.
</prop>
<prop name='selectedTab' type='tab element'>
  A reference to the currently selected tab, which will always be one of the tab  elements in the tabs element. Assign a value to this property to modify the  currently selected tab. 
</prop>
</element>

<element name='tabbrowser'>
<reference>http://www.xulplanet.com/reference/elemref/ref_tabbrowser.html</reference>
  This element is used for holding a set of read-only views of Web documents.  Similar to the browser element, except that mutliple documents can be  displayed, each in a separate tab. This element is implemented as a set of  browser elements inside a tabbox.  

<attr name='autocompleteenabled' spec=' Firefox only ' type='boolean'>
  Set to true to enable autocomplete of fields.
</attr>
<attr name='autocompletepopup' type='id of popup element'>
  The id of a popup element used to hold autocomplete results for the tabbrowser.
</attr>
<attr name='autoscroll' spec=' Firefox only ' type='boolean'>
  Set to false to disable autoscroll for this tabbrowser. If this attribute is set to  true or omitted, autoscroll will be enabled or depending on the user  preference 'general.autoScroll'.
</attr>
<attr name='contentcontextmenu' type='id of a menupopup element'>
  A reference to the context menu for the content area in the tabbrowser.
</attr>
<attr name='contenttooltip' type='id of a tooltip element'>
  A reference to the tooltip element to be used for the content area in the  tabbrowser.
</attr>
<attr name='handleCtrlPageUpDown' type='boolean'>
  If set to true or omitted, the tabbrowser will switch to the next tab when the  Control and Page Up or Page Down keys are pressed. If this attribute is set  to false, these keys do not navigate between tabs.
</attr>
<attr name='onbookmarkgroup' spec=' Not in Firefox ' type='script code'>
  This code executes when the user chooses the 'Bookmark This Group of Tabs'  command.
</attr>
<attr name='onnewtab' spec=' Not in Firefox ' type='script code'>
  This script will be called when the new tab button is clicked.
</attr>
<method name='addProgressListener'>
<prototype> addProgressListener ( listener ) </prototype>
  
  Add a progress listener to the tabbrowser which will monitor loaded documents. The  progress listener should implement the   nsIWebProgressListener   interface.
</method>
<method name='addTab' returns='tab element'>
<prototype> addTab ( url ) </prototype>
  
  Displays a new tab loading the specified URL as the document.  The row of tabs will appear if needed.
</method>
<method name='appendGroup' spec=' Not in Firefox '>
<prototype> appendGroup ( group ) </prototype>
  
  Add several new tabs to the end of the existing tabs. The argument should be  an array of objects, one for each document to load. The objects may be  defined in script and contain a 'URI' property for the URL of the page to  load. A 'referrerURI' property may also be optionally used to set the  referrer page.
</method>
<prop name='browsers' type='nodelist of browser elements'>
  Holds a list of the browser elements inside the tabbrowser.
</prop>
<prop name='canGoBack' type='boolean'>
  This read-only property is true if there is a page to go back to in the session  history and the Back button should be enabled.
</prop>
<prop name='canGoForward' type='boolean'>
  This read-only property is true if there is a page to go forward to in the session  history and the Forward button should be enabled.
</prop>
<prop name='contentDocument' type='document'>
  This read-only property contains the document object in the tabbrowser.
</prop>
<prop name='contentTitle' type='string'>
  This read-only property contains the title of the document object in the tabbrowser.
</prop>
<prop name='contentViewerEdit' type='nsIContentViewerEdit'>
  This read-only property contains the nsIContentViewerEdit which handles clipboard  operations on the document.
</prop>
<prop name='contentViewerFile' type='nsIContentViewerFile'>
  Reference to the nsIContentViewerFile interface for the document.
</prop>
<prop name='contentWindow' type='window'>
  This read-only property contains the window object in the tabbrowser.
</prop>
<prop name='currentURI' type='string current URI'>
  This read-only property contains the currently loaded URL. To change the  URL, use the loadURI method.
</prop>
<prop name='docShell' type='nsIDocShell'>
  This read-only property contains the nsIDocShell object for the document.
</prop>
<prop name='documentCharsetInfo' type='nsIDocumentCharsetInfo'>
  This read-only property contains the nsIDocumentCharsetInfo object for the document  which is used to handle which character set should be used to display the document.
</prop>
<method name='getBrowserForTab' returns='browser element'>
<prototype> getBrowserForTab ( tab ) </prototype>
  
  Returns a browser for specific tab element.
</method>
<method name='goBack'>
<prototype> goBack ( ) </prototype>
  
  Go back one page in the history.
</method>
<method name='goBackGroup' spec=' Not in Firefox '>
<prototype> goBackGroup ( ) </prototype>
  
  Return to the previous group of tabs.
</method>
<method name='goForward'>
<prototype> goForward ( ) </prototype>
  
  Go forward one page in the history.
</method>
<method name='goForwardGroup' spec=' Not in Firefox '>
<prototype> goForwardGroup ( ) </prototype>
  
  Go forward to the next group of tabs.
</method>
<method name='goHome'>
<prototype> goHome ( ) </prototype>
  
  Load the user's home page into the tabbrowser.
</method>
<method name='gotoIndex'>
<prototype> gotoIndex ( index ) </prototype>
  
  Navigate to the page in the history with the given index. Use a positive  number to go forward and a negative number to go back.
</method>
<prop name='homePage' type='string home page URL'>
  This property holds the value of the user's home page setting.
</prop>
<method name='loadGroup' spec=' Not in Firefox ' returns='the first tab'>
<prototype> loadGroup ( group ) </prototype>
  
  Loads a group of pages into multiple tabs. They are either appended or  replaced depending on the state of the preference 'browser.tabs.loadGroup'.  The argument should be an array of objects, one for each document to load.  The objects may be defined in script and contain a 'URI' property for the  URL of the page to load. A 'referrerURI' property may also be optionally  used to set the referrer page. This function returns a reference to the  first tab loaded.
</method>
<method name='loadURI'>
<prototype> loadURI ( uri , referrer , charset ) </prototype>
  
  Load a URL into the document, with the given referrer and character set.
</method>
<method name='loadURIWithFlags'>
<prototype> loadURIWithFlags ( uri , flags , referrer , charset ) </prototype>
  
  Load a URL into the document, with the specified load flags and the given  referrer and character set. In addition to the flags allowed for the  reloadWithFlags methods, the following flags are also valid:
<value name='LOAD_FLAGS_IS_REFRESH'>
    This flag is used when the URL is loaded because of a meta tag refresh or redirect.
</value>
<value name='LOAD_FLAGS_IS_LINK'>
    This flag is used when the URL is loaded because a user clicked on a link. The
    HTTP Referer header is set accordingly.
</value>
<value name='LOAD_FLAGS_BYPASS_HISTORY'>
    Do not add the URL to the session history.
</value>
<value name='LOAD_FLAGS_REPLACE_HISTORY'>
    Replace the current URL in the session history with a new one. This flag might be
    used for a redirect.
</value>
</method>
<prop name='markupDocumentViewer' type='nsIMarkupDocumentViewer'>
  This read-only property contains the nsIMarkupDocumentViewer which is responsible  for drawing the document.
</prop>
<method name='reload'>
<prototype> reload ( ) </prototype>
  
  Reloads the document in the tabbrowser.
</method>
<method name='reloadAllTabs'>
<prototype> reloadAllTabs ( ) </prototype>
  
  Reloads the contents of all of the tabs.
</method>
<method name='reloadTab'>
<prototype> reloadTab ( tab ) </prototype>
  
  Reloads the contents of a specific tab.
</method>
<method name='reloadWithFlags'>
<prototype> reloadWithFlags ( flags ) </prototype>
  
  Reloads the document in the tabbrowser with the given load flags. The flags listed below  may be used, which are all constants of the webNavigation property (or the  nsIWebNavigation interface). You may combine flags using a or symbol ( | )
<value name='LOAD_FLAGS_NONE'>
    No special flags. The document is loaded normally.
</value>
<value name='LOAD_FLAGS_BYPASS_CACHE'>
    Reload the page, ignoring if it is already in the cache. This is the flag used
    when the reload button is pressed while the Shift key is held down.
</value>
<value name='LOAD_FLAGS_BYPASS_PROXY'>
    Reload the page, ignoring the proxy server.
</value>
<value name='LOAD_FLAGS_CHARSET_CHANGE'>
    This flag is used if the document needs to be reloaded because the character
    set changed.
</value>
</method>
<method name='removeAllTabsBut'>
<prototype> removeAllTabsBut ( tabElement ) </prototype>
  
  Removes all of the tab panels except for the one corresponding to  the specified tab. If only one tab page is displayed, this method  does nothing.
</method>
<method name='removeCurrentTab' returns='tab element'>
<prototype> removeCurrentTab ( ) </prototype>
  
  Removes the currently displayed tab page. If it is the only displayed  tab, this method does nothing.
</method>
<method name='removeProgressListener'>
<prototype> removeProgressListener ( listener ) </prototype>
  
  Remove a progress listener from the tabbrowser.
</method>
<method name='removeTab'>
<prototype> removeTab ( tabElement ) </prototype>
  
  Removes a specific tabbed page corresponding to the given tab element.  If only one tab is displayed, this method does nothing. If needed, the  row of tabs will collapse if only one tab remains.
</method>
<method name='replaceGroup' spec=' Not in Firefox ' returns='array of session history objects'>
<prototype> replaceGroup ( group ) </prototype>
  
  replaces existing tabs with a new set. If there were more tabs before, the  additional ones are not removed. You can use the removeTab function to  remove the existing tabs first if that is desired. The argument should be an  array of objects, one for each document to load. The objects may be defined  in script and contain a 'URI' property for the URL of the page to load. A  'referrerURI' property may also be optionally used to set the referrer page.  This method returns an array of the session history objects for the tabs  that were removed.
</method>
<prop name='securityUI' type='nsISecureBrowserUI'>
  The readonly property holds an object which may be used to determine the  security level of the loaded document.
</prop>
<prop name='selectedBrowser' type='browser element'>
  This readonly property returns the currently displayed browser element.
</prop>
<prop name='selectedTab' type='tab element'>
  Holds the currently selected tab. You can modify this property to  change the currently selected tab page.
</prop>
<prop name='sessionHistory' type='nsISHistory'>
  This read-only property contains the nsISHistory object which holds the session  history.
</prop>
<method name='stop'>
<prototype> stop ( ) </prototype>
  
  Equivalent to pressing the Stop button, this method stops the currently loading  document.
</method>
<prop name='tabContainer' type='tabs element'>
  Returns the tabs element that contains the tabs.
</prop>
<prop name='webBrowserFind' type='nsIWebBrowserFind'>
  This read-only property contains an nsIWebBrowserFind object which can be used  to search for text in the document.
</prop>
<prop name='webNavigation' type='nsIWebNavigation'>
  This read-only property contains the nsIWebNavigation object for the document.  Most of its methods are callable directly on the tabbrowser itself, such as goBack and  goForward. It also contains the load constants used by reloadWithFlags and  loadURIWithFlags.
</prop>
<prop name='webProgress' type='nsIWebProgress'>
  This read-only property contains an nsIWebProgress object which is used to monitor  the progress of a document loading.
</prop>
</element>

<element name='tabpanel'>
<documentation>http://www.xulplanet.com/tutorials/xultu/tabpanel.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tabpanel.html</reference>
  A individual panel in a tabpanels element. This element is optional and you may  just use any other container in place of it.  

</element>

<element name='tabpanels'>
<documentation>http://www.xulplanet.com/tutorials/xultu/tabpanel.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tabpanels.html</reference>
  A container to hold the set of pages in a tabbox. The tabpanels element  should be placed in a tabbox. The children of the tabpanels element become  the panels of the tabbox. Usually, the children are tabpanel elements. By  clicking the first tab, the first panel will be displayed. By clicking the  second tab, the second panel will be displayed and so on.  

<implements>nsIAccessibleProvider</implements>
<attr name='selectedIndex' type='integer'>
  Gets and sets the index of the currently selected panel in the deck.  The first item is at index 0.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the tabpanels.
</prop>
<prop name='selectedIndex' type='integer'>
  Gets and sets the index of the currently selected panel. A non-bubbling select  event will be sent to the tabpanels element when the selection changes.
</prop>
<prop name='selectedPanel' type='tabpanel element'>
  Holds a reference to the currently selected tabpanel. You can assign a  value to this property to change the displayed tab.
</prop>
</element>

<element name='tabs'>
<documentation>http://www.xulplanet.com/tutorials/xultu/tabpanel.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tabs.html</reference>
  A row of tabs. A tabs element should be placed inside a tabbox and should  contain tab elements.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULSelectControlElement</implements>
<attr name='closebutton' type='boolean'>
  If this attribute is set to true, the tabs row will have a new tab button  and close button on the ends. This feature is used by the tabbrowser to  add the capability to add new tabs and close existing tabs. You can set an  image to the new and close buttons by applying them to the 'tabs-newbutton'  and 'tabs-closebutton' classes respectively.
</attr>
<attr name='disableclose' type='boolean'>
  If tis attribute is true, the close button will be disabled.
</attr>
<attr name='first-tab' type='boolean'>
  This attribute will be set to true for the first tab. This attribute should  not be set manually, but is useful in a theme if the first tab should be  styled differently.
</attr>
<attr name='last-tab' type='boolean'>
  This attribute will be set to true for the last tab. This attribute should  not be set manually, but is useful in a theme if the last tab should be  styled differently.
</attr>
<attr name='onclosetab' type='script code'>
  This script will be called when the close tab button is clicked.
</attr>
<attr name='onnewtab' spec=' Not in Firefox ' type='script code'>
  This script will be called when the new tab button is clicked.
</attr>
<attr name='onselect' type='script code'>
  This event is sent to the tabs element when the tab is changed.
</attr>
<attr name='setfocus' type='boolean'>
  If true or omitted, the focus will be given to the first element in the  corresponding tabpanel when the tabs are navigated via the keyboard. If  this attribute is false, the focus does not change during navigation.
</attr>
<attr name='tooltiptextnew' spec=' Not in Firefox ' type='string'>
  Used to set the text which appears in the tooltip when the user moves the  mouse over the new button in the tab row.
</attr>
<method name='advanceSelectedTab'>
<prototype> advanceSelectedTab ( dir ) </prototype>
  
  If the argument dir is set to 1, the currently selected tab changes to the next  tab. If the argument dir is set to -1, the currently selected tab changes to the  previous tab.
</method>
<method name='appendItem'>
<prototype> appendItem ( label , value ) </prototype>
  
  Creates a new tab element and adds it to the end of the list of tabs. You  may optionally set a value. Note that a new tabpanel is not created. This  method returns the added tab. The function returns the new item.
</method>
<method name='insertItemAt' returns='tab element'>
<prototype> insertItemAt ( index, label , value ) </prototype>
  
  Creates a new tab element and inserts it at a specific position in the  list of tabs. You may optionally set a value. This method returns the added tab.  The function returns the new item.
</method>
<method name='removeItemAt' returns='tab element'>
<prototype> removeItemAt ( index ) </prototype>
  
  Removes the child tab in the menu at the given index.  The function returns the removed item.
</method>
<prop name='selectedIndex'/>
<prop name='selectedItem' type='tab element'>
  Holds a reference to the currently selected tab element. Assign a value to this  property to modify the currently selected tab. 
</prop>
</element>

<element name='template'>
<documentation>http://www.xulplanet.com/tutorials/xultu/templates.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_template.html</reference>
  Used to declare a template for rule-based construction of elements. Elements  are constructed from a datasource. For more information see the rule element.  

</element>

<element name='textbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/inputs.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_textbox.html</reference>
  A text input field in which the user can enter text. It is similar to the  HTML input element. Only one line of text is displayed by default. The  multiline attribute can be specified to display a field with multiple rows.  

<example>
<![CDATA[
    &lt;label control=&quot;your-name&quot; value=&quot;Enter your name:&quot;/&gt;
    &lt;textbox id=&quot;your-name&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULTextboxElement</implements>
<attr name='cols' type='integer'>
  The number of columns in the textarea. 
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the textbox is disabled or not. If this attribute is set to true,  the textbox is disabled. This is usually drawn with the text in grey. If the textbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the textbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='maxlength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</attr>
<attr name='multiline' type='boolean'>
  If true, the textbox displays multiple lines. If the user presses ENTER, a new  line is started. If false, the textbox only allows entry of one line.
</attr>
<attr name='onchange' type='script code'>
  This event is sent when the value of the textbox is changed.  The event is not sent until the focus is moved to another element.
</attr>
<attr name='oninput' type='script code'>
  This event is sent when a user enters text in a textbox. This event  is only called when the text displayed would change, thus it is not called  when the user presses non-displayable keys.
</attr>
<attr name='readonly' type='boolean'>
  If set to true, then the user cannot modify the value of the textbox. However, the  value may still be modified by a script.
</attr>
<attr name='rows' type='integer'>
  The number of rows in the textarea.
</attr>
<attr name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='timeout' type='integer'>
  For timed textboxes, the number of milliseconds before the timer fires a  command event. The timer starts after the user types a character. If the  user types another character, the timer resets.
</attr>
<attr name='type'>
  You can set the type attribute to one of the values below for a more  specialized type of textbox. Don't set the type if you wish to use a regular  textbox.
<value name='autocomplete'>
    A textbox that supports autocomplete. For more information about
    autocomplete textboxes, see the autocomplete documentation
    ( Mozilla )
    ( Firefox )
</value>
<value name='password'>
    A textbox that hides what is typed, used for entering passwords.
</value>
<value name='timed'>
    This textbox will fire a command event after the user types characters and
    a certain time has passed. The delay is set with the timeout attribute.
    You might use this type, for instance, to update information elsewhere in
    the window as the user types, without the need for continuous updates
    since the timer will not fire if the user types more keys in the meantime.
    The command event will also fire if the user presses the return key.
</value>
</attr>
<attr name='value' type='string'>
  The default value entered in the textbox. The attribute only holds the  default value and is never modified when the user enters text. To get the  updated value, use the value property.
</attr>
<attr name='wrap' type='string'>
  Set this attribute to the value 'off' to disable word wrapping in the textbox.  If this attribute is not specified, word wrapping is enabled.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the textbox.
</prop>
<prop name='disabled'/>
<prop name='inputField' type='textbox element'>
  In Mozilla, the XUL textbox is implemented as a wrapper around an HTML  input element. This read only property holds a reference to this inner input  element.
</prop>
<prop name='maxLength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</prop>
<prop name='readonly'/>
<method name='select'>
<prototype> select ( ) </prototype>
  
  Select all the text in the textbox.
</method>
<prop name='selectionEnd' type='integer'>
  Get or modify the end of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the character after the selection. If this value is equal to the selectionStart  property, no text is selected, but the value indicates the position of the  caret (cursor) within the textbox.
</prop>
<prop name='selectionStart' type='integer'>
  Get or modify the beginning of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the first selected character.
</prop>
<method name='setSelectionRange'>
<prototype> setSelectionRange ( start , end ) </prototype>
  
  Sets the selected portion of the textbox, where the start argument is the  index of the first character to select and the end argument is the index of the  character after the selection. Set both arguments to the same value to move the  cursor to the corresponding position without selecting text.
</method>
<prop name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</prop>
<prop name='textLength' type='integer'>
  Holds the length of the text entered in the textbox. This property is read only.
</prop>
<prop name='timeout'/>
<prop name='type'>
  You can set the type attribute to one of the values below for a more  specialized type of textbox. Don't set the type if you wish to use a regular  textbox.
<value name='autocomplete'>
    A textbox that supports autocomplete. For more information about
    autocomplete textboxes, see the autocomplete documentation
    ( Mozilla )
    ( Firefox )
</value>
<value name='password'>
    A textbox that hides what is typed, used for entering passwords.
</value>
<value name='timed'>
    This textbox will fire a command event after the user types characters and
    a certain time has passed. The delay is set with the timeout attribute.
    You might use this type, for instance, to update information elsewhere in
    the window as the user types, without the need for continuous updates
    since the timer will not fire if the user types more keys in the meantime.
    The command event will also fire if the user presses the return key.
</value>
</prop>
<prop name='value' type='string'>
  Returns the text entered into the textbox. You can set this property to  change the text in the textbox.
</prop>
</element>

<element name='textbox (Firefox Auto Complete)'>
<reference>http://www.xulplanet.com/reference/elemref/ref_textboxFirefoxAutoComplete.html</reference>
  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.        Firefox uses a different autocomplete mechanism that the Mozilla suite. The  example below will create an autocomplete textbox which will search the  user's history.
<html><![CDATA[
<p>  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.  </p>  <p>  Firefox uses a different autocomplete mechanism that the Mozilla suite. The  example below will create an autocomplete textbox which will search the  user's history.</p>
]]></html>

<example>
<![CDATA[
    &lt;textbox type=&quot;autocomplete&quot; autocompletesearch=&quot;history&quot;/&gt;

]]>
</example>
<implements>nsIAccessibleProvider</implements>
<implements>nsIAutoCompleteInput</implements>
<implements>nsIDOMXULMenuListElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the textbox.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the textbox will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='autocompletepopup' type='id of popup element'>
  The id of a popup element used to hold autocomplete results for the textbox.
</attr>
<attr name='autocompletesearch' type='space separated list of values'>
  A space separated list of search component names, each of which implements  the   nsIAutoCompleteSearch   interface. The components are created using the  name '@mozilla.org/autocomplete/search;1?name= ' where name is listed in  this attribute.
<value name='history'>
    Search the browser's URL history
</value>
<value name='form-history'>
    Search the values that the user has entered into form fields.
</value>
</attr>
<attr name='autocompletesearchparam' type='string'>
  A string which is passed to the search component.
</attr>
<attr name='completedefaultindex' type='boolean'>
  If true, the best match value will be filled into the textbox as the user  types. If set to false or omitted, the value must be selected from the list.
</attr>
<attr name='crop'>
  If the label of the textbox is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disableautocomplete' type='boolean'>
  Set this attribute to true to disable autocomplete on the textbox. This  might be used to temporarily disable autocomplete for a field.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the textbox is disabled or not. If this attribute is set to true,  the textbox is disabled. This is usually drawn with the text in grey. If the textbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the textbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='disablekeynavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the list by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled by setting this attribute to true.
</attr>
<attr name='enablehistory' type='boolean'>
  If true, an arrow button will appear on the end of the textbox which, when  pressed, will open a dropdown menu of all available results.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the textbox element is focused.
</attr>
<attr name='forcecomplete' type='boolean'>
  If true, the textbox will be filled in with the best match when it loses the  focus. If false, it will only be filled in when the user selects an item.
</attr>
<attr name='ignoreblurwhilesearching' type='boolean'>
  If true, blur events are ignored while searching, which means that the  autocomplete popup will not disappear.
</attr>
<attr name='inputtooltiptext' type='string'>
  The tooltip text for the textbox.
</attr>
<attr name='label' type='string'>
  The label that will appear on the textbox. If this is left out, no text appears.
</attr>
<attr name='maxlength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</attr>
<attr name='maxrows' type='integer'>
  The number of rows to show in the results list at a time. A scrollbar will appear  so the user can scroll through the remaining items.
</attr>
<attr name='minresultsforpopup' type='integer'>
  The minimum number of results that must be returned for the popup to be  displayed.
</attr>
<attr name='nomatch' type='boolean'>
  This attribute will be set to true if the last search resulted in no matches.
</attr>
<attr name='onchange' type='script code'>
  This event is sent when the value of the textbox is changed.  The event is not sent until the focus is moved to another element.
</attr>
<attr name='oninput' type='script code'>
  This event is sent when a user enters text in a textbox. This event  is only called when the text displayed would change, thus it is not called  when the user presses non-displayable keys.
</attr>
<attr name='onsearchcomplete'>
  This event handler is called when the auto complete search is finished and  results are available.
</attr>
<attr name='ontextentered'>
  This event handler is called when a result is selected for the textbox.
</attr>
<attr name='ontextreverted'>
  This event handler is called when the user presses Escape to revert the  textbox to its original uncompleted value.
</attr>
<attr name='open' type='boolean'>
  This attribute will be set when the history popup is open. The open  attribute is not present if the menu is closed.
</attr>
<attr name='readonly' type='boolean'>
  If set to true, then the user cannot modify the value of the textbox. However, the  value may still be modified by a script.
</attr>
<attr name='showcommentcolumn' type='boolean'>
  If true, a comment column appears in the popup. For the URL history, the comment  column will contain the page titles associated with each URL. The default value  of this property is false.
</attr>
<attr name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='tabscrolling' type='boolean'>
  If true, the user may cycle through the results list by pressing the TAB key.  If false, the default, the TAB key moves the focus to the next element.
</attr>
<attr name='timeout' type='integer'>
  For timed textboxes, the number of milliseconds before the timer fires a  command event. The timer starts after the user types a character. If the  user types another character, the timer resets.
</attr>
<attr name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</attr>
<attr name='value' type='string'>
  A value associated with the textbox. You may use it in a script for your own  purposes.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the textbox.
</prop>
<prop name='completeDefaultIndex'/>
<prop name='controller' type='nsIAutoCompleteController'>
  Returns the controller for the auto complete element.
</prop>
<prop name='crop'/>
<prop name='disableAutoComplete'/>
<prop name='disableKeyNavigation'/>
<prop name='disabled'/>
<prop name='editable' type='boolean'>
  Autocomplete fields are editable so this property always returns true.
</prop>
<prop name='focused'/>
<prop name='forceComplete'/>
<method name='getSearchAt' returns='string'>
<prototype> getSearchAt ( idx ) </prototype>
  
  Returns the search component with the given index. The components are set  with the autocompletesearch attribute.
</method>
<prop name='ignoreBlurWhileSearching'/>
<prop name='inputField' type='textbox element'>
  In Mozilla, the XUL textbox is implemented as a wrapper around an HTML  input element. This read only property holds a reference to this inner input  element.
</prop>
<prop name='label'/>
<prop name='maxLength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</prop>
<prop name='maxRows'/>
<prop name='minResultsForPopup'/>
<method name='onSearchComplete'>
<prototype> onSearchComplete ( ) </prototype>
  
  Calls the searchcomplete event handler. You should not call this method  yourself.
</method>
<method name='onTextEntered' returns='event result'>
<prototype> onTextEntered ( ) </prototype>
  
  Calls the textentered event handler. You should not call this method  yourself.
</method>
<method name='onTextReverted' returns='event result'>
<prototype> onTextReverted ( ) </prototype>
  
  Calls the textreverted event handler. You should not call this method  yourself.
</method>
<prop name='open'/>
<prop name='popup' type='popup element id'>
  Should be set to the value of the id of the popup element that should appear  when the user clicks on the textbox.
</prop>
<prop name='popupOpen' type='boolean'>
  Indicates whether the popup is open or not. Set this property to open or  close the popup.
</prop>
<prop name='searchCount' type='integer'>
  Returns the number of search components used. This property is read only.
</prop>
<prop name='searchParam' type='string'>
  Gets and sets the value of the autocompletesearchparam attribute.
</prop>
<method name='select'>
<prototype> select ( ) </prototype>
  
  Select all the text in the textbox.
</method>
<prop name='selectionEnd' type='integer'>
  Get or modify the end of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the character after the selection. If this value is equal to the selectionStart  property, no text is selected, but the value indicates the position of the  caret (cursor) within the textbox.
</prop>
<prop name='selectionStart' type='integer'>
  Get or modify the beginning of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the first selected character.
</prop>
<method name='setSelectionRange'>
<prototype> setSelectionRange ( start , end ) </prototype>
  
  Sets the selected portion of the textbox, where the start argument is the  index of the first character to select and the end argument is the index of the  character after the selection. Set both arguments to the same value to move the  cursor to the corresponding position without selecting text.
</method>
<prop name='showCommentColumn'/>
<prop name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</prop>
<prop name='tabScrolling'/>
<prop name='textLength' type='integer'>
  Holds the length of the text entered in the textbox. This property is read only.
</prop>
<prop name='textValue' type='string'>
  Returns the content of the textbox. Equivalent to the value property.
</prop>
<prop name='timeout'/>
<prop name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</prop>
<prop name='value' type='string'>
  Returns the text entered into the textbox. You can set this property to  change the text in the textbox.
</prop>
</element>

<element name='textbox (Mozilla Auto Complete)'>
<reference>http://www.xulplanet.com/reference/elemref/ref_textboxMozillaAutoComplete.html</reference>
  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.        The autocomplete functionality is handled through one of more session objects, each  of which can return a set of results given the current value of the textbox. The  sessions can be set using the searchSessions attribute or by calling the addSession  method.
<html><![CDATA[
<p>  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.  </p>  <p>  The autocomplete functionality is handled through one of more session objects, each  of which can return a set of results given the current value of the textbox. The  sessions can be set using the searchSessions attribute or by calling the addSession  method.</p>
]]></html>

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULMenuListElement</implements>
<attr name='alwaysopenpopup' type='boolean'>
  If true, the autocomplete popup will be displayed even when there are no  matches. If false, the default value, the popup will be hidden.
</attr>
<attr name='autoFill' type='boolean'>
  If set to true, the best match will be filled into the textbox as the user  types. If false, the default, the value will not be filled in until the user  selects an item.
</attr>
<attr name='autoFillAfterMatch' type='boolean'>
  If set to true, the entire text of the best match will be displayed at the  end of the input. If false, only the text that hasn't been entered yet will  be filled in. The autoFill attribute must be set to true to use this  feature.
</attr>
<attr name='crop'>
  If the label of the textbox is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disableAutocomplete' type='boolean'>
  If true, the autocomplete behavior will be disabled. You might use a script  to change this attribute. If false, the default, autocomplete is enabled.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the textbox is disabled or not. If this attribute is set to true,  the textbox is disabled. This is usually drawn with the text in grey. If the textbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the textbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='disablehistory'>
  If false, an arrow button will appear on the end of the textbox which, when  pressed, will open a dropdown menu of the history items. The default value  is true, which will hide the dropdown button.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the textbox element is focused.
</attr>
<attr name='forceComplete' type='boolean'>
  If true, the textbox will be filled in with the best match when it loses the  focus. If false, it will only be filled in when the user selects an item.
</attr>
<attr name='ignoreBlurWhileSearching' type='boolean'>
  If true, blur events are ignored while searching, which means that the  autocomplete popup will not disappear.
</attr>
<attr name='inputtooltiptext' type='string'>
  The tooltip text for the textbox.
</attr>
<attr name='label' type='string'>
  The label that will appear on the textbox. If this is left out, no text appears.
</attr>
<attr name='maxlength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</attr>
<attr name='maxrows'>
  The number of rows to show in the results list at a time. A scrollbar will appear  so the user can scroll through the remaining items.
</attr>
<attr name='minResultsForPopup' type='integer'>
  The minimum number of results that must be returned for the popup to be  displayed.
</attr>
<attr name='nomatch'>
  This attribute will be set to true if the last search resulted in no matches.
</attr>
<attr name='onerrorcommand'>
  This event handler is called when an error occurs when selecting a result  from the popup.
</attr>
<attr name='ontextcommand'>
  This event handler is called when a result is selected for the textbox.
</attr>
<attr name='ontextrevert'>
  This event handler is called when the user presses Escape to revert the  textbox to its original uncompleted value.
</attr>
<attr name='open' type='boolean'>
  If true, the popup is showing. You can change this value to show or hide the popup.
</attr>
<attr name='searchSessions' type='space separated list of session names'>
  Set to a keyword indicating what type of data to look up for autocomplete. You  may set multiple types by separating their names by spaces. The following values  are possible, although custom components may be installed which add others.
<value name='history'>
    The user's URL history is searched.
</value>
<value name='addrbook'>
    The user's address book is searched.
</value>
<value name='ldap'>
    The user's LDAP directories are searched.
</value>
</attr>
<attr name='showCommentColumn' type='boolean'>
  If true, a comment column appears in the popup. For the URL history, the comment  column will contain the page titles associated with each URL. The default value  of this property is false.
</attr>
<attr name='showpopup' type='boolean'>
  If true, the popup will be shown. If false, the popup will not be shown, but  the autocomplete results will still be available. You can set this to false  and set the autoFill attribute to true to emulate a Communicator 4.x style  autocomplete textbox. The default value is true.
</attr>
<attr name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</attr>
<attr name='tabScrolling' type='boolean'>
  If true, the user may cycle through the results list by pressing the TAB key.  If false, the default, the TAB key moves the focus to the next element.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='timeout'>
  Set to the number of milliseconds to wait between when the users presses a key  and the results list updates. The default value is 50, which is very fast.
</attr>
<attr name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</attr>
<attr name='userAction'>
  This attribute will be set to the action the user is currently performing.  Possible values:
<value name='none'>
    The user is not interacting with the textbox.
</value>
<value name='typing'>
    The user is typing into the textbox.
</value>
<value name='scrolling'>
    The user is scrolling through the textbox.
</value>
</attr>
<attr name='value' type='string'>
  The default value entered in the textbox. The attribute only holds the  default value and is never modified when the user enters text. To get the  updated value, use the value property.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the textbox.
</prop>
<method name='addSession'>
<prototype> addSession ( session ) </prototype>
  
  Adds a new session object to the autocomplete widget. This can be used to  create a customized autocomplete results list. The argument should be an object  which implements the nsIAutoCompleteSession interface.
</method>
<prop name='alwaysOpenPopup'/>
<prop name='autoFill'/>
<prop name='autoFillAfterMatch'/>
<method name='clearResults'>
<prototype> clearResults ( ) </prototype>
  
  Clears the results list.
</method>
<prop name='crop'/>
<prop name='disableAutocomplete'/>
<prop name='disabled'/>
<prop name='editable' type='boolean'>
  Autocomplete fields are editable so this property always returns true.
</prop>
<prop name='focused'/>
<prop name='forceComplete'/>
<method name='getDefaultSession'>
<prototype> getDefaultSession ( ) </prototype>
  
  Returns the name of the first session with available results.
</method>
<method name='getResultAt'>
<prototype> getResultAt ( index ) </prototype>
  
  Returns the result item at the specified index. The item will be a value  of type nsIAutoCompleteItem.
</method>
<method name='getResultCount'>
<prototype> getResultCount ( session ) </prototype>
  
  Returns the number of results. (The session argument is currently ignored).
</method>
<method name='getResultValueAt'>
<prototype> getResultValueAt ( index ) </prototype>
  
  Returns the result value at the specified index. The item will correspond  to the text of that item that appears in the popup.
</method>
<method name='getSession'>
<prototype> getSession ( index ) </prototype>
  
  Returns the session object with the given index. This will return an object  of type nsIAutoCompleteSession.
</method>
<method name='getSessionByName'>
<prototype> getSessionByName ( name ) </prototype>
  
  Returns the session object with the given name. This will return an object  of type nsIAutoCompleteSession.
</method>
<method name='getSessionResultAt'>
<prototype> getSessionResultAt ( session , index ) </prototype>
  
  Returns the result item at the specified index for a specific session.
</method>
<method name='getSessionStatusAt'>
<prototype> getSessionStatusAt ( index ) </prototype>
  
  Returns the status for the session object with the given index.
</method>
<method name='getSessionValueAt'>
<prototype> getSessionValueAt ( session , index ) </prototype>
  
  Returns the result value at the specified index for a specific session.
</method>
<prop name='ignoreBlurWhileSearching' type='boolean'>
  If true, blur events are ignored while searching, which means that the  autocomplete popup will not disappear.
</prop>
<prop name='inputField' type='textbox element'>
  In Mozilla, the XUL textbox is implemented as a wrapper around an HTML  input element. This read only property holds a reference to this inner input  element.
</prop>
<prop name='isSearching'>
  This property is set to true while a search is occuring.
</prop>
<prop name='isWaiting'>
  This property is set to true during the period while waiting for the timeout   between the time when a user has pressed a key and a search is performed.
</prop>
<prop name='label'/>
<prop name='maxLength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</prop>
<prop name='maxRows'/>
<prop name='minResultsForPopup'/>
<prop name='noMatch'>
  This property will be set to true if the last search resulted in no matches.
</prop>
<prop name='open'/>
<method name='removeSession'>
<prototype> removeSession ( session ) </prototype>
  
  Removes a session object from the autocomplete widget. The argument should be an  object which implements the nsIAutoCompleteSession interface.
</method>
<prop name='resultsPopup'>
  This property is set to the popup element that displays the results.
</prop>
<prop name='searchSessions' type='space separated list of session names'>
  Set to a keyword indicating what type of data to look up for autocomplete. You  may set multiple types by separating their names by spaces. The following values  are possible, although custom components may be installed which add others.
<value name='history'>
    The user's URL history is searched.
</value>
<value name='addrbook'>
    The user's address book is searched.
</value>
<value name='ldap'>
    The user's LDAP directories are searched.
</value>
</prop>
<method name='select'>
<prototype> select ( ) </prototype>
  
  Select all the text in the textbox.
</method>
<prop name='selectionEnd' type='integer'>
  Get or modify the end of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the character after the selection. If this value is equal to the selectionStart  property, no text is selected, but the value indicates the position of the  caret (cursor) within the textbox.
</prop>
<prop name='selectionStart' type='integer'>
  Get or modify the beginning of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the first selected character.
</prop>
<prop name='sessionCount'>
  Holds the number of sessions.
</prop>
<method name='setSelectionRange'>
<prototype> setSelectionRange ( start , end ) </prototype>
  
  Sets the selected portion of the textbox, where the start argument is the  index of the first character to select and the end argument is the index of the  character after the selection. Set both arguments to the same value to move the  cursor to the corresponding position without selecting text.
</method>
<prop name='showCommentColumn'/>
<prop name='showPopup'/>
<prop name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</prop>
<method name='syncSessions'>
<prototype> syncSessions ( autoCompleteElement ) </prototype>
  
  Copy the sessions from another autocomplete element.
</method>
<prop name='tabScrolling'/>
<prop name='textLength' type='integer'>
  Holds the length of the text entered in the textbox. This property is read only.
</prop>
<prop name='timeout'/>
<prop name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</prop>
<prop name='userAction'/>
<prop name='value' type='string'>
  Returns the text entered into the textbox. You can set this property to  change the text in the textbox.
</prop>
</element>

<element name='textnode'>
<reference>http://www.xulplanet.com/reference/elemref/ref_textnode.html</reference>
  Normally when substituting RDF resources in template rules, you place the RDF  property name inside an attribute value preceded with 'rdf:'. In the case of the  textnode element, the entire node is replaced with text corresponding to the result  of the value attribute.         This is useful if you want to use the html element or other elements that have  text content inside them instead of in attributes. This element does nothing outside  of a template.  
<html><![CDATA[
<p>  Normally when substituting RDF resources in template rules, you place the RDF  property name inside an attribute value preceded with 'rdf:'. In the case of the  textnode element, the entire node is replaced with text corresponding to the result  of the value attribute.   </p>  <p>  This is useful if you want to use the html element or other elements that have  text content inside them instead of in attributes. This element does nothing outside  of a template.  </p>
]]></html>

<attr name='value' type='URL of an RDF predicate'>
  The text value to display. This value should be an RDF property.
</attr>
</element>

<element name='titlebar'>
<reference>http://www.xulplanet.com/reference/elemref/ref_titlebar.html</reference>
  Used to represent a title bar. This element is used to create a custom  titlebar by placing the contents as children inside the titlebar. When  the titlebar is clicked and dragged, the window moves with it. Any  elements inside the titlebar do not receive events. The titlebar will send  a command event after the move is complete.  

</element>

<element name='toolbar'>
<documentation>http://www.xulplanet.com/tutorials/xultu/toolbar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbar.html</reference>
  A container which typically contains a row of buttons. It is a type of box  that defaults to horizontal orientation. It can be collapsed with a grippy  when the toolbar is placed inside a toolbox. The toolbar should always have  an id attribute. Firefox supports toolbar customization, whereas the Mozilla  browser does not.  

<implements>nsIAccessibleProvider</implements>
<attr name='currentset' spec=' Firefox only '>
  The current set of displayed items on the toolbar. This should be  set to a comma-separated list of item IDs from the toolbarpalette.
</attr>
<attr name='customindex' spec=' Firefox only '>
  This value is the index of the toolbar in the list of the custom  toolbars. The value is updated automatically by the toolbar  customization dialog.
</attr>
<attr name='customizable' spec=' Firefox only '>
  Set this attribute to true on toolbars that can be customized. This  causes the set of buttons to be persisted across sessions.
</attr>
<attr name='defaultset' spec=' Firefox only '>
  The default set of displayed items on the toolbar. This should be  set to a comma-separated list of item IDs from the toolbarpalette.  For example, 'back-button,forward-button,print-button'.
</attr>
<attr name='grippyhidden' spec=' Not in Firefox ' type='boolean'>
  When set to true, the grippy will be hidden. When set to false, the default, the  grippy will be shown.
</attr>
<attr name='grippytooltiptext' spec=' Not in Firefox ' type='string'>
  The text to appear on the tooltip for the toolbar's grippy when the toolbar is collapsed.  This would be used to label the grippy so that the user knows which toolbar it represents.
</attr>
<attr name='toolbarname' spec=' Firefox only '>
  The name of the toolbar, which is listed in the Show/Hide toolbars  menu.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbar.
</prop>
<prop name='currentSet' spec=' Firefox only '>
  Holds a comma separated list of the items currently on the toolbar. This  will be modified when the user customizes the toolbar. You may change the  current set of items by setting this property.
</prop>
<prop name='firstPermanentChild' spec=' Firefox only '>
  The first permanent child of the toolbar. A permanent child is one that is  not customizable and remains on the toolbar. Items that are placed directly  inside the toolbar without being in the toolbarpalette are permanent.
</prop>
<method name='insertItem' spec=' Firefox only '>
<prototype> insertItem ( id , beforeNode , wrapper , beforePermanent ) </prototype>
  
  Add an item with the given id to the toolbar. The new item  is added just before the item given by the second argument.  If the second argument is null, but the beforePermanent argument  is true, the item is added to the beginning of the toolbar before  the first permanent item. Otherwise, if the beforePermanent argument  is false, the new item is added to the end of the toolbar. The third  argument can be used to wrap the new item in another element.  Usually, the last argument will be null as it is mainly for the use  of the customize dialog.        The id should match an element in the toolbar's toolbarpalette. Some  special ids may also be used to create special spacing items:
<value name='separator'>
    A separator, which is drawn as a vertical bar
</value>
<value name='spacer'>
    A non-flexible space.
</value>
<value name='spring'>
    A flexible space.
</value>
</method>
<prop name='lastPermanentChild' spec=' Firefox only '>
  The last permanent child of the toolbar.
</prop>
<prop name='toolbarName' spec=' Firefox only '>
  The name of the toolbar.
</prop>
</element>

<element name='toolbarbutton'>
<documentation>http://www.xulplanet.com/tutorials/xultu/toolbar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarbutton.html</reference>
  A button that appears on a toolbar. It is equivalent to a regular button  except that it may be rendered differently. Typically, it is expected to  have an image.  

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULButtonElement</implements>
<attr name='accesskey' type='character'>
  This should be set to a letter that is used as a shortcut key. This letter  should be one of the characters that appears in the label text for the toolbarbutton.  This letter will typically be drawn underlined, although this behavior will  be platform and theme specific. When the user presses ALT (or a similar key  that varies on each platform) and the access key, the toolbarbutton will be activated  from anywhere in the window. Although the value is case insensitive, a  letter with the case matching the accesskey attribute will used if both  cases exist in the label.
</attr>
<attr name='autoCheck' type='boolean'>
  If this attribute is true, or left out, the checked state of the button will  be switched each time the button is pressed. If this attribute is false, the  checked state must be adjusted manually.
</attr>
<attr name='checkState' type='integer: 0, 1 or 2'>
  This attribute may be used to create three state buttons, numbered 0, 1 and  2. When in state 0 or 1, pressing the button will switch to the opposite  state. When in state 2, pressing the button will switch to state 0. This  means that the button acts like a checkbox except that there is a third  state which must be set manually by adjusting the check state. If you wish  to have different behavior for how the states are adjusted, set the  autoCheck attribute to false and adjust the state with a script. The type  attribute must be set to 'checkbox' for buttons with a check state.  Constants for the possible values for this attribute are in the   nsIDOMXULButtonElement   interface.
</attr>
<attr name='checked' type='boolean'>
  Indicates whether the button is checked or not. This feature is used for  toggle buttons on a toolbar. You can associate two images, a normal image  and a depressed image, to a toolbar button to create the apperance of the  button being toggled. In the stylesheet, just have a style rule that checks  for the checked attribute.
</attr>
<attr name='command' type='element id'>
  Set to an id of a command element that is being observed by the  element.
</attr>
<attr name='crop'>
  If the label of the toolbarbutton is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='dir'>
  The direction in which the child elements of the toolbarbutton are placed. 
<value name='ltr'>
    The elements are placed left to right or top to bottom in the order they
    appear in the XUL code.
</value>
<value name='rtl'>
    The elements are placed right to left or bottom to top. This is reverse of
    the order in which they appear in the XUL code.
</value>
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the toolbarbutton is disabled or not. If this attribute is set to true,  the toolbarbutton is disabled. This is usually drawn with the text in grey. If the toolbarbutton is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the toolbarbutton, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='dlgType'>
  The dialog type of the button, used only when the button is in a dialog box.  You can use this feature to replace the standard dialog box buttons with custom  buttons, yet the dialog event methods will still function. For example, if the  dlgType is set to 'accept', the button will replace the dialog box's accept  button, which is usually labeled OK. Using this attribute on a button that is  not in a dialog box has no effect. The following values can be used as the dialog type:
<value name='accept'>
    The OK button, which will accept the changes when pressed.
</value>
<value name='cancel'>
    The cancel button which will cancel the operation.
</value>
<value name='help'>
    A help button for displaying help about the dialog.
</value>
<value name='disclosure'>
    A button to show more information. This might be a button or a disclosure
    triangle.
</value>
</attr>
<attr name='group' type='string group name'>
  Buttons with the same value for their group attribute are put into the same  group. Only one button from each group can be checked at a time. If the user  selects one the radio buttons, the others in the group are unchecked.
</attr>
<attr name='image' type='image URL'>
  The URL of the image to appear on the toolbarbutton. If this is attribute is left  out, no image appears. The position of the image is determined by the dir  and orient attributes.
</attr>
<attr name='label' type='string'>
  The label that will appear on the toolbarbutton. If this is left out, no text appears.
</attr>
<attr name='open' type='boolean'>
  For the menu type buttons, the open attribute is set to true when the menu is  open. The open attribute is not present if the menu is closed.
</attr>
<attr name='orient'>
  Used to specify whether the children of the toolbarbutton are oriented horizontally or  vertically. The default value depends on the element. You can also use the  '-moz-box-orient' style property.
<value name='horizontal'>
    Child elements of the toolbarbutton are placed next to each other in a row in the order
    that they appear in the XUL source.
</value>
<value name='vertical'>
    Child elements of the toolbarbutton are placed under each other in a column in the
    order that they appear in the XUL source.
</value>
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='type' type='string'>
  The type of button. If this attribute is not present, a normal button is created.  You can set the type attribute to the value 'menu' to create a button with a  menu popup. This will typically cause the button to be displayed differently.
<value name='menu'>
    Set the type attribute to the value 'menu' to create a toolbar button with a
    menu popup. Place a  menupopup  element inside the button in this case.
</value>
<value name='menu-button'>
     You can also use the value 'menu-button' to create a button with a
     menu. This second value will typically cause the button to be displayed
     with an arrow to the side indicating that a menu is present. This type of
     button is used for Mozilla's back and forward buttons.
</value>
</attr>
<attr name='validate'>
  This attribute indicates whether to load the image from the cache or not.  This would be useful if the images are stored remotely or you plan on swapping  the image frequently. The following values are accepted, or leave out the  attribute entirely for default handling:
<value name='always'>
    The image is always checked to see whether it should be reloaded.
</value>
<value name='never'>
    The image will be loaded from the cache if possible.
</value>
</attr>
<prop name='accessKey'/>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbarbutton.
</prop>
<prop name='autoCheck'/>
<prop name='checkState'/>
<prop name='checked' type='boolean'/>
<prop name='command'/>
<prop name='crop'/>
<prop name='dir'/>
<prop name='disabled'/>
<prop name='dlgType'/>
<prop name='group'/>
<prop name='image'/>
<prop name='label'/>
<prop name='open'/>
<prop name='orient'/>
<prop name='type'/>
</element>

<element name='toolbargrippy' spec='Not in Firefox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/toolbar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbargrippy.html</reference>
  The notch on the side of a toolbar which can be used to collapse and expand it.  This element is used internally by the toolbar and should only be used directly  when modifying its theme.  

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbargrippy.
</prop>
</element>

<element name='toolbaritem' spec='Firefox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbaritem.html</reference>
  An item that appears on a toolbar. This element should wrap all items  that are not buttons, which should instead be created using the  toolbarbutton element. The element is used, for example, to hold  the url field.

</element>

<element name='toolbarpalette' spec='Firefox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarpalette.html</reference>
  The item is a palette of available toolbar items. It is not displayed,  but is used by the toolbar customization dialog to display the list  of items. The children of the toolbarpalette should be the complete  list of toolbarbuttons and toolbaritems that can be added to the  toolbar. Do not add the various spacing items, as those are added  automatically.        You can add your own custom buttons to the Firefox browser by using  an overlay that overlays the toolbarpalette with the id  'BrowserToolbarPalette'.
<html><![CDATA[
<p>  The item is a palette of available toolbar items. It is not displayed,  but is used by the toolbar customization dialog to display the list  of items. The children of the toolbarpalette should be the complete  list of toolbarbuttons and toolbaritems that can be added to the  toolbar. Do not add the various spacing items, as those are added  automatically.  </p>  <p>  You can add your own custom buttons to the Firefox browser by using  an overlay that overlays the toolbarpalette with the id  'BrowserToolbarPalette'.</p>
]]></html>

</element>

<element name='toolbarseparator'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarseparator.html</reference>
  Creates a separator between a group of toolbar buttons. It is functionally equivalent  to a normal separator but some themes may apply a different appearance.  

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbarseparator.
</prop>
</element>

<element name='toolbarset' spec='Firefox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarset.html</reference>
  This element is used as a container for custom toolbars, which are added in  the custom toolbar dialog.

</element>

<element name='toolbarspacer' spec='Firefox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarspacer.html</reference>
  A space between toolbar items.

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbarspacer.
</prop>
</element>

<element name='toolbarspring' spec='Firefox'>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbarspring.html</reference>
  A flexible space between toolbar items.

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbarspring.
</prop>
</element>

<element name='toolbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/toolbar.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_toolbox.html</reference>
  A container for toolbars. It is a type of box but defaults to vertical  orientation. If a toolbar is placed inside a toolbox, a grippy is displayed  on its left or upper edge. The user may click the grippy to collapse the  toolbar. If multiple toolbars are placed in the same toolbox, they will  all collapse into the same row. The Firefox browser does not have  grippies so toolbars cannot be collapsed and expanded.  

<implements>nsIAccessibleProvider</implements>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the toolbox.
</prop>
<method name='appendCustomToolbar' spec=' Firefox only '>
<prototype> appendCustomToolbar ( name , currentset ) </prototype>
  
  Adds a custom toolbar to the toolbox with the given name. You  can supply a comma-separated list of toolbar item ids as the  second argument to add some items by default.
</method>
<method name='collapseToolbar' spec=' Not in Firefox '>
<prototype> collapseToolbar ( toolbar ) </prototype>
  
  Collapse the given toolbar which should be contained in the toolbox.
</method>
<prop name='customToolbarCount' spec=' Firefox only '>
  The number of custom toolbars currently within the toolbox.
</prop>
<method name='expandToolbar' spec=' Not in Firefox '>
<prototype> expandToolbar ( toolbar ) </prototype>
  
  Expand the given toolbar which should be contained in the toolbox.
</method>
<prop name='palette' spec=' Firefox only '>
  The toolbarpalette within the toolbox.
</prop>
<prop name='toolbarset' spec=' Firefox only '>
  The toolbarset within the toolbox.
</prop>
</element>

<element name='tooltip'>
<documentation>http://www.xulplanet.com/tutorials/xultu/popups.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tooltip.html</reference>
  This element is used for the tooltip popups. For text only tooltips, this  element doesn't need to be used; instead you may just add a tooltiptext  attribute to an element.  

<attr name='crop'>
  If the label of the tooltip is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='default' type='boolean'>
  If true, the tooltip is used as the default popup for displaying tooltips in  the window.
</attr>
<attr name='label' type='string'>
  The label that will appear on the tooltip. If this is left out, no text appears.
</attr>
<attr name='noautohide' type='boolean'>
  If this attribute is set to false or omitted, the tooltip will automatically  disappear after a few seconds. If this attribute is set to true, this will  not happen and the tooltip will only hide when the user moves the mouse to  another element.
</attr>
<attr name='onpopuphidden' type='script code'>
  This event is sent to a popup after it has been hidden.
</attr>
<attr name='onpopuphiding' type='script code'>
  This event is sent to a popup when it is about to be hidden.
</attr>
<attr name='onpopupshowing' type='script code'>
  This event is sent to a popup just before it is popped open. This handler is  usually used to dynamically set the contents when the user requests to display it.
</attr>
<attr name='onpopupshown' type='script code'>
  This is event is sent to a popup after it has been opened, much like the onload  event is sent to a window when it is opened.
</attr>
<attr name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup. This allows you to place the menu on one side  on a button.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned. This is typically used for drop-down menus.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element.
</value>
</attr>
<method name='hidePopup'>
<prototype> hidePopup ( ) </prototype>
  
  Closes the tooltip window immediately.
</method>
<prop name='label'/>
<method name='moveTo'>
<prototype> moveTo ( x , y ) </prototype>
  
  Moves the popup to a new location.
</method>
<prop name='popupBoxObject' type='nsIPopupBoxObject'>
  This read-only property holds the nsIPopupBoxObject that implements the tooltip.  You wouldn't normally need to use this property as all of its functions are  available via the tooltip itself.
</prop>
<prop name='position'>
  The position attribute determines where the popup appears relative to the element  the user clicked to invoke the popup. This allows you to place the menu on one side  on a button.
<value name='after_start'>
    The popup appears underneath the element with the popup's upper-left corner
    aligned with the lower-left corner of the element. The left edges of the
    element and the popup are aligned. This is typically used for drop-down menus.
</value>
<value name='after_end'>
    The popup appears underneath the element with the popup's upper-right corner
    aligned with the lower-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='before_start'>
    The popup appears above the element with the popup's lower-left corner
    aligned with the upper-left corner of the element. The left edges of the
    element and the popup are aligned.
</value>
<value name='before_end'>
    The popup appears above the element with the popup's lower-right corner
    aligned with the upper-right corner of the element. The right edges of the
    element and the popup are aligned.
</value>
<value name='end_after'>
    The popup appears to the right of the element with the popup's lower-left
    corner aligned with the lower-right corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='end_before'>
    The popup appears to the right of the element with the popup's upper-left
    corner aligned with the upper-right corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='start_after'>
    The popup appears to the left of the element with the popup's lower-right
    corner aligned with the lower-left corner of the element. The bottom edges
    of the element and the popup are aligned.
</value>
<value name='start_before'>
    The popup appears to the left of the element with the popup's upper-right
    corner aligned with the upper-left corner of the element. The top edges of
    the element and the popup are aligned.
</value>
<value name='overlap'>
    The popup appears over top of the element with the upper-left corners aligned.
</value>
<value name='at_pointer'>
    The popup appears at the same position as the mouse pointer.
</value>
<value name='after_pointer'>
    The popup appears at the same horizontal position as the mouse pointer, but
    vertically, it is placed just below the element.
</value>
</prop>
<method name='showPopup'>
<prototype> showPopup ( element, x , y , popupType, anchor, align ) </prototype>
  
  Opens the tooltip. There are two ways of specifying where the tooltip  appears, either at a specific screen position, or relative to some element  in the window. If either x and y are set to values, the tooltip will  appear at the screen coordinate (x,y). If x and y are -1, the tooltip will  be positioned relative to the element specified as the first argument. This is  the likely case for having a tooltip appear over an element. In this latter case,  the anchor and align arguments may be used to further control where the tooltip  appears relative to the element.  The anchor argument  corresponds to the popupanchor attribute on the element. The align argument  corresponds to the popupalign attribute on the element. The anchor and align  attributes are ignored if either x or y are not -1.        To have a tooltip appear relative to another element yet still be offset by  some number of pixels, determine the actual screen position of the element  using the boxObject.screenX and boxObject.screenY properties of the element  and use those as the x and y arguments offset by the desired values.        Type should be either the string "popup", "context" or "tooltip".   
</method>
<method name='sizeTo'>
<prototype> sizeTo ( width , height ) </prototype>
  
  Changes the current size of the popup to a new width and height.
</method>
</element>

<element name='tree'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tree.html</reference>
  A container which can be used to hold a tabular or hierarchical set of rows  of elements. The tree may contain any number of rows and any number of  columns. Each row of the tree may contain child rows which are displayed  indented from the parent. Unlike other elements, the data to display inside  the tree is not specified using tags, but is determined from a view object.  The view object implements the   nsITreeView   interface. The view is queried for the data to appear in the tree.   There are several ways in which trees are used, as listed below. The second  column lists the interfaces available via the tree's view property. The  third column indicates whether treeitem element are used.               Tree Type        View Interfaces        Has DOM Nodes        Description                  Content Tree                 nsITreeView ,         nsITreeContentView               Yes        This tree has treeitem elements placed within the treechildren          element. In this situation, a content view (which implements the          interface nsITreeContentView) which is a more specialized type of          view, uses the treeitem elements and their descendants to          determine the data to display in the tree. However, the treeitems          are not displayed directly; they are used only as data to the          content view. However, the content view will automatically update          the tree if treeitems are changed.                        RDF Tree                 nsITreeView ,         nsIXULTreeBuilder               No        This tree is generated from an RDF datasource. It is used when a          tree has a datasources attribute, and has 'dont-build-content' in          its flags attribute. For this tree, the data comes directly from           the RDF datasource. DOM treeitems are not created. Even though the          template uses treeitem elements to define the content, DOM nodes for          these elements are not created. This is the type that should be used          for RDF generated trees with lots of rows.                        RDF Content Tree                 nsITreeView ,         nsIXULTreeBuilder          nsITreeContentView               Yes        This tree is generated from an RDF datasource. It is similar to the          previous type but is used when the tree does not have          'dont-build-content' in its flags attribute. DOM treeitems are          created, so you can access the data using RDF functions or DOM          functions. This type is suitable for RDF generated trees with a          fairly small number of rows.                        Custom View Tree                 nsITreeView               No        For this tree you implement the nsITreeView interface yourself. The          tree's data is retrieved from this custom view. The custom view          should be attached to the tree by setting its view property.                 
<html><![CDATA[
<p>  A container which can be used to hold a tabular or hierarchical set of rows  of elements. The tree may contain any number of rows and any number of  columns. Each row of the tree may contain child rows which are displayed  indented from the parent. Unlike other elements, the data to display inside  the tree is not specified using tags, but is determined from a view object.  The view object implements the  <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>  interface. The view is queried for the data to appear in the tree.   There are several ways in which trees are used, as listed below. The second  column lists the interfaces available via the tree's view property. The  third column indicates whether treeitem element are used.  <table border="1">    <tr>      <th>Tree Type</th>      <th>View Interfaces</th>      <th>Has DOM Nodes</th>      <th>Description</th>    </tr>    <tr>      <td>Content Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeContentView.html">nsITreeContentView</a>      </td>      <td>Yes</td>      <td>This tree has treeitem elements placed within the treechildren          element. In this situation, a content view (which implements the          interface nsITreeContentView) which is a more specialized type of          view, uses the treeitem elements and their descendants to          determine the data to display in the tree. However, the treeitems          are not displayed directly; they are used only as data to the          content view. However, the content view will automatically update          the tree if treeitems are changed.      </td>    </tr>    <tr>      <td>RDF Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsIXULTreeBuilder.html">nsIXULTreeBuilder</a>      </td>      <td>No</td>      <td>This tree is generated from an RDF datasource. It is used when a          tree has a datasources attribute, and has 'dont-build-content' in          its flags attribute. For this tree, the data comes directly from           the RDF datasource. DOM treeitems are not created. Even though the          template uses treeitem elements to define the content, DOM nodes for          these elements are not created. This is the type that should be used          for RDF generated trees with lots of rows.      </td>    </tr>    <tr>      <td>RDF Content Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsIXULTreeBuilder.html">nsIXULTreeBuilder</a>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeContentView.html">nsITreeContentView</a>      </td>      <td>Yes</td>      <td>This tree is generated from an RDF datasource. It is similar to the          previous type but is used when the tree does not have          'dont-build-content' in its flags attribute. DOM treeitems are          created, so you can access the data using RDF functions or DOM          functions. This type is suitable for RDF generated trees with a          fairly small number of rows.      </td>    </tr>    <tr>      <td>Custom View Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>      </td>      <td>No</td>      <td>For this tree you implement the nsITreeView interface yourself. The          tree's data is retrieved from this custom view. The custom view          should be attached to the tree by setting its view property.      </td>    </tr>  </table>  </p>
]]></html>

<implements>nsIAccessibleProvider</implements>
<attr name='alternatingbackground' spec=' Moz1.7 ' type='boolean'>
  If true, the background of the tree's rows will alternate between two  colors.
</attr>
<attr name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the tree by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a tree by setting this attribute to  true.
</attr>
<attr name='enableColumnDrag' type='boolean'>
  When set to 'true', the user may drag the column headers around to change the  order that they are displayed in.
</attr>
<attr name='flags' type='string'>
  Set this attribute to 'dont-build-content' for a template generated tree. For  trees that have their content placed directly inside the tree or have a custom  view object, this flag should not be used.
</attr>
<attr name='hidecolumnpicker' type='boolean'>
  When set to false, a drop-down will appear in the upper right corner of the  tree, which the user may use to show and hide columns. When set to true,  the column picker will be hidden. The default value is false.
</attr>
<attr name='onselect' type='script code'>
  This event is sent to an tree when a row is selected, or whenever the  selection changes. The user can select multiple rows by holding down Shift or  Control and click on a row. The onselect event will be sent for each item added  or removed to the selection.
</attr>
<attr name='rows' type='integer'>
  The number of rows to display in the tree.
</attr>
<attr name='seltype'>
  Used to indicate whether multiple selection is allowed.
<value name='single'>
    Only one row may be selected at a time.
</value>
<value name='multiple' default='true'>
    Multiple rows may be selected at once.
</value>
</attr>
<attr name='statedatasource' type='datasource URI'>
  Chrome XUL may specify an RDF datasource to use to store tree state  information. This is used to hold which tree items are open and which items  are collapsed. This information will be remembered for the next time the  XUL file is opened. If you do not specify this attribute, state information  will be stored in the local store (rdf:local-store).
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the tree.
</prop>
<prop name='builderView' type='nsIXULTreeBuilder'>
  A reference to the tree builder which constructed the tree data. The builder  provides access to the RDF resources for each row in the tree, and allows  sorting the data by column. In newer versions of Mozilla, the builderView  property is actually a synonym for the view property, since the two  interfaces are flattened together into a single interface in JavaScript.  This property is read only.
</prop>
<prop name='contentView' type='nsITreeContentView'>
  For trees built with a content builder - that is, those that do not have   flags="dont-build-content" set -- the contentView will be a reference to the   nsITreeContentView   for the tree. This interface lets you retrieve the DOM element corresponding  to a given a row index and vice versa. For trees that are not built with a  content builder, the functions of nsITreeContentView will not be available,  since there are no DOM nodes to retrieve. In newer versions of Mozilla, the  contentView property is actually a synonym for the view property, since the  two interfaces are flattened together into a single interface in JavaScript.  This property is read only.
</prop>
<prop name='currentIndex' type='integer'>
  Set to the index of the currently focused row in the tree. If no row is  focused, the value will be -1. For multiple selection trees, the current index  is the last row selected. Do not use this function to change the selection.  Instead, use the methods of the   TreeSelection   object available via tree.view.selection.
</prop>
<prop name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the tree by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a tree by setting this attribute to  true.
</prop>
<prop name='enableColumnDrag' type='boolean'>
  When set to 'true', the user may drag the column headers around to change the  order that they are displayed in.
</prop>
<prop name='firstOrdinalColumn' type='treecol element'>
  A reference to the first treecol element, which or may not be the first column  displayed in the tree.
</prop>
<prop name='treeBoxObject' type='nsITreeBoxObject'>
  The box object is responsible for rendering the tree on the window. This  object implements the   nsITreeBoxObject   interface and contains functions for retrieving the cells at certain coordinates,  redrawing cells and scrolling the tree. This property is equivalent to the  boxObject property.
</prop>
<prop name='view' type='nsITreeView'>
  The view for the tree, which is the object which generates the data to be  displayed. You can assign an object which implements nsITreeView to this  property. Trees built from RDF or those which use treeitems directly will  already have a view. Functions available in the view allow one to retrieve  the data within the cells, and determine which rows are nested within  others. For a complete list of view functions, see the   nsITreeView   interface.
</prop>
</element>

<element name='treecell'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treecell.html</reference>
  A single cell in a tree. This element should be placed inside a treerow. You  can set the text for the cell using the label attribute.  

<attr name='label' type='string'>
  The label to appear on the cell.
</attr>
<attr name='mode'>
  For columns that are progress meters, this determines the type of progress meter  to use.
<value name='none' default='true'>
    No progress meter is displayed. The cell text is displayed instead.
</value>
<value name='normal'>
    The cell uses its value attribute to determine the amount of the bar that
    is filled in.
</value>
<value name='undetermined'>
    The progressmeter is undeterminate.
</value>
</attr>
<attr name='properties' type='space separated list of property names'>
  Sets the properties of the treecell, which can be used to style the cell.
</attr>
<attr name='ref' type='id of a treecol element'>
  Points to the treecol the cell is in. Usually you would not specify this  attribute as the tree will determine this by the position of the cell.
</attr>
<attr name='src' type='image URL'>
  The URL of the image to appear on the treecell. If this attribute is left  out, no image appears.
</attr>
<attr name='value' type='inetger'>
  A percentage value that specifies the amount of the progress meter that is  filled in. Because it is a percentage, it ranges from 0 to 100.
</attr>
</element>

<element name='treechildren'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treechildren.html</reference>
  This element is the body of the tree. For content trees, the content will  be placed inside this element. This element is also used to define container  rows in the tree.  

</element>

<element name='treecol'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treecol.html</reference>
  A column of a tree. It displays the column header and holds the size and other  information about the column. You can also place splitter elements between the  columns to allow column resizing. You should always place an id attribute on  a treecol element to ensure that the column positioning is handled properly.   

<implements>nsIAccessibleProvider</implements>
<attr name='crop'>
  If the label of the treecol is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is right to left (rtl), the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='cycler' type='boolean'>
  If true, then the column is a cycler column. In the case, clicking on a cell  in the column will alternate its state between on and off. This is used, for  example, in a mail window, for a column that indicates that the message is  read or unread with a small mark in the cell. If the cycler attribute is not  set, the cell is a regular text cell.
</attr>
<attr name='dragging' type='boolean'>
  This attribute will be set to true if the column is being dragged. This  attribute is set automatically; you shouldn't adjust it yourself.
</attr>
<attr name='fixed' type='boolean'>
  If true, the size of the column in the tree cannot be adjusted by the user.  Any splitters to either side will resize those columns while keeping the  fixed column at a constant size. If false or not specified, the user can  adjust the size of the column, typically by dragging the column header with  the mouse.
</attr>
<attr name='hidden' type='boolean'>
  This attribute, when set to true, hides the column. The user can show the  column by selecting it from a drop-down at the end of the column header row.
</attr>
<attr name='hideheader' type='boolean'>
  Set this to true to indicate that the tree column header should be displayed  without any column header styling.
</attr>
<attr name='ignoreincolumnpicker' type='boolean'>
  If true, the column does not appear in the column picker.
</attr>
<attr name='label' type='string'>
  The label that will appear on the treecol. If this is left out, no text appears.
</attr>
<attr name='primary' type='boolean'>
  If set to true, the column will have indentation and twisties drawn to the left  of it to indicate the hierarchy level of the rows. If no column has the primary  attribute set to true, the tree may still contain nested rows, although no  indication will be given to the user.
</attr>
<attr name='sort' type='URI of an RDF predicate'>
  Set this to a RDF property to have the data in the column sorted based on  that property. The property will usually be the same as that of the cell  label.
</attr>
<attr name='sortActive' type='boolean'>
  This should be set to true for the column which should be sorted by default.
</attr>
<attr name='sortDirection'>
  Set this attribute to set the direction the column is sorted. The user may  change the sort direction by clicking the column headers.
<value name='ascending' default='true'>
    The data is sorted in ascending order.
</value>
<value name='descending'>
    The data is sorted in descending order.
</value>
<value name='natural'>
    The data is sorted in natural order, which means the order that it is stored in.
</value>
</attr>
<attr name='src' type='image URL'>
  Set this attribute to have the tree column use an image for the header  instead of a label. Set this to the URL of an image to appear on the tree  column header. If this attribute is left out, no image appears and the  label is used instead. The class 'treecol-image' must be used on the  treecol element for the image to appear. You cannot have both an image and  a label.
</attr>
<attr name='type'>
  The type of tree column. The default is a text column that displays the content  as text.
<value name='checkbox'>
    The content of the columns are checkboxes.
</value>
<value name='progressmeter'>
    The content of the columns are a progress meters. This is used in Mozilla's
    download manager window.
</value>
<value name='text' default='true'>
    The content of the columns is text.
</value>
</attr>
<class name='treecol-image'>
  Use this class to have an image appear on the tree column header. Specify  the image using the src attribute.
</class>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the treecol.
</prop>
</element>

<element name='treecols'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treecols.html</reference>
  A group of treecol elements. There should one and only one treecols element  in a tree.  

<implements>nsIAccessibleProvider</implements>
<attr name='pickertooltiptext' spec=' Moz1.4 ' type='string'>
  The text for the tooltip on the column picker.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the treecols.
</prop>
</element>

<element name='treeitem'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treeitem.html</reference>
  A treeitem should be placed inside a treechildren element and should contain  treerow elements. The treeitem can be clicked by the user to select the row  of the tree. The treeitem contains a single row and all of what appear to the  user as that row's descendants.        In a template condition, you should use a treeitem instead of a content  element when the 'dont-build-content' flag is specified. Set the uri attribute  to the variable name to bind to a content node during matching.  
<html><![CDATA[
<p>  A treeitem should be placed inside a treechildren element and should contain  treerow elements. The treeitem can be clicked by the user to select the row  of the tree. The treeitem contains a single row and all of what appear to the  user as that row's descendants.  </p>  <p>  In a template condition, you should use a treeitem instead of a content  element when the 'dont-build-content' flag is specified. Set the uri attribute  to the variable name to bind to a content node during matching.  </p>
]]></html>

<attr name='container' type='boolean'>
  Set to true if the element is to act as a container which can have child  elements. This would be used for folders. This will be set by the template  builder as needed.
</attr>
<attr name='empty' type='boolean'>
  Set to true if the element is a container that contains no children.
</attr>
<attr name='label' type='string'>
  For trees with only a single column, the label may be placed directly on the  treeitem without the need for a treerow and treecell inside.
</attr>
<attr name='open' type='boolean'>
  If true, the treeitem is open, allowing child elements to be displayed.
</attr>
<attr name='uri'>
  Used to specify the variable name for the content in a template condition.  When a rule is evaluated, it scans through each resource in the RDF  datasource looking for a match. Each resource is placed in the variable  specified in the uri attribute in turn. Then, the other rules are evaluated  for a match.
</attr>
</element>

<element name='treerow'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_treerow.html</reference>
  A single row in a tree. It should be placed inside a treeitem element.  Children of the treerow should be treecell elements. If child rows are  necessary, they should be placed in a treechildren element inside the parent  treeitem.  

<attr name='properties' type='space separated list of property names'>
  Sets the properties of the treerow, which can be used to style the row.
</attr>
</element>

<element name='treeseparator'>
<reference>http://www.xulplanet.com/reference/elemref/ref_treeseparator.html</reference>
  Used to place a seperator row in a tree.  

<attr name='properties' type='space separated list of property names'>
  Sets the properties of the treeseparator, which can be used to style the  separator.
</attr>
</element>

<element name='triple'>
<documentation>http://www.xulplanet.com/tutorials/xultu/advrules.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_triple.html</reference>
  A triple can be included inside a rule's conditions element. It is used check  for an assertion within a graph. If such an assertion exists, the rule may  match, assuming that all the conditions match. If the assertion does not exist,  the rule will not match. Both the subject and object attributes may be variables.        The subject of a triple is a RDF resource. In an RDF file this would usually be  an RDF Description element. The predicate would be a child element or property.  For example, for a bookmark resource, the name and URL would be predicates. They  should be specified in their full URI form. The object is the value of the  RDF property.  
<html><![CDATA[
<p>  A triple can be included inside a rule's conditions element. It is used check  for an assertion within a graph. If such an assertion exists, the rule may  match, assuming that all the conditions match. If the assertion does not exist,  the rule will not match. Both the subject and object attributes may be variables.  </p>  <p>  The subject of a triple is a RDF resource. In an RDF file this would usually be  an RDF Description element. The predicate would be a child element or property.  For example, for a bookmark resource, the name and URL would be predicates. They  should be specified in their full URI form. The object is the value of the  RDF property.  </p>
]]></html>

<prop name='object'>
  The object of a triple. It can be a variable reference, an RDF node URI,  or an RDF literal value.
</prop>
<prop name='predicate'>
  The predicate or property to match. This must be a URI of the property.
</prop>
<prop name='subject'>
  The subject of a triple. It can be a variable reference, an RDF node URI,  or an RDF literal value.
</prop>
</element>

<element name='vbox'>
<documentation>http://www.xulplanet.com/tutorials/xultu/boxes.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_vbox.html</reference>
  A container element which can contain any number of child elements. This is  equivalent to the box element, except it defaults to vertical orientation.  

</element>

<element name='window'>
<documentation>http://www.xulplanet.com/tutorials/xultu/window.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_window.html</reference>
  Describes the structure of a top-level window. It is the root node of a XUL  document. It is by default a horizontally oriented box. As is it a box, all  box attributes can be used. By default, the window will have a  platform-specific frame around it.        To set an icon for the window, create a platform-specific icon file  &lt;windowid&gt;.ico and/or &lt;windowid&gt;.xpm and place or install these  files into the &lt;mozilla-directory&gt;/chrome/icons/default/ directory.  The &lt;windowid&gt; is the value of the id attribute on the window. This  allows you to have a different icon for each window.     For properties and methods, see the   XUL Window  object.  
<html><![CDATA[
<p>  Describes the structure of a top-level window. It is the root node of a XUL  document. It is by default a horizontally oriented box. As is it a box, all  box attributes can be used. By default, the window will have a  platform-specific frame around it.  </p>  <p>  To set an icon for the window, create a platform-specific icon file  &lt;windowid&gt;.ico and/or &lt;windowid&gt;.xpm and place or install these  files into the &lt;mozilla-directory&gt;/chrome/icons/default/ directory.  The &lt;windowid&gt; is the value of the id attribute on the window. This  allows you to have a different icon for each window.  <p>  For properties and methods, see the  <a href='ref_XULWindow.html'>XUL Window</a> object.  </p>
]]></html>

<attr name='height' type='integer'>
  Set this property to use a specific height for the window. This property, along  with the width property, would usually be persisted with the persist attribute  so that the next time the user opens the window, the height and width of the  window will be the same as last time.
</attr>
<attr name='hidechrome' type='boolean'>
  Set this attribute to true to have the chrome including the titlebar hidden.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  The window id. This is used to identify the window and to construct the  filename for the icon for the window.
</attr>
<attr name='screenX' type='integer'>
  The horizontal position that the window appears on the screen.
</attr>
<attr name='screenY' type='integer'>
  The vertical position that the window appears on the screen.
</attr>
<attr name='sizemode'>
  The state of the window. The following values may be used:
<value name='maximized'>
    The window is maximized, and occupies the full size of the screen.
</value>
<value name='minimized'>
    The window is minimized, or hidden.
</value>
<value name='normal' default='true'>
    The window appears in a normal state at the desired size.
</value>
</attr>
<attr name='title' type='string'>
  The text to appear on the title bar of the window.
</attr>
<attr name='width' type='integer'>
  Set this property to use a specific width for the window.
</attr>
<attr name='windowtype' type='string'>
  Set to a string which can be used to identify the type of window. This might be  used, for example, to distingush between a browser window and an editor window.  Some of Mozilla's window handling functions use this attribute to group windows  of the same type together.
</attr>
</element>

<element name='wizard'>
<documentation>http://www.xulplanet.com/tutorials/xultu/wizard.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_wizard.html</reference>
  This element is used to construct a step-by-step wizard found in some  applications to guide users through a task. It is used for a window with  several steps contained on several pages. This element provides the header  and buttons along the bottom, and also handles navigation between the pages.  Each page should be constructed using a wizardpage. The pages are  displayed in the order that they are placed in the wizard, unless you use  the next and pageid attributes on the pages to change the sequence. The  wizard will rendered in a manner suitable for the user's selected theme and  platform. In newer versions of Mozilla, a statusbar may be placed directly  inside the wizard element which will be shared among all pages.  

<attr name='firstpage' type='boolean'>
  True if the wizard is on the first page.
</attr>
<attr name='lastpage' type='boolean'>
  True if the wizard is on the last page.
</attr>
<attr name='onwizardback' type='script code'>
  This should be set to code which is called when the user presses the  Back button. Return true to allow the previous page to be displayed and  false to disallow moving back a page. Use the canRewind property to indicate  to the user (by disabling the Back button) that they cannot go back a page.
</attr>
<attr name='onwizardcancel' type='script code'>
  This should be set to code which is called when the user presses the  Cancel button. Return true to allow the wizard to be cancelled, and close the  wizard, or return false to prevent the wizard from being cancelled. Use the  canCancel property to indicate to the user (by disabling the Cancel button)  that they cannot cancel.
</attr>
<attr name='onwizardfinish' type='script code'>
  This should be set to code which is called when the user presses the  Finish button, which would appear in place of the Next button on the last page  of the wizard. Return true to allow the wizard to be closed, accepting any values  entered on the pages, or return false to prevent the wizard from being closed.  Use the canAdvance property to indicate to the user (by disabling the Finish button)  that they cannot end the wizard.
</attr>
<attr name='onwizardnext' type='script code'>
  This should be set to code which is called when the user presses the  Next button. Return true to allow the next page to be displayed and  false to disallow moving to the next page. Use the canAdvance property to  indicate to the user (by disabling the Next button) that they cannot go to the  next page.
</attr>
<attr name='pagestep' type='integer'>
  The index of the current page.
</attr>
<attr name='title' type='string'>
  The title that appears at the top of the wizard. This is overriden by the label  attribute on the individual pages.
</attr>
<method name='advance'>
<prototype> advance ( pageID ) </prototype>
  
  Call this function to go to the next page. It is equivalent to pressing the next  button. The canAdvance property must be set to true for the page to be changed. The  code in the onwizardnext attribute is called before the page is changed. You may  supply as the argument to the advance function a page index to jump to. Supply null  as the argument to go to the next page in sequence.
</method>
<prop name='canAdvance' type='boolean'>
  This property is set to true if the user can press the Next button to go to  the next page. If this property is false, the user cannot navigate to the next  page. Set this property to true to indicate that the user can go to the next page.  Set to false to disallow moving to the next page. This has the effect of enabling  or disabling the Next button, or, on the last page of the wizard, the Finish button.
</prop>
<prop name='canRewind' type='boolean'>
  This property is set to true if the user can press the Next button to go to  the next page. If this property is false, the user cannot navigate to the next  page. Set this property to true to indicate that the user can go back a page. Set  to false to disallow moving to the previous page. This has the effect of enabling  or disabling the Back button.
</prop>
<method name='cancel'>
<prototype> cancel ( ) </prototype>
  
  This function can be called to cancel the wizard and close it. The code in the  onwizardcancel attribute is called before the wizard is cancelled.
</method>
<prop name='currentPage' type='wizardpage element'>
  This property returns the wizardpage element that is currently displayed.  You can modify this value to change the current page.
</prop>
<method name='getButton' returns='button element'>
<prototype> getButton ( type ) </prototype>
  
  This method returns the wizard button of the specific type, which should be  either "back", "next", "finish" or "cancel".
</method>
<method name='getPageById' returns='wizardpage element'>
<prototype> getPageById ( pageID ) </prototype>
  
  Returns the wizardpage element corresponding to the specified page ID.
</method>
<method name='goTo'>
<prototype> goTo ( pageID ) </prototype>
  
  This function is used to change which page is currently displayed, specified by the  argument pageID. The page will be changed regardless of the value of canAdvance or  canRewind. The onwizardback and onwizardnext code is not called when using this  function.
</method>
<prop name='onFirstPage' type='boolean'>
  This property is set to true if the user is on the first page, which may or  may not be the first index.
</prop>
<prop name='onLastPage' type='boolean'>
  This property is set to true if the user is on the last page of the wizard.
</prop>
<prop name='pageCount' type='integer'>
  This property holds the number of pages in the wizard.
</prop>
<prop name='pageIndex' type='integer'>
  This property returns the index of the currently selected page. You can  change the selected page by modifying this property.
</prop>
<prop name='pageStep' type='integer'>
  This property returns the number of pages that the user has navigated through  so far, meaning that the user would press the Back button this many times to  go back to the beginning. This property is different than pageIndex, because  pages are not necessarily navigated in order.
</prop>
<method name='rewind'>
<prototype> rewind ( ) </prototype>
  
  Call this function to go back a page. It is equivalent to pressing the back button.  The canRewind property must be set to true for the page to be changed. The  code in the onwizardback attribute is called before the page is changed.
</method>
<prop name='title' type='string'>
  The title that appears at the top of the wizard. This is overriden by the label  attribute on the individual pages.
</prop>
<prop name='wizardPages' type='DOM NodeList of wizardpage elements'>
  This property holds the list of wizardpage elements in the wizard.
</prop>
</element>

<element name='wizardpage'>
<documentation>http://www.xulplanet.com/tutorials/xultu/wizard.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_wizardpage.html</reference>
  This element defines a page in a wizard. The content in the pages should be placed  inside the wizardpage element.  

<attr name='description' type='string'>
  Set this attribute to a description to appear in the wizard header while the  page is being displayed.
</attr>
<attr name='label' type='string'>
  The title that appears on the top of the wizard while the page is displayed.
</attr>
<attr name='next' type='string wizardpage id'>
  Set to the page ID of the next page after this one. When set, the page with this  pageID is displayed when the Next button is pressed. This can be used to create  wizards that do not have a linear sequence. If one of the pages has a next  attribute, all of the pages should have one, except that last page.
</attr>
<attr name='onpageadvanced' type='script code'>
  This should be set to code which is called when the user presses the Next  button while on the current page. Return true to allow the next page to be  displayed and false to disallow moving to the next page.
</attr>
<attr name='onpagehide' type='script code'>
  The code in this attribute is called when the page is hidden, such as when  moving to another page. Return true to accept the page change and false to  prevent the page from changing. This code is called before the wizard's  onwizardnext and related functions.
</attr>
<attr name='onpagerewound' type='script code'>
  This should be set to code which is called when the user presses the Back  button while on the current page. Return true to allow the previous page to  be displayed and false to disallow moving to the next page.
</attr>
<attr name='onpageshow' type='script code'>
  The code in this attribute is called when the page is shown.
</attr>
<attr name='pageid' type='string wizardpage id'>
  This attribute should be set to a string that identifies the page's identifer  in the wizard. This is used with the next attribute. The wizard always starts  with the wizardpage that appears first in the wizard child list.
</attr>
<prop name='next' type='string wizardpage id'>
  Set to the page ID of the next page after this one. When set, the page with this  pageID is displayed when the Next button is pressed. This can be used to create  wizards that do not have a linear sequence. If one of the pages has a next  attribute, all of the pages should have one, except that last page.
</prop>
<prop name='pageid' type='string wizardpage id'>
  This attribute should be set to a string that identifies the page's identifer  in the wizard. This is used with the next attribute. The wizard always starts  with the wizardpage that appears first in the wizard child list.
</prop>
</element>

<element name='binding' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/introxbl.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblbinding.html</reference>
  Declares a binding. The id attribute is used to identify a binding and refer to  it within a style sheet via the -moz-binding property. The same binding can be  used to attach to any number of elements.        For example the following style property will refer to a binding with an id  of dropbox:        -moz-binding: url ('chrome://myapp/skin/mybindings.xml#dropbox');        A binding element may contain an xbl tag, an xbl tag,  an xbl tag and an xbl tag.  
<html><![CDATA[
<p>  Declares a binding. The id attribute is used to identify a binding and refer to  it within a style sheet via the -moz-binding property. The same binding can be  used to attach to any number of elements.  </p>  <p>  For example the following style property will refer to a binding with an id  of dropbox:  </p>  <pre>  -moz-binding: url ('chrome://myapp/skin/mybindings.xml#dropbox');  </pre>  <p>  A binding element may contain an xbl tag, an xbl tag,  an xbl tag and an xbl tag.  </p>
]]></html>

<attr name='display' type='string'>
  This attribute specifies how the tag is displayed. By setting this  attribute, you can have an element have the layout and display  characteristics of an existing element. For example, use the value  'xul:button' to create an element that is displayed like a button. The part  before the colon is a namespace prefix so you must declare the XUL namespace  as well. Not all tags have a unique display type. The following XUL display  types may be used:     browser ,     button ,     checkbox ,     description ,     editor ,     grippy ,     iframe ,     image ,     label ,     menu ,     menuitem ,     menubar ,     progressmeter ,     radio ,     resizer ,     scrollbar ,     scrollbox ,     spacer ,     splitter ,     titlebar ,     treechildren  and     treecol .  You may also use a number of HTML, MathML and SVG tags.
</attr>
<attr name='extends' type='binding URL'>
  Bindings may inherit content, properties, methods and event handlers from  other bindings. The binding will have the content and implementation of the  parent binding as well as any defined by itself. The extends attribute  should be set to the URI of the binding that it is inheriting from.
</attr>
<attr name='id' type='string'>
  A unique identifier so that you can identify the binding with.
</attr>
<attr name='inheritstyle' type='boolean'>
  If this attribute is set to true, the content in the binding will inherit  style rules from the document the element the binding is bound to. This  means that the stylesheets for the XUL document will affect the content  inside the binding. If this attribute is false, document stylesheets do not  affect the appearance of the binding content. The default value of this  attribute is true.
</attr>
</element>

<element name='bindings' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/introxbl.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblbindings.html</reference>
  The root node of an XBL file. It should contain one or more xbl tags.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the bindings with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='body' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblmethods.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblbody.html</reference>
  The content of the body element should be the code to execute when the  method is called.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the body with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='children' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblcontent.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblchildren.html</reference>
  Specifies the location where any child elements of the bound element are  placed in the generated content.        Normally, if the element bound to has its own content, the anonymous content  is not generated. However, with a children element, you can merge the  content from the XUL element and the XBL content.        If the children tag contains content itself, that content will become the default  content. If the element the binding is attached to contains content, the default  content will be ignored. If the element does not contain content, the default  content will be added.  
<html><![CDATA[
<p>  Specifies the location where any child elements of the bound element are  placed in the generated content.  </p>  <p>  Normally, if the element bound to has its own content, the anonymous content  is not generated. However, with a children element, you can merge the  content from the XUL element and the XBL content.  </p>  <p>  If the children tag contains content itself, that content will become the default  content. If the element the binding is attached to contains content, the default  content will be ignored. If the element does not contain content, the default  content will be added.  </p>
]]></html>

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the children with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='includes'>
  Should be set to a tag name which acts as a filter for the XUL's content.  Any tags that match the value of the includes attribute are placed at the  location of the children element.
</attr>
</element>

<element name='constructor' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblmethods.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblconstructor.html</reference>
  The code inside this element is called when the binding is attached to an element.  You can use this to initialize the content the binding uses. The constructor  should be placed inside the xbl element.  

<attr name='action'>
  The code contained in the action value is executed for the constructor.  Alternatively, you can put the code inside the constructor element.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the constructor with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='content' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblcontent.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblcontent.html</reference>
  Used to define the anonymous content of a binding. The elements within the  content tag become the anonymous content of the element bound to. The content  is visible on screen as if it was present directly in the XUL file, however  the elements cannot be seen via the normal DOM functions.        You need to use the  getAnonymousNodes   function of the XUL document to retrieve the anonymous content. The only XBL  element that should appear inside the content tag is the xbl tag.        You can place the XBL inherits attribute on any element within the content.  This is used to have attributes of the bound element be placed on the inner  content. This attribute must be in the XBL namespace.  
<html><![CDATA[
<p>  Used to define the anonymous content of a binding. The elements within the  content tag become the anonymous content of the element bound to. The content  is visible on screen as if it was present directly in the XUL file, however  the elements cannot be seen via the normal DOM functions.  </p>  <p>  You need to use the <a href='ref_XULDocument.html#prop_getAnonymousNodes'>getAnonymousNodes</a>  function of the XUL document to retrieve the anonymous content. The only XBL  element that should appear inside the content tag is the xbl tag.  </p>  <p>  You can place the XBL inherits attribute on any element within the content.  This is used to have attributes of the bound element be placed on the inner  content. This attribute must be in the XBL namespace.  </p>
]]></html>

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the content with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='destructor' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblmethods.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xbldestructor.html</reference>
  The code inside this element is called when the binding is removed from an element.  You can use this to unload resources to free memory. The destructor should be placed  inside the xbl element.  

<attr name='action'>
  The code contained in the action value is executed for the destructor.  Alternatively, you can put the code inside the destructor element.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the destructor with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='field' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblfield.html</reference>
  A field is similar to a xbl, except that should not have a  xbl or xbl. It is useful as a simple holder for a value.        The field element may have content which is code that determines the  initial value of the field.  
<html><![CDATA[
<p>  A field is similar to a xbl, except that should not have a  xbl or xbl. It is useful as a simple holder for a value.  </p>  <p>  The field element may have content which is code that determines the  initial value of the field.  </p>
]]></html>

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the field with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='name'>
  The name of the field, which is the name that can be used via a script.  For example, if a field has the name width, it can be accessed with  object.width, where object is a reference to the object.
</attr>
<attr name='readonly'>
  If set to true, the value of the field cannot be changed. If set  to false, the field may be changed.
</attr>
</element>

<element name='getter' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblgetter.html</reference>
  Defines code which is called to retrieve the value of a property.  The code should return the value of the property.  

<example>
<![CDATA[
    &lt;property name=&quot;time&quot;&gt;
      &lt;getter&gt;
       &lt;![CDATA[
        var hour=this.getAttribute(&quot;hour&quot;);
        var minute=this.getAttribute(&quot;minute&quot;);
        var second=this.getAttribute(&quot;second&quot;);
        return hour + &quot;:&quot; + minute + &quot;:&quot; + second;
       ]]&gt;
      &lt;/getter&gt;
    &lt;/property&gt;

]]>
</example>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the getter with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='handler' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblevents.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblhandler.html</reference>
  Specifies event handlers which the XBL element responds to. You can provide  default handling which can be overriden by an appropriate handler on the  bound element. When the event occurs, the code contained in the action  attribute or, if the action is not present, the content of the handler tag is  executed.  

<example>
<![CDATA[
    &lt;handler event=&quot;keydown&quot; keycode=&quot;VK_F3&quot;&gt;
      alert('You pressed the F3 key! Good for you!');
    &lt;/handler&gt;

]]>
</example>
<attr name='action'>
  The code contained in the action value is executed when the event occurs.
</attr>
<attr name='button'>
  If set, the action is only called when the given mouse button is pressed. If  this attribute is not used, it does not matter which button is pressed.
<value name='0'>
    the left mouse button
</value>
<value name='1'>
    the middle mouse button
</value>
<value name='2'>
    the right mouse button
</value>
</attr>
<attr name='charcode'>
  If set, the action is only called when the given character is pressed.  If the key is not pressed, the event is ignored by this handler. If this  attribute is not present and there is no keycode attribute, the handler  is called no matter which key is pressed.
</attr>
<attr name='clickcount'>
  Set to the number of mouse clicks that must occur for the action to be called.  For example, if set to 2, the handler only get called on a double click of the  mouse. Mozilla supports values 1, 2 and 3. The default is 1.
</attr>
<attr name='command'>
  The id of a command to invoke when the event occurs. If used in a  non-chrome document, the entire handler will be ignored.
</attr>
<attr name='event'>
  The event that the handler listens to. When the event occurs on the bound  element, the code in the action attribute is executed. Two special events  exist, bindingattached, which is called when the binding is bound to an  element, and bindingdetached, which is called when the binding is removed  from an element.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the handler with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='keycode'>
  If set, the action is only called for a key event when the key with the  given code is pressed.
</attr>
<attr name='modifiers' type='space separated list of the values below'>
  A list of modifier keys that should be pressed to invoke the event. Multiple  keys may be separated by spaces or commas. Keys will map to other keys on  platforms that do not have them.
<value name='shift'>
    The Shift key.
</value>
<value name='alt'>
    The Alt key. On the Macintosh, this is the Option key.
</value>
<value name='meta'>
    The Meta key. On the Macintosh, this is the Command key.
</value>
<value name='control'>
    The Control key.
</value>
<value name='accel'>
    The key used for keyboard shortcuts on the user's platform. Usually, this would
    be the value you would use.
</value>
<value name='accesskey'>
    The menu access key.
</value>
</attr>
<attr name='phase'>
  The event phase where the handler is invoked. This should be set to the  value 'capturing' to indicate during the event capturing phase, 'target'  to indicate at the target element or left out entirely for the bubbling  phase. (A value of 'target' only works in Mozilla 1.4 and later.)
</attr>
<attr name='preventdefault'>
  If set to true, the default action of the event is not performed.
</attr>
</element>

<element name='handlers' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblevents.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblhandlers.html</reference>
  Used to hold xbl elements, which are used to declare event  handlers.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the handlers with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='image' lang='xbl'>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblimage.html</reference>
  Declares an image resource used by the binding. The image is loaded as soon as the  binding is used. You can use this to preload a number of images for later use.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the image with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='src'>
  The URL of the image to load.
</attr>
</element>

<element name='implementation' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblimplementation.html</reference>
  This element should contain all of the xbl, xbl and xbl  declarations for the binding.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the implementation with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='implements'>
  Set this property to one or more XPCOM interfaces that the binding  implements, separated by commas. Normally, you would not set this property.  It is used to create a binding which implements an interface.
</attr>
<attr name='name'>
  A name used internally for constructing names for this binding. It is  included in error messages displayed on the JavaScript console.
</attr>
</element>

<element name='method' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblmethods.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblmethod.html</reference>
  Declares a JavaScript method that is added to the element's object. The  method may take arguments, declared with the xbl element.        For example, an element that allows text to be selected might have  getSelected and setSelected methods.        The example below is a method toUpper that, when called, will make the  value attribute uppercase.  
<html><![CDATA[
<p>  Declares a JavaScript method that is added to the element's object. The  method may take arguments, declared with the xbl element.  </p>  <p>  For example, an element that allows text to be selected might have  getSelected and setSelected methods.  </p>  <p>  The example below is a method toUpper that, when called, will make the  value attribute uppercase.  </p>
]]></html>

<example>
<![CDATA[
    &lt;method name=&quot;toUpper&quot;&gt;
      &lt;body&gt;
        var v = this.getAttribute(&quot;value&quot;);
        if (v != null) this.setAttribute(&quot;value&quot;,v.toUpperCase());
      &lt;/body&gt;
    &lt;/method&gt;

]]>
</example>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the method with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='name'>
  The name of the method, which is the name used in a script. For example, a  method named setSize can accessed with object.setSize().
</attr>
</element>

<element name='parameter' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblmethods.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblparameter.html</reference>
  Declares a parameter to a method. Each parameter has a name attribute  with becomes a variable that is declared in the method body and has the  value that was passed in to the method.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the parameter with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='name'>
  The name of the parameter. This will be declared as a variable within the  method body and given the value passed in as the corresponding method parameter.
</attr>
</element>

<element name='property' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblproperty.html</reference>
  Declares a JavaScript property that is added to the element's object. The  property element may have a xbl child element and a xbl  child element to get and set the value of the property respectively.        For example, you might want to add a selected property to a drop-down  box. Properties make it convenient if an object is going to be used a  lot with scripts.        The property element may have content which is code that determines the  initial value of the property.  
<html><![CDATA[
<p>  Declares a JavaScript property that is added to the element's object. The  property element may have a xbl child element and a xbl  child element to get and set the value of the property respectively.  </p>  <p>  For example, you might want to add a selected property to a drop-down  box. Properties make it convenient if an object is going to be used a  lot with scripts.  </p>  <p>  The property element may have content which is code that determines the  initial value of the property.  </p>
]]></html>

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the property with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='name'>
  The name of the property, which is the name that can be used via a script.  For example, if a property has the name color, it can be accessed with  object.color, where object is a reference to the object.
</attr>
<attr name='onget'>
  The code contained in the onget attribute is called when an attempt is  made to retrieve the value of the property. You may use this attribute  when only a simple script is required. For longer scripts, you should  use the xbl element, which functions similarly. The onget code should  return the value of the property.
</attr>
<attr name='onset'>
  The code contained in the onset attribute is called when an attempt is  made to modify the value of the property. You may use this attribute  when only a simple script is required. For longer scripts, you should  use the xbl element, which functions similarly. Within the code  of the onset attribute, the variable val is set to the value that the  property should be changed to.
</attr>
<attr name='readonly'>
  If set to true, the value of the property cannot be changed. If set  to false, the property may be changed.
</attr>
</element>

<element name='resources' lang='xbl'>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblresources.html</reference>
  Used to specify a list of resources that the binding uses. This includes  images, using the xbl element or style sheets using the xbl  element. The resources element should be placed directly inside the xbl  element.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the resources with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='setter' lang='xbl'>
<documentation>http://www.xulplanet.com/tutorials/xultu/xblprops.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblsetter.html</reference>
  Defines code which is called to modify the value of a property. The  variable val is defined as the value to set the property to.  

<example>
<![CDATA[
    &lt;property name=&quot;size&quot;&gt;
      &lt;setter&gt;
       &lt;![CDATA[
        var sz=parseInt(val);
        if (sz &lt; 0) sz=0;
        if (sz &gt; 100) sz=100;
        this.setAttribute(&quot;size&quot;,sz);
       ]]&gt;
      &lt;/setter&gt;
    &lt;/property&gt;

]]>
</example>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the setter with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
</element>

<element name='stylesheet' lang='xbl'>
<reference>http://www.xulplanet.com/reference/elemref/ref_xblstylesheet.html</reference>
  Declares a style sheet used by the binding. Using this element is preferred over  using an XML processing instruction. The style rules in the style sheet will only  be applied to the binding, not to other elements in the document.  

<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the stylesheet with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='src'>
  The URL of the style sheet to apply to the binding content.
</attr>
</element>

<object name="XULElement">
<reference>http://www.xulplanet.com/reference/elemref/ref_XULElement.html</reference>
  A XUL element. The following lists attribute and properties common to  all XUL elements. Some only have any meaning in particular situations such as  when placed inside a template or overlay.

<implements>nsIDOMElement</implements>
<implements>nsIDOMEventTarget</implements>
<implements>nsIDOMNode</implements>
<implements>nsIDOMXULElement</implements>
<attr name='align'>
  The align attribute specifies how child elements of the box are aligned, when  the size of the box is larger than the total size of the children. For boxes that  have horizontal orientation, it specifies how its children will be aligned  vertically. For boxes that have vertical orientation, it is used to specify how  its children are algined horizontally. The pack attribute is related to the alignment  but is used to specify the position in the opposite direction. You  can also specify the value of align using the style property '-moz-box-align'.
<value name='start'>
    Child elements are aligned starting from the left or top edge of the box. If
    the box is larger than the total size of the children, the extra space is
    placed on the right or bottom side.
</value>
<value name='center'>
    Extra space is split equally along each side of the child elements, resulting
    the children being placed in the center of the box.
</value>
<value name='end'>
    Child elements are placed on the right or bottom edge of the box. If the box
    is larger than the total size of the children, the extra space is placed on
    the left or top side.
</value>
<value name='baseline'>
    This value applies to horizontally oriented boxes only. It causes the child
    elements to be aligned so that their text labels are lined up.
</value>
<value name='stretch' default='true'>
    The child elements are stretched to fit the size of the box. For a horizontal
    box, the children are stretched to be the height of the box. For a vertical
    box, the children are stretched to be the width of the box. If the size of the
    box changes, the children stretch to fit. Use the flex attribute to create
    elements that stretch in the opposite direction.
</value>
<value name='left'>
     (Deprecated)  The elements are aligned on their left edges.
</value>
<value name='center'>
     (Deprecated)  The elements are centered horizontally.
</value>
<value name='right'>
     (Deprecated)  The elements are aligned on their right edges.
</value>
</attr>
<attr name='allowevents' type='boolean'>
  If true, events are passed to children of the element. Otherwise, events are  passed to the element only.
</attr>
<attr name='allownegativeassertions' type='boolean'>
  Valid on any element that has a datasources attribute. When multiple  datasources are used, one may override an assertion from another.  This attribute, if true, which is the default, allows a datasource  to negate an earlier assertion.
</attr>
<attr name='class' type='string'>
  The style class of the element. Multiple classes may be specified by  separating them with spaces.
</attr>
<attr name='coalesceduplicatearcs' type='boolean'>
  Valid on any element that has a datasources attribute. Because RDF  holds a graph of resources, it is possible for there to be several  pointers to the same node. If this attribute is true, which is the  default, duplicate references are skipped. If false, duplicate  references will appear.
</attr>
<attr name='collapsed' type='boolean'>
  If true, then the element is collapsed and does not appear. It is equivalent  to setting the CSS visibility property to 'collapse'.
</attr>
<attr name='container' type='boolean'>
  Set to true if the element is to act as a container which can have child  elements. This would be used for folders. This will be set by the template  builder as needed.
</attr>
<attr name='containment' type='URI of an RDF predicate'>
  This attribute specifies RDF properties that indicate that a resource is a  container. When generating content from a template this is used to determine  which resources from the datasource are containers and thus can have child  nodes and which ones are not containers.      This attribute should be placed on the same element that the datasources and  the ref attribute is on. It may be set to a space-separated list of RDF  properties or resources.
</attr>
<attr name='context' type='popup element id'>
  Should be set to the value of the id of the popup element that should appear  when the user context-clicks on the element. A context-click varies on each  platform. Usually it will be a right click. You can use the special  value '_child' to indicate the first menupopup child of the element.
</attr>
<attr name='contextmenu' type='popup element id'>
  Alternate name for the context attribute, but also has a corresponding  script property 'contextmenu'.
</attr>
<attr name='datasources' type='space separated list of datasource URIs'>
  A space-separated list of datasources that an element's template  will use for content generation. These can be either internal  datasources such as rdf:bookmarks or a URL of an RDF file. The  datasources attribute may be placed on most elements, although it  will usually be found on trees and menupopups. The element should  have a template element as a child.      The specified datasources are combined into a single composite  datasource which holds the data from all of the datasources. This  composite datasource is accesssible via a script through the  database property.      If you plan on adding a datasource to an element but don't want one  to be added right away, set this attribute to 'rdf:null'. This will  make the element so that its contents can be generated from a datasource.  Otherwise, you cannot add one later.
</attr>
<attr name='debug' type='boolean'>
  If true, extra borders are drawn around the element and all its  descendants. This can be used to determine orientation and where  flexible elements are. If debug mode is enabled for a box, horizontal  oriented boxes are displayed with a blue border and vertical boxes  are displayed with a red border. The border above the element will be  straight for non-flexible elements and wavy for flexible elements.
</attr>
<attr name='dir'>
  The direction in which the child elements of the element are placed. 
<value name='ltr'>
    The elements are placed left to right or top to bottom in the order they
    appear in the XUL code.
</value>
<value name='rtl'>
    The elements are placed right to left or bottom to top. This is reverse of
    the order in which they appear in the XUL code.
</value>
</attr>
<attr name='empty' type='boolean'>
  Set to true if the element is a container that contains no children. This will  be set by the template builder as needed.
</attr>
<attr name='equalsize'>
  This attribute can be used to make the children of the element equal in size.
<value name='always'>
    For a horizontally oriented element, this will make all of its children have
    the width of the widest child. For a vertically oriented element, this will
    make its children all have the height of the tallest child.
</value>
<value name='never' default='true'>
    All of the children are displayed at the size required by the content or as
    specified by the width and height attributes or the CSS width and height
    properties.
</value>
</attr>
<attr name='flags' type='space separated list of the values below'>
  A set of flags used for miscellaneous purposes. Two flags are defined, which  may be the value of this attribute.
<value name='dont-test-empty'>
    For template generated content, the builder will not check that a container
    is empty.
</value>
<value name='dont-build-content'>
    This flag may be used on a tree to indicate that content elements should not
    be generated. This results in a performace enhancement, but you will not be
    able to use the DOM functions to retreive the tree rows.
</value>
</attr>
<attr name='flex' type='integer'>
  Indicates the flexibility of the element. Flexible elements grow and shrink  to fit their given space. The actual value is not relevant unless there are  other flexible elements within the same container. Elements with larger  flex values will grow more than elements with lower flex values, at the  ratio determined by the two elements.
</attr>
<attr name='height' type='integer'>
  The height of the element in pixels. It is recommended that the CSS height property  be used instead.
</attr>
<attr name='hidden' type='boolean'>
  If set to true, the element is not displayed. This is similar to setting the  CSS display property to 'none'.
</attr>
<attr name='id' type='element id, must be unique in the window'>
  A unique identifier so that you can identify the element with. You can use this as  a parameter to getElementById and other DOM functions and to reference the  element in style sheets.
</attr>
<attr name='insertafter' type='element id'>
  When an element is in an overlay, the insertafter attribute specifies the id  of the element in the base window that the element should appear after. This  attribute overrides the insertbefore attribute. This value may be a comma-separated  list of ids, which are scanned and the first one found in the window is used.
</attr>
<attr name='insertbefore' type='element id'>
  When an element is in an overlay, the insertbefore attribute specifies the id  of the element in the base window that the element should appear before. This value  may be a comma-separated list of ids, which are scanned and the first one found in  the window is used.
</attr>
<attr name='left' type='integer'>
  For elements placed within a stack, specifies the position of the  left edge of the element.
</attr>
<attr name='maxheight' type='integer'>
  The maximum height of the element. This corresponds to the max-height CSS property.
</attr>
<attr name='maxwidth' type='integer'>
  The maximum width of the element. This corresponds to the max-width CSS property.
</attr>
<attr name='menu' type='popup element id'>
  Alternate name for the popup attribute, but also has a corresponding  script property 'menu'.
</attr>
<attr name='minheight' type='integer'>
  The minimum height of the element. This corresponds to the min-height CSS property.
</attr>
<attr name='minwidth' type='integer'>
  The minimum width of the element. This corresponds to the min-width CSS property.
</attr>
<attr name='mousethrough'>
  Determines whether mouse events are passed through each element of the  element until one responds to it. If this attribute is not specified, the  value is inherited from the parent of the element.
<value name='always'>
    Mouse events are passed to each element in the element starting from the
    top until one responds to it by returning true from its event handler.
</value>
<value name='never' default='true'>
    Mouse events are only passed to the top element in the element
</value>
</attr>
<attr name='observes' type='broadcaster element id'>
  Set to an id of a broadcaster element that is being observed by the  element. If an attribute changes in the broadcaster it is also changed  in the observer.
</attr>
<attr name='ordinal' type='integer'>
  An integer which specifies the position of the element within its parent.  By default, elements appear in the order they appear in the XUL code. The  ordinal attribute can be used to change the order. You can retrieve the  displayed order by using the properties of the boxObject of the container.
</attr>
<attr name='orient'>
  Used to specify whether the children of the element are oriented horizontally or  vertically. The default value depends on the element. You can also use the  '-moz-box-orient' style property.
<value name='horizontal'>
    Child elements of the element are placed next to each other in a row in the order
    that they appear in the XUL source.
</value>
<value name='vertical'>
    Child elements of the element are placed under each other in a column in the
    order that they appear in the XUL source.
</value>
</attr>
<attr name='pack'>
  The pack attribute specifies where child elements of the box are placed when  the box is larger that the size of the children. For boxes with horizontal  orientation, it is used to indicate the position of children horizontally.  For boxes with vertical orientation, it is used to indicate the position of  children vertically. The align attribute is used to specify the position in the  opposite direction. You can also specify the value of pack using the style property  '-moz-box-pack'.
<value name='start' default='true'>
    Child elements are placed starting from the left or top edge of the box. If
    the box is larger than the total size of the children, the extra space is
    placed on the right or bottom side.
</value>
<value name='center'>
    Extra space is split equally along each side of the child elements, resulting
    the children being placed in the center of the box.
</value>
<value name='end'>
    Child elements are placed on the right or bottom edge of the box. If the box
    is larger than the total size of the children, the extra space is placed on
    the left or top side.
</value>
</attr>
<attr name='persist' type='space separated list of attribute names'>
  A space separated list of attributes that are maintained when the window is  closed. When the window is re-opened, the values of persistent attributes  are restored. In Mozilla, persistent attributes are stored in the per-profile  file localstore.rdf. Persistence can also be stored using the   document.persist  function.  In order for persistence to work, the element must also have an id.
</attr>
<attr name='popup' type='popup element id'>
  Should be set to the value of the id of the popup element that should appear  when the user clicks on the element.
</attr>
<attr name='position' type='integer'>
  When an element is in an overlay, the position is an index where the child is  inserted. The position is one-based, so use a value of 1 to place the element at  the beginning. This attribute is ignored if either an insertbefore or insertafter  attribute matches an element.
</attr>
<attr name='ref' type='URI of an RDF resource'>
  For template generated elements, this attribute is used to specify the root  RDF node where content generation begins. This will correspond to the  value of an about attribute on an RDF container. This attribute should be  placed alongside the datasources attribute.
</attr>
<attr name='removeelement' type='element id'>
  When placed on an element in an overlay, it indicates that the element in the  base file should be removed from the window.
</attr>
<attr name='sortDirection'>
  Set this attribute to set the direction that template-generated content is sorted.  Use the sortResource attribute to specify the sort key.
<value name='ascending'>
    The data is sorted in ascending order.
</value>
<value name='descending'>
    The data is sorted in descending order.
</value>
<value name='natural' default='true'>
    The data is sorted in natural order, which means the order that it is stored in.
</value>
</attr>
<attr name='sortResource' type='URI of an RDF predicate'>
  For template-generated content, this specifies the sort key, if you would like  the content to be sorted. The key should be the full URI of the resource to sort  by, for example 'http://home.netscape.com/NC-rdf#Name'. Place this attribute on  the same element as the datasources attribute. Use sortResource2 to specify a  secondary sort key.
</attr>
<attr name='sortResource2' type='URI of an RDF predicate'>
  A secondary key for sorted content.
</attr>
<attr name='statustext' type='string'>
  Used to set the text that appears on the status bar when the user moves the mouse  over the element. Mozilla doesn't adjust the status bar automatically however. This  attribute serves only as a place to keep the text. In Firefox, this text is  automatically placed in the statusbar for menuitems on the menu bar.
</attr>
<attr name='style' type='CSS inline style'>
  CSS style rules to be applied to the element. Syntax is as in the HTML style  attribute. It is preferred to put style rules in style sheets.
</attr>
<attr name='template' type='element id'>
  For template generated elements, this attribute may optionally be placed on  the root node (the element with the datasources attribute) to refer to  a template that exists elsewhere in the XUL code. This template attribute  should be set to the ID of the template element. This might be used to share a  single template between multiple trees or menus. If this attribute is not  specified, there should be a template element directly inside the node.
</attr>
<attr name='tooltip' type='tooltip element id'>
  Should be set to the value of the id of the popup element that should be used  as a tooltip window when the mouse hovers over the element for a moment. The tooltip  will automatically disappear when the mouse is moved. If this attribute is set  to '_child', the first tooltip child element inside the element is used.
</attr>
<attr name='tooltiptext' type='string'>
  Used to set the text which appears in the tooltip when the user moves the  mouse over the element. This can be used instead of setting the tooltip to a  popup for the common case where it contains only text. The toolitp is  displayed in a default tooltip which only displays only a label, however  the default tooltip may be changed by setting the default attribute on a  tooltip element.
</attr>
<attr name='top' type='integer'>
  For elements placed within a stack, specifies the position of the  top edge of the element.
</attr>
<attr name='uri' type='string'>
  For template-generated content, the attribute should be placed on the  element where content generation should begin. Thus, it should be placed  on an element that is a descendant of a template. The value should be set  to rdf:*.    Elements that appear inside the element with the attribute will be  repeated for each node in the RDF datasource. Elements outside will appear  only once.
</attr>
<attr name='wait-cursor'>
  Set this attribute to true to have the cursor switch to a waiting cursor  while the mouse is hovering over it. Usually, you would only use this on the  window element or other top-level elements.
</attr>
<attr name='width' type='integer'>
  The width of the element in pixels. It is recommended that the CSS width property  be used instead.
</attr>
<class name='box-inset'>
  The element is drawn with an inset border around it similar to the inset  type except more noticeable. It will generally have borders like those that  appear around a control such as listbox, with the background white, assuming  the default theme.
</class>
<class name='box-padded'>
  A box with a small amount of padding on each side.
</class>
<class name='groove-bottom'>
  An element with a groove along its bottom edge.
</class>
<class name='groove-left'>
  An element with a groove along its left edge.
</class>
<class name='groove-right'>
  An element with a groove along its right edge.
</class>
<class name='groove-top'>
  An element with a groove along its top edge.
</class>
<class name='inset'>
  The element is drawn with an inset border around it. This causes the element  area to appear inset from the rest of the content.
</class>
<class name='outset'>
  The element is drawn with an outset border around it. This causes the element  area to appear outset from the rest of the content.
</class>
<class name='outset-top-bottom'>
  The element is drawn with an outset border along the top and bottom edges.  This class might be used when the element is part of a set of items in a  row, since borders do not appear between them.
</class>
<prop name='align'/>
<prop name='allowEvents'/>
<method name='blur'>
<prototype> blur ( ) </prototype>
  
  If the focus is on the element, it is removed. The focus is not automatically  placed on any other element. Essentially, this is used to call the onblur  handler.
</method>
<prop name='boxObject' type='nsIBoxObject'>
  This property is available for elements that are derived from boxes, which  is most displayable XUL elements. You can retrieve the boxObject for non-XUL  elements using the document.getBoxObjectFor method. The boxObject contains a  number of properties, described below.
</prop>
<prop name='boxObject.element' type='element'>
  A reference to the element itself.
</prop>
<method name='boxObject.getLookAndFeelMetric' returns='string'>
<prototype> boxObject.getLookAndFeelMetric ( property ) </prototype>
  
  Returns a platform-specific setting named by the property argument.  Typically these would be settings the user would set in their  operating system preferences.  Two values can be used:
<value name='scrollbarStyle'>
    Determines the type of scroll bar arrows that are used. This is used
    on a Macintosh to determine whether the system is configured to display
    the arrows at one end or both. The four possible return values are
    doublebottom, double, doubletop, and single.
</value>
<value name='thumbStyle'>
    Determines whether scroll bar thumbs are displayed as a small fixed size
    box or proportional to the size of the content. The two possible return
    values are fixed and proportional.
</value>
</method>
<prop name='boxObject.height' type='integer'>
  The displayed height of the element.
</prop>
<prop name='boxObject.screenX' type='integer'>
  The horizontal position of the element on the screen.
</prop>
<prop name='boxObject.screenY' type='integer'>
  The vertical position of the element on the screen.
</prop>
<prop name='boxObject.width' type='integer'>
  The displayed width of the element.
</prop>
<prop name='boxObject.x' type='integer'>
  The horizontal position of the element on the window. The x and y position  is relative to the window's upper-left corner, or if the XUL is loaded in  a frame, the upper-left corner of the frame.
</prop>
<prop name='boxObject.y' type='integer'>
  The vertical position of the element on the window.
</prop>
<prop name='builder' type='nsIXULTemplateBuilder'>
  For content generated from a template, this is the XPCOM object that is  responsible for generating the content. For scripts it is only necessary in  case you want to force the template content to be regenerated. You may need  to do this if you have adjusted the rules manually. To rebuild the content  call the builder's rebuild method.    For example, given a reference to a tree myTree, this example will rebuild  its content:    myTree.builder.rebuild();
</prop>
<prop name='className'>
  Gets and sets the value of the class attribute.
</prop>
<method name='click'>
<prototype> click ( ) </prototype>
  
  Calls the onclick handler for the element.
</method>
<prop name='collapsed'/>
<prop name='contextMenu'/>
<prop name='controllers' type='nsIControllers'>
  A controllers list attached to the element. The controllers are used to  respond to commands. The document's command dispatcher will locate  controllers to handle a command by using the focused element's controllers  list.
</prop>
<prop name='database' type='nsIRDFCompositeDataSource'>
  Returns the composite datasource created when all the datasources  of an element are combined. Set to null for elements that do not  have a datasources attribute.
</prop>
<prop name='datasources' type='space separated list of datasource URIs'>
  Gets and sets the value of the datasources attribute. In newer versions of  Mozilla (1.7), the datasources will be reloaded and the template rebuilt.
</prop>
<prop name='dir'/>
<method name='doCommand'>
<prototype> doCommand ( ) </prototype>
  
  Executes the command event for the element.
</method>
<prop name='flex'/>
<method name='focus'>
<prototype> focus ( ) </prototype>
  
  Assigns the focus to the element, if it can accept the focus. The onfocus  handler is called.
</method>
<method name='getElementsByAttribute' returns='DOM NodeList'>
<prototype> getElementsByAttribute ( attrib , value ) </prototype>
  
  Returns an array of all the child elements of the element that have the  attribute given by the first argument set to the value given by the second  argument. If second argument is '*', the attribute may be set to any value.
</method>
<prop name='height'/>
<prop name='hidden'/>
<prop name='id'/>
<prop name='left'/>
<prop name='maxHeight'/>
<prop name='maxWidth'/>
<prop name='menu'/>
<prop name='minHeight'/>
<prop name='minWidth'/>
<prop name='observes'/>
<prop name='ordinal'/>
<prop name='orient'/>
<prop name='pack'/>
<prop name='persist'/>
<prop name='ref'/>
<prop name='resource' type='nsIRDFResource'>
  Returns an RDF resource with the value of the element's ref attribute. If the  ref attribute is not specified, the id attribute is used instead.
</prop>
<prop name='statusText'/>
<prop name='style'/>
<prop name='tooltip'/>
<prop name='tooltipText'/>
<prop name='top'/>
<prop name='width'/>
</object>
</elements>

