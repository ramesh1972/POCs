//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CriticalErrorReporting.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("CriticalErrorDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CriticalErrorDS : System.Data.DataSet {
        
        private AdditionalInfoDataTable tableAdditionalInfo;
        
        private VerbsDataTable tableVerbs;
        
        private CategoriesDataTable tableCategories;
        
        private DiagnosticInfoDataTable tableDiagnosticInfo;
        
        private EnvironmentVariablesDataTable tableEnvironmentVariables;
        
        private ExceptionDataTable tableException;
        
        private ExceptionDataDataTable tableExceptionData;
        
        private GenericArgumentsDataTable tableGenericArguments;
        
        private HostEnvironmentDataTable tableHostEnvironment;
        
        private InnerExceptionsDataTable tableInnerExceptions;
        
        private LogEntryDataTable tableLogEntry;
        
        private ProcessInfoDataTable tableProcessInfo;
        
        private StartInfoDataTable tableStartInfo;
        
        private TargetSiteDataTable tableTargetSite;
        
        private ExtendedPropsDataTable tableExtendedProps;
        
        private ExceptionFieldsDataTable tableExceptionFields;
        
        private ExceptionPropertiesDataTable tableExceptionProperties;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CriticalErrorDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CriticalErrorDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AdditionalInfo"] != null)) {
                    base.Tables.Add(new AdditionalInfoDataTable(ds.Tables["AdditionalInfo"]));
                }
                if ((ds.Tables["Verbs"] != null)) {
                    base.Tables.Add(new VerbsDataTable(ds.Tables["Verbs"]));
                }
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["DiagnosticInfo"] != null)) {
                    base.Tables.Add(new DiagnosticInfoDataTable(ds.Tables["DiagnosticInfo"]));
                }
                if ((ds.Tables["EnvironmentVariables"] != null)) {
                    base.Tables.Add(new EnvironmentVariablesDataTable(ds.Tables["EnvironmentVariables"]));
                }
                if ((ds.Tables["Exception"] != null)) {
                    base.Tables.Add(new ExceptionDataTable(ds.Tables["Exception"]));
                }
                if ((ds.Tables["ExceptionData"] != null)) {
                    base.Tables.Add(new ExceptionDataDataTable(ds.Tables["ExceptionData"]));
                }
                if ((ds.Tables["GenericArguments"] != null)) {
                    base.Tables.Add(new GenericArgumentsDataTable(ds.Tables["GenericArguments"]));
                }
                if ((ds.Tables["HostEnvironment"] != null)) {
                    base.Tables.Add(new HostEnvironmentDataTable(ds.Tables["HostEnvironment"]));
                }
                if ((ds.Tables["InnerExceptions"] != null)) {
                    base.Tables.Add(new InnerExceptionsDataTable(ds.Tables["InnerExceptions"]));
                }
                if ((ds.Tables["LogEntry"] != null)) {
                    base.Tables.Add(new LogEntryDataTable(ds.Tables["LogEntry"]));
                }
                if ((ds.Tables["ProcessInfo"] != null)) {
                    base.Tables.Add(new ProcessInfoDataTable(ds.Tables["ProcessInfo"]));
                }
                if ((ds.Tables["StartInfo"] != null)) {
                    base.Tables.Add(new StartInfoDataTable(ds.Tables["StartInfo"]));
                }
                if ((ds.Tables["TargetSite"] != null)) {
                    base.Tables.Add(new TargetSiteDataTable(ds.Tables["TargetSite"]));
                }
                if ((ds.Tables["ExtendedProps"] != null)) {
                    base.Tables.Add(new ExtendedPropsDataTable(ds.Tables["ExtendedProps"]));
                }
                if ((ds.Tables["ExceptionFields"] != null)) {
                    base.Tables.Add(new ExceptionFieldsDataTable(ds.Tables["ExceptionFields"]));
                }
                if ((ds.Tables["ExceptionProperties"] != null)) {
                    base.Tables.Add(new ExceptionPropertiesDataTable(ds.Tables["ExceptionProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdditionalInfoDataTable AdditionalInfo {
            get {
                return this.tableAdditionalInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerbsDataTable Verbs {
            get {
                return this.tableVerbs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoriesDataTable Categories {
            get {
                return this.tableCategories;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiagnosticInfoDataTable DiagnosticInfo {
            get {
                return this.tableDiagnosticInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnvironmentVariablesDataTable EnvironmentVariables {
            get {
                return this.tableEnvironmentVariables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionDataTable Exception {
            get {
                return this.tableException;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionDataDataTable ExceptionData {
            get {
                return this.tableExceptionData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenericArgumentsDataTable GenericArguments {
            get {
                return this.tableGenericArguments;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HostEnvironmentDataTable HostEnvironment {
            get {
                return this.tableHostEnvironment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InnerExceptionsDataTable InnerExceptions {
            get {
                return this.tableInnerExceptions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogEntryDataTable LogEntry {
            get {
                return this.tableLogEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessInfoDataTable ProcessInfo {
            get {
                return this.tableProcessInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StartInfoDataTable StartInfo {
            get {
                return this.tableStartInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TargetSiteDataTable TargetSite {
            get {
                return this.tableTargetSite;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtendedPropsDataTable ExtendedProps {
            get {
                return this.tableExtendedProps;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionFieldsDataTable ExceptionFields {
            get {
                return this.tableExceptionFields;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionPropertiesDataTable ExceptionProperties {
            get {
                return this.tableExceptionProperties;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            CriticalErrorDS cln = ((CriticalErrorDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AdditionalInfo"] != null)) {
                    base.Tables.Add(new AdditionalInfoDataTable(ds.Tables["AdditionalInfo"]));
                }
                if ((ds.Tables["Verbs"] != null)) {
                    base.Tables.Add(new VerbsDataTable(ds.Tables["Verbs"]));
                }
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["DiagnosticInfo"] != null)) {
                    base.Tables.Add(new DiagnosticInfoDataTable(ds.Tables["DiagnosticInfo"]));
                }
                if ((ds.Tables["EnvironmentVariables"] != null)) {
                    base.Tables.Add(new EnvironmentVariablesDataTable(ds.Tables["EnvironmentVariables"]));
                }
                if ((ds.Tables["Exception"] != null)) {
                    base.Tables.Add(new ExceptionDataTable(ds.Tables["Exception"]));
                }
                if ((ds.Tables["ExceptionData"] != null)) {
                    base.Tables.Add(new ExceptionDataDataTable(ds.Tables["ExceptionData"]));
                }
                if ((ds.Tables["GenericArguments"] != null)) {
                    base.Tables.Add(new GenericArgumentsDataTable(ds.Tables["GenericArguments"]));
                }
                if ((ds.Tables["HostEnvironment"] != null)) {
                    base.Tables.Add(new HostEnvironmentDataTable(ds.Tables["HostEnvironment"]));
                }
                if ((ds.Tables["InnerExceptions"] != null)) {
                    base.Tables.Add(new InnerExceptionsDataTable(ds.Tables["InnerExceptions"]));
                }
                if ((ds.Tables["LogEntry"] != null)) {
                    base.Tables.Add(new LogEntryDataTable(ds.Tables["LogEntry"]));
                }
                if ((ds.Tables["ProcessInfo"] != null)) {
                    base.Tables.Add(new ProcessInfoDataTable(ds.Tables["ProcessInfo"]));
                }
                if ((ds.Tables["StartInfo"] != null)) {
                    base.Tables.Add(new StartInfoDataTable(ds.Tables["StartInfo"]));
                }
                if ((ds.Tables["TargetSite"] != null)) {
                    base.Tables.Add(new TargetSiteDataTable(ds.Tables["TargetSite"]));
                }
                if ((ds.Tables["ExtendedProps"] != null)) {
                    base.Tables.Add(new ExtendedPropsDataTable(ds.Tables["ExtendedProps"]));
                }
                if ((ds.Tables["ExceptionFields"] != null)) {
                    base.Tables.Add(new ExceptionFieldsDataTable(ds.Tables["ExceptionFields"]));
                }
                if ((ds.Tables["ExceptionProperties"] != null)) {
                    base.Tables.Add(new ExceptionPropertiesDataTable(ds.Tables["ExceptionProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAdditionalInfo = ((AdditionalInfoDataTable)(base.Tables["AdditionalInfo"]));
            if ((initTable == true)) {
                if ((this.tableAdditionalInfo != null)) {
                    this.tableAdditionalInfo.InitVars();
                }
            }
            this.tableVerbs = ((VerbsDataTable)(base.Tables["Verbs"]));
            if ((initTable == true)) {
                if ((this.tableVerbs != null)) {
                    this.tableVerbs.InitVars();
                }
            }
            this.tableCategories = ((CategoriesDataTable)(base.Tables["Categories"]));
            if ((initTable == true)) {
                if ((this.tableCategories != null)) {
                    this.tableCategories.InitVars();
                }
            }
            this.tableDiagnosticInfo = ((DiagnosticInfoDataTable)(base.Tables["DiagnosticInfo"]));
            if ((initTable == true)) {
                if ((this.tableDiagnosticInfo != null)) {
                    this.tableDiagnosticInfo.InitVars();
                }
            }
            this.tableEnvironmentVariables = ((EnvironmentVariablesDataTable)(base.Tables["EnvironmentVariables"]));
            if ((initTable == true)) {
                if ((this.tableEnvironmentVariables != null)) {
                    this.tableEnvironmentVariables.InitVars();
                }
            }
            this.tableException = ((ExceptionDataTable)(base.Tables["Exception"]));
            if ((initTable == true)) {
                if ((this.tableException != null)) {
                    this.tableException.InitVars();
                }
            }
            this.tableExceptionData = ((ExceptionDataDataTable)(base.Tables["ExceptionData"]));
            if ((initTable == true)) {
                if ((this.tableExceptionData != null)) {
                    this.tableExceptionData.InitVars();
                }
            }
            this.tableGenericArguments = ((GenericArgumentsDataTable)(base.Tables["GenericArguments"]));
            if ((initTable == true)) {
                if ((this.tableGenericArguments != null)) {
                    this.tableGenericArguments.InitVars();
                }
            }
            this.tableHostEnvironment = ((HostEnvironmentDataTable)(base.Tables["HostEnvironment"]));
            if ((initTable == true)) {
                if ((this.tableHostEnvironment != null)) {
                    this.tableHostEnvironment.InitVars();
                }
            }
            this.tableInnerExceptions = ((InnerExceptionsDataTable)(base.Tables["InnerExceptions"]));
            if ((initTable == true)) {
                if ((this.tableInnerExceptions != null)) {
                    this.tableInnerExceptions.InitVars();
                }
            }
            this.tableLogEntry = ((LogEntryDataTable)(base.Tables["LogEntry"]));
            if ((initTable == true)) {
                if ((this.tableLogEntry != null)) {
                    this.tableLogEntry.InitVars();
                }
            }
            this.tableProcessInfo = ((ProcessInfoDataTable)(base.Tables["ProcessInfo"]));
            if ((initTable == true)) {
                if ((this.tableProcessInfo != null)) {
                    this.tableProcessInfo.InitVars();
                }
            }
            this.tableStartInfo = ((StartInfoDataTable)(base.Tables["StartInfo"]));
            if ((initTable == true)) {
                if ((this.tableStartInfo != null)) {
                    this.tableStartInfo.InitVars();
                }
            }
            this.tableTargetSite = ((TargetSiteDataTable)(base.Tables["TargetSite"]));
            if ((initTable == true)) {
                if ((this.tableTargetSite != null)) {
                    this.tableTargetSite.InitVars();
                }
            }
            this.tableExtendedProps = ((ExtendedPropsDataTable)(base.Tables["ExtendedProps"]));
            if ((initTable == true)) {
                if ((this.tableExtendedProps != null)) {
                    this.tableExtendedProps.InitVars();
                }
            }
            this.tableExceptionFields = ((ExceptionFieldsDataTable)(base.Tables["ExceptionFields"]));
            if ((initTable == true)) {
                if ((this.tableExceptionFields != null)) {
                    this.tableExceptionFields.InitVars();
                }
            }
            this.tableExceptionProperties = ((ExceptionPropertiesDataTable)(base.Tables["ExceptionProperties"]));
            if ((initTable == true)) {
                if ((this.tableExceptionProperties != null)) {
                    this.tableExceptionProperties.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CriticalErrorDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CriticalErrorDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAdditionalInfo = new AdditionalInfoDataTable();
            base.Tables.Add(this.tableAdditionalInfo);
            this.tableVerbs = new VerbsDataTable();
            base.Tables.Add(this.tableVerbs);
            this.tableCategories = new CategoriesDataTable();
            base.Tables.Add(this.tableCategories);
            this.tableDiagnosticInfo = new DiagnosticInfoDataTable();
            base.Tables.Add(this.tableDiagnosticInfo);
            this.tableEnvironmentVariables = new EnvironmentVariablesDataTable();
            base.Tables.Add(this.tableEnvironmentVariables);
            this.tableException = new ExceptionDataTable();
            base.Tables.Add(this.tableException);
            this.tableExceptionData = new ExceptionDataDataTable();
            base.Tables.Add(this.tableExceptionData);
            this.tableGenericArguments = new GenericArgumentsDataTable();
            base.Tables.Add(this.tableGenericArguments);
            this.tableHostEnvironment = new HostEnvironmentDataTable();
            base.Tables.Add(this.tableHostEnvironment);
            this.tableInnerExceptions = new InnerExceptionsDataTable();
            base.Tables.Add(this.tableInnerExceptions);
            this.tableLogEntry = new LogEntryDataTable();
            base.Tables.Add(this.tableLogEntry);
            this.tableProcessInfo = new ProcessInfoDataTable();
            base.Tables.Add(this.tableProcessInfo);
            this.tableStartInfo = new StartInfoDataTable();
            base.Tables.Add(this.tableStartInfo);
            this.tableTargetSite = new TargetSiteDataTable();
            base.Tables.Add(this.tableTargetSite);
            this.tableExtendedProps = new ExtendedPropsDataTable();
            base.Tables.Add(this.tableExtendedProps);
            this.tableExceptionFields = new ExceptionFieldsDataTable();
            base.Tables.Add(this.tableExceptionFields);
            this.tableExceptionProperties = new ExceptionPropertiesDataTable();
            base.Tables.Add(this.tableExceptionProperties);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdditionalInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerbs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategories() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiagnosticInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnvironmentVariables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeException() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExceptionData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGenericArguments() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHostEnvironment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInnerExceptions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStartInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTargetSite() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtendedProps() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExceptionFields() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExceptionProperties() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            CriticalErrorDS ds = new CriticalErrorDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AdditionalInfoRowChangeEventHandler(object sender, AdditionalInfoRowChangeEvent e);
        
        public delegate void VerbsRowChangeEventHandler(object sender, VerbsRowChangeEvent e);
        
        public delegate void CategoriesRowChangeEventHandler(object sender, CategoriesRowChangeEvent e);
        
        public delegate void DiagnosticInfoRowChangeEventHandler(object sender, DiagnosticInfoRowChangeEvent e);
        
        public delegate void EnvironmentVariablesRowChangeEventHandler(object sender, EnvironmentVariablesRowChangeEvent e);
        
        public delegate void ExceptionRowChangeEventHandler(object sender, ExceptionRowChangeEvent e);
        
        public delegate void ExceptionDataRowChangeEventHandler(object sender, ExceptionDataRowChangeEvent e);
        
        public delegate void GenericArgumentsRowChangeEventHandler(object sender, GenericArgumentsRowChangeEvent e);
        
        public delegate void HostEnvironmentRowChangeEventHandler(object sender, HostEnvironmentRowChangeEvent e);
        
        public delegate void InnerExceptionsRowChangeEventHandler(object sender, InnerExceptionsRowChangeEvent e);
        
        public delegate void LogEntryRowChangeEventHandler(object sender, LogEntryRowChangeEvent e);
        
        public delegate void ProcessInfoRowChangeEventHandler(object sender, ProcessInfoRowChangeEvent e);
        
        public delegate void StartInfoRowChangeEventHandler(object sender, StartInfoRowChangeEvent e);
        
        public delegate void TargetSiteRowChangeEventHandler(object sender, TargetSiteRowChangeEvent e);
        
        public delegate void ExtendedPropsRowChangeEventHandler(object sender, ExtendedPropsRowChangeEvent e);
        
        public delegate void ExceptionFieldsRowChangeEventHandler(object sender, ExceptionFieldsRowChangeEvent e);
        
        public delegate void ExceptionPropertiesRowChangeEventHandler(object sender, ExceptionPropertiesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdditionalInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnvalue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoDataTable() {
                this.TableName = "AdditionalInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdditionalInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoRow this[int index] {
                get {
                    return ((AdditionalInfoRow)(this.Rows[index]));
                }
            }
            
            public event AdditionalInfoRowChangeEventHandler AdditionalInfoRowChanging;
            
            public event AdditionalInfoRowChangeEventHandler AdditionalInfoRowChanged;
            
            public event AdditionalInfoRowChangeEventHandler AdditionalInfoRowDeleting;
            
            public event AdditionalInfoRowChangeEventHandler AdditionalInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdditionalInfoRow(AdditionalInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoRow AddAdditionalInfoRow(System.Guid id, string name, string value) {
                AdditionalInfoRow rowAdditionalInfoRow = ((AdditionalInfoRow)(this.NewRow()));
                rowAdditionalInfoRow.ItemArray = new object[] {
                        id,
                        name,
                        value};
                this.Rows.Add(rowAdditionalInfoRow);
                return rowAdditionalInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AdditionalInfoDataTable cln = ((AdditionalInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AdditionalInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnvalue = base.Columns["value"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnvalue = new System.Data.DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnid.AllowDBNull = false;
                this.columnname.MaxLength = 256;
                this.columnvalue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoRow NewAdditionalInfoRow() {
                return ((AdditionalInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AdditionalInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AdditionalInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdditionalInfoRowChanged != null)) {
                    this.AdditionalInfoRowChanged(this, new AdditionalInfoRowChangeEvent(((AdditionalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdditionalInfoRowChanging != null)) {
                    this.AdditionalInfoRowChanging(this, new AdditionalInfoRowChangeEvent(((AdditionalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdditionalInfoRowDeleted != null)) {
                    this.AdditionalInfoRowDeleted(this, new AdditionalInfoRowChangeEvent(((AdditionalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdditionalInfoRowDeleting != null)) {
                    this.AdditionalInfoRowDeleting(this, new AdditionalInfoRowChangeEvent(((AdditionalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdditionalInfoRow(AdditionalInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdditionalInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerbsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnverb;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsDataTable() {
                this.TableName = "Verbs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerbsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerbsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn verbColumn {
                get {
                    return this.columnverb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow this[int index] {
                get {
                    return ((VerbsRow)(this.Rows[index]));
                }
            }
            
            public event VerbsRowChangeEventHandler VerbsRowChanging;
            
            public event VerbsRowChangeEventHandler VerbsRowChanged;
            
            public event VerbsRowChangeEventHandler VerbsRowDeleting;
            
            public event VerbsRowChangeEventHandler VerbsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerbsRow(VerbsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow AddVerbsRow(System.Guid id, string verb) {
                VerbsRow rowVerbsRow = ((VerbsRow)(this.NewRow()));
                rowVerbsRow.ItemArray = new object[] {
                        id,
                        verb};
                this.Rows.Add(rowVerbsRow);
                return rowVerbsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerbsDataTable cln = ((VerbsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerbsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnverb = base.Columns["verb"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnverb = new System.Data.DataColumn("verb", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnverb);
                this.columnid.AllowDBNull = false;
                this.columnverb.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow NewVerbsRow() {
                return ((VerbsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerbsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerbsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerbsRowChanged != null)) {
                    this.VerbsRowChanged(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerbsRowChanging != null)) {
                    this.VerbsRowChanging(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerbsRowDeleted != null)) {
                    this.VerbsRowDeleted(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerbsRowDeleting != null)) {
                    this.VerbsRowDeleting(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerbsRow(VerbsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerbsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoriesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryCategoriesId;
            
            private System.Data.DataColumn columncategory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesDataTable() {
                this.TableName = "Categories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoriesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoriesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryCategoriesIdColumn {
                get {
                    return this.columnlogEntryCategoriesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn categoryColumn {
                get {
                    return this.columncategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow this[int index] {
                get {
                    return ((CategoriesRow)(this.Rows[index]));
                }
            }
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanging;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleting;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoriesRow(CategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow AddCategoriesRow(System.Guid logEntryCategoriesId, string category) {
                CategoriesRow rowCategoriesRow = ((CategoriesRow)(this.NewRow()));
                rowCategoriesRow.ItemArray = new object[] {
                        logEntryCategoriesId,
                        category};
                this.Rows.Add(rowCategoriesRow);
                return rowCategoriesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CategoriesDataTable cln = ((CategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CategoriesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryCategoriesId = base.Columns["logEntryCategoriesId"];
                this.columncategory = base.Columns["category"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryCategoriesId = new System.Data.DataColumn("logEntryCategoriesId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryCategoriesId);
                this.columncategory = new System.Data.DataColumn("category", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory);
                this.columncategory.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow NewCategoriesRow() {
                return ((CategoriesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoriesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CategoriesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriesRowChanged != null)) {
                    this.CategoriesRowChanged(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriesRowChanging != null)) {
                    this.CategoriesRowChanging(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriesRowDeleted != null)) {
                    this.CategoriesRowDeleted(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriesRowDeleting != null)) {
                    this.CategoriesRowDeleting(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoriesRow(CategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiagnosticInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnclrVersion;
            
            private System.Data.DataColumn columnexecutingAssemblyName;
            
            private System.Data.DataColumn columnversionFileName;
            
            private System.Data.DataColumn columnversionFileDescription;
            
            private System.Data.DataColumn columnversionFileVersion;
            
            private System.Data.DataColumn columnversionProductName;
            
            private System.Data.DataColumn columnversionProductVersion;
            
            private System.Data.DataColumn columnversionCompanyName;
            
            private System.Data.DataColumn columnversionComments;
            
            private System.Data.DataColumn columnversionInternalName;
            
            private System.Data.DataColumn columnversionIsDebug;
            
            private System.Data.DataColumn columnversionIsPatched;
            
            private System.Data.DataColumn columnversionLanguage;
            
            private System.Data.DataColumn columnversionLegalCopyright;
            
            private System.Data.DataColumn columnversionLegalTrademarks;
            
            private System.Data.DataColumn columnprocessInfoId;
            
            private System.Data.DataColumn columnhostEnvironmentId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoDataTable() {
                this.TableName = "DiagnosticInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagnosticInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiagnosticInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn clrVersionColumn {
                get {
                    return this.columnclrVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn executingAssemblyNameColumn {
                get {
                    return this.columnexecutingAssemblyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileNameColumn {
                get {
                    return this.columnversionFileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileDescriptionColumn {
                get {
                    return this.columnversionFileDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileVersionColumn {
                get {
                    return this.columnversionFileVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionProductNameColumn {
                get {
                    return this.columnversionProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionProductVersionColumn {
                get {
                    return this.columnversionProductVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionCompanyNameColumn {
                get {
                    return this.columnversionCompanyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionCommentsColumn {
                get {
                    return this.columnversionComments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionInternalNameColumn {
                get {
                    return this.columnversionInternalName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionIsDebugColumn {
                get {
                    return this.columnversionIsDebug;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionIsPatchedColumn {
                get {
                    return this.columnversionIsPatched;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLanguageColumn {
                get {
                    return this.columnversionLanguage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLegalCopyrightColumn {
                get {
                    return this.columnversionLegalCopyright;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLegalTrademarksColumn {
                get {
                    return this.columnversionLegalTrademarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processInfoIdColumn {
                get {
                    return this.columnprocessInfoId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hostEnvironmentIdColumn {
                get {
                    return this.columnhostEnvironmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow this[int index] {
                get {
                    return ((DiagnosticInfoRow)(this.Rows[index]));
                }
            }
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowChanging;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowChanged;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowDeleting;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiagnosticInfoRow(DiagnosticInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow AddDiagnosticInfoRow(
                        System.Guid id, 
                        string clrVersion, 
                        string executingAssemblyName, 
                        string versionFileName, 
                        string versionFileDescription, 
                        string versionFileVersion, 
                        string versionProductName, 
                        string versionProductVersion, 
                        string versionCompanyName, 
                        string versionComments, 
                        string versionInternalName, 
                        bool versionIsDebug, 
                        bool versionIsPatched, 
                        string versionLanguage, 
                        string versionLegalCopyright, 
                        string versionLegalTrademarks, 
                        System.Guid processInfoId, 
                        System.Guid hostEnvironmentId) {
                DiagnosticInfoRow rowDiagnosticInfoRow = ((DiagnosticInfoRow)(this.NewRow()));
                rowDiagnosticInfoRow.ItemArray = new object[] {
                        id,
                        clrVersion,
                        executingAssemblyName,
                        versionFileName,
                        versionFileDescription,
                        versionFileVersion,
                        versionProductName,
                        versionProductVersion,
                        versionCompanyName,
                        versionComments,
                        versionInternalName,
                        versionIsDebug,
                        versionIsPatched,
                        versionLanguage,
                        versionLegalCopyright,
                        versionLegalTrademarks,
                        processInfoId,
                        hostEnvironmentId};
                this.Rows.Add(rowDiagnosticInfoRow);
                return rowDiagnosticInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow FindByid(System.Guid id) {
                return ((DiagnosticInfoRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DiagnosticInfoDataTable cln = ((DiagnosticInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DiagnosticInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnclrVersion = base.Columns["clrVersion"];
                this.columnexecutingAssemblyName = base.Columns["executingAssemblyName"];
                this.columnversionFileName = base.Columns["versionFileName"];
                this.columnversionFileDescription = base.Columns["versionFileDescription"];
                this.columnversionFileVersion = base.Columns["versionFileVersion"];
                this.columnversionProductName = base.Columns["versionProductName"];
                this.columnversionProductVersion = base.Columns["versionProductVersion"];
                this.columnversionCompanyName = base.Columns["versionCompanyName"];
                this.columnversionComments = base.Columns["versionComments"];
                this.columnversionInternalName = base.Columns["versionInternalName"];
                this.columnversionIsDebug = base.Columns["versionIsDebug"];
                this.columnversionIsPatched = base.Columns["versionIsPatched"];
                this.columnversionLanguage = base.Columns["versionLanguage"];
                this.columnversionLegalCopyright = base.Columns["versionLegalCopyright"];
                this.columnversionLegalTrademarks = base.Columns["versionLegalTrademarks"];
                this.columnprocessInfoId = base.Columns["processInfoId"];
                this.columnhostEnvironmentId = base.Columns["hostEnvironmentId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnclrVersion = new System.Data.DataColumn("clrVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnclrVersion);
                this.columnexecutingAssemblyName = new System.Data.DataColumn("executingAssemblyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecutingAssemblyName);
                this.columnversionFileName = new System.Data.DataColumn("versionFileName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileName);
                this.columnversionFileDescription = new System.Data.DataColumn("versionFileDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileDescription);
                this.columnversionFileVersion = new System.Data.DataColumn("versionFileVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileVersion);
                this.columnversionProductName = new System.Data.DataColumn("versionProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionProductName);
                this.columnversionProductVersion = new System.Data.DataColumn("versionProductVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionProductVersion);
                this.columnversionCompanyName = new System.Data.DataColumn("versionCompanyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionCompanyName);
                this.columnversionComments = new System.Data.DataColumn("versionComments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionComments);
                this.columnversionInternalName = new System.Data.DataColumn("versionInternalName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionInternalName);
                this.columnversionIsDebug = new System.Data.DataColumn("versionIsDebug", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionIsDebug);
                this.columnversionIsPatched = new System.Data.DataColumn("versionIsPatched", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionIsPatched);
                this.columnversionLanguage = new System.Data.DataColumn("versionLanguage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLanguage);
                this.columnversionLegalCopyright = new System.Data.DataColumn("versionLegalCopyright", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLegalCopyright);
                this.columnversionLegalTrademarks = new System.Data.DataColumn("versionLegalTrademarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLegalTrademarks);
                this.columnprocessInfoId = new System.Data.DataColumn("processInfoId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessInfoId);
                this.columnhostEnvironmentId = new System.Data.DataColumn("hostEnvironmentId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhostEnvironmentId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnclrVersion.MaxLength = 256;
                this.columnexecutingAssemblyName.MaxLength = 256;
                this.columnversionFileName.MaxLength = 256;
                this.columnversionFileDescription.MaxLength = 256;
                this.columnversionFileVersion.MaxLength = 256;
                this.columnversionProductName.MaxLength = 256;
                this.columnversionProductVersion.MaxLength = 64;
                this.columnversionCompanyName.MaxLength = 256;
                this.columnversionComments.MaxLength = 256;
                this.columnversionInternalName.MaxLength = 256;
                this.columnversionLanguage.MaxLength = 256;
                this.columnversionLegalCopyright.MaxLength = 256;
                this.columnversionLegalTrademarks.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow NewDiagnosticInfoRow() {
                return ((DiagnosticInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DiagnosticInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DiagnosticInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiagnosticInfoRowChanged != null)) {
                    this.DiagnosticInfoRowChanged(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiagnosticInfoRowChanging != null)) {
                    this.DiagnosticInfoRowChanging(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiagnosticInfoRowDeleted != null)) {
                    this.DiagnosticInfoRowDeleted(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiagnosticInfoRowDeleting != null)) {
                    this.DiagnosticInfoRowDeleting(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiagnosticInfoRow(DiagnosticInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiagnosticInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnvironmentVariablesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnvariableName;
            
            private System.Data.DataColumn columnvariableValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesDataTable() {
                this.TableName = "EnvironmentVariables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironmentVariablesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnvironmentVariablesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn variableNameColumn {
                get {
                    return this.columnvariableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn variableValueColumn {
                get {
                    return this.columnvariableValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow this[int index] {
                get {
                    return ((EnvironmentVariablesRow)(this.Rows[index]));
                }
            }
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowChanging;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowChanged;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowDeleting;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnvironmentVariablesRow(EnvironmentVariablesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow AddEnvironmentVariablesRow(System.Guid id, string variableName, string variableValue) {
                EnvironmentVariablesRow rowEnvironmentVariablesRow = ((EnvironmentVariablesRow)(this.NewRow()));
                rowEnvironmentVariablesRow.ItemArray = new object[] {
                        id,
                        variableName,
                        variableValue};
                this.Rows.Add(rowEnvironmentVariablesRow);
                return rowEnvironmentVariablesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EnvironmentVariablesDataTable cln = ((EnvironmentVariablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EnvironmentVariablesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnvariableName = base.Columns["variableName"];
                this.columnvariableValue = base.Columns["variableValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnvariableName = new System.Data.DataColumn("variableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvariableName);
                this.columnvariableValue = new System.Data.DataColumn("variableValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvariableValue);
                this.columnid.AllowDBNull = false;
                this.columnvariableName.MaxLength = 256;
                this.columnvariableValue.MaxLength = 1024;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow NewEnvironmentVariablesRow() {
                return ((EnvironmentVariablesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EnvironmentVariablesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EnvironmentVariablesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnvironmentVariablesRowChanged != null)) {
                    this.EnvironmentVariablesRowChanged(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnvironmentVariablesRowChanging != null)) {
                    this.EnvironmentVariablesRowChanging(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnvironmentVariablesRowDeleted != null)) {
                    this.EnvironmentVariablesRowDeleted(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnvironmentVariablesRowDeleting != null)) {
                    this.EnvironmentVariablesRowDeleting(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnvironmentVariablesRow(EnvironmentVariablesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnvironmentVariablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columndateTime;
            
            private System.Data.DataColumn columnexceptionType;
            
            private System.Data.DataColumn columnexceptionMessage;
            
            private System.Data.DataColumn columnsource;
            
            private System.Data.DataColumn columnhelpLink;
            
            private System.Data.DataColumn columnexceptionDataId;
            
            private System.Data.DataColumn columntargetSiteId;
            
            private System.Data.DataColumn columnstackTrace;
            
            private System.Data.DataColumn columnadditionalInfoId;
            
            private System.Data.DataColumn columndiagnosticInfoId;
            
            private System.Data.DataColumn columnpropertiesId;
            
            private System.Data.DataColumn columnfieldsId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataTable() {
                this.TableName = "Exception";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateTimeColumn {
                get {
                    return this.columndateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionTypeColumn {
                get {
                    return this.columnexceptionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionMessageColumn {
                get {
                    return this.columnexceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn helpLinkColumn {
                get {
                    return this.columnhelpLink;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionDataIdColumn {
                get {
                    return this.columnexceptionDataId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn targetSiteIdColumn {
                get {
                    return this.columntargetSiteId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stackTraceColumn {
                get {
                    return this.columnstackTrace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn additionalInfoIdColumn {
                get {
                    return this.columnadditionalInfoId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn diagnosticInfoIdColumn {
                get {
                    return this.columndiagnosticInfoId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertiesIdColumn {
                get {
                    return this.columnpropertiesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fieldsIdColumn {
                get {
                    return this.columnfieldsId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow this[int index] {
                get {
                    return ((ExceptionRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionRowChangeEventHandler ExceptionRowChanging;
            
            public event ExceptionRowChangeEventHandler ExceptionRowChanged;
            
            public event ExceptionRowChangeEventHandler ExceptionRowDeleting;
            
            public event ExceptionRowChangeEventHandler ExceptionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionRow(ExceptionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow AddExceptionRow(System.Guid id, string description, System.DateTime dateTime, string exceptionType, string exceptionMessage, string source, string helpLink, System.Guid exceptionDataId, System.Guid targetSiteId, string stackTrace, System.Guid additionalInfoId, System.Guid diagnosticInfoId, System.Guid propertiesId, System.Guid fieldsId) {
                ExceptionRow rowExceptionRow = ((ExceptionRow)(this.NewRow()));
                rowExceptionRow.ItemArray = new object[] {
                        id,
                        description,
                        dateTime,
                        exceptionType,
                        exceptionMessage,
                        source,
                        helpLink,
                        exceptionDataId,
                        targetSiteId,
                        stackTrace,
                        additionalInfoId,
                        diagnosticInfoId,
                        propertiesId,
                        fieldsId};
                this.Rows.Add(rowExceptionRow);
                return rowExceptionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow FindByid(System.Guid id) {
                return ((ExceptionRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionDataTable cln = ((ExceptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columndescription = base.Columns["description"];
                this.columndateTime = base.Columns["dateTime"];
                this.columnexceptionType = base.Columns["exceptionType"];
                this.columnexceptionMessage = base.Columns["exceptionMessage"];
                this.columnsource = base.Columns["source"];
                this.columnhelpLink = base.Columns["helpLink"];
                this.columnexceptionDataId = base.Columns["exceptionDataId"];
                this.columntargetSiteId = base.Columns["targetSiteId"];
                this.columnstackTrace = base.Columns["stackTrace"];
                this.columnadditionalInfoId = base.Columns["additionalInfoId"];
                this.columndiagnosticInfoId = base.Columns["diagnosticInfoId"];
                this.columnpropertiesId = base.Columns["propertiesId"];
                this.columnfieldsId = base.Columns["fieldsId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columndateTime = new System.Data.DataColumn("dateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateTime);
                this.columnexceptionType = new System.Data.DataColumn("exceptionType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionType);
                this.columnexceptionMessage = new System.Data.DataColumn("exceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionMessage);
                this.columnsource = new System.Data.DataColumn("source", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnhelpLink = new System.Data.DataColumn("helpLink", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelpLink);
                this.columnexceptionDataId = new System.Data.DataColumn("exceptionDataId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionDataId);
                this.columntargetSiteId = new System.Data.DataColumn("targetSiteId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntargetSiteId);
                this.columnstackTrace = new System.Data.DataColumn("stackTrace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstackTrace);
                this.columnadditionalInfoId = new System.Data.DataColumn("additionalInfoId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadditionalInfoId);
                this.columndiagnosticInfoId = new System.Data.DataColumn("diagnosticInfoId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndiagnosticInfoId);
                this.columnpropertiesId = new System.Data.DataColumn("propertiesId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertiesId);
                this.columnfieldsId = new System.Data.DataColumn("fieldsId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldsId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columndescription.MaxLength = 256;
                this.columnexceptionType.MaxLength = 256;
                this.columnexceptionMessage.MaxLength = 256;
                this.columnsource.MaxLength = 256;
                this.columnhelpLink.MaxLength = 256;
                this.columnstackTrace.MaxLength = 1024;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow NewExceptionRow() {
                return ((ExceptionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionRowChanged != null)) {
                    this.ExceptionRowChanged(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionRowChanging != null)) {
                    this.ExceptionRowChanging(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionRowDeleted != null)) {
                    this.ExceptionRowDeleted(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionRowDeleting != null)) {
                    this.ExceptionRowDeleting(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionRow(ExceptionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columndataKey;
            
            private System.Data.DataColumn columndataValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataDataTable() {
                this.TableName = "ExceptionData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dataKeyColumn {
                get {
                    return this.columndataKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dataValueColumn {
                get {
                    return this.columndataValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow this[int index] {
                get {
                    return ((ExceptionDataRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowChanging;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowChanged;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowDeleting;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionDataRow(ExceptionDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow AddExceptionDataRow(System.Guid id, string dataKey, string dataValue) {
                ExceptionDataRow rowExceptionDataRow = ((ExceptionDataRow)(this.NewRow()));
                rowExceptionDataRow.ItemArray = new object[] {
                        id,
                        dataKey,
                        dataValue};
                this.Rows.Add(rowExceptionDataRow);
                return rowExceptionDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionDataDataTable cln = ((ExceptionDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columndataKey = base.Columns["dataKey"];
                this.columndataValue = base.Columns["dataValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columndataKey = new System.Data.DataColumn("dataKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndataKey);
                this.columndataValue = new System.Data.DataColumn("dataValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndataValue);
                this.columnid.AllowDBNull = false;
                this.columndataKey.MaxLength = 256;
                this.columndataValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow NewExceptionDataRow() {
                return ((ExceptionDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionDataRowChanged != null)) {
                    this.ExceptionDataRowChanged(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionDataRowChanging != null)) {
                    this.ExceptionDataRowChanging(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionDataRowDeleted != null)) {
                    this.ExceptionDataRowDeleted(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionDataRowDeleting != null)) {
                    this.ExceptionDataRowDeleting(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionDataRow(ExceptionDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GenericArgumentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columntype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsDataTable() {
                this.TableName = "GenericArguments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenericArgumentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GenericArgumentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsRow this[int index] {
                get {
                    return ((GenericArgumentsRow)(this.Rows[index]));
                }
            }
            
            public event GenericArgumentsRowChangeEventHandler GenericArgumentsRowChanging;
            
            public event GenericArgumentsRowChangeEventHandler GenericArgumentsRowChanged;
            
            public event GenericArgumentsRowChangeEventHandler GenericArgumentsRowDeleting;
            
            public event GenericArgumentsRowChangeEventHandler GenericArgumentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGenericArgumentsRow(GenericArgumentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsRow AddGenericArgumentsRow(System.Guid id, string type) {
                GenericArgumentsRow rowGenericArgumentsRow = ((GenericArgumentsRow)(this.NewRow()));
                rowGenericArgumentsRow.ItemArray = new object[] {
                        id,
                        type};
                this.Rows.Add(rowGenericArgumentsRow);
                return rowGenericArgumentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GenericArgumentsDataTable cln = ((GenericArgumentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GenericArgumentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntype = base.Columns["type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columntype.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsRow NewGenericArgumentsRow() {
                return ((GenericArgumentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GenericArgumentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GenericArgumentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenericArgumentsRowChanged != null)) {
                    this.GenericArgumentsRowChanged(this, new GenericArgumentsRowChangeEvent(((GenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenericArgumentsRowChanging != null)) {
                    this.GenericArgumentsRowChanging(this, new GenericArgumentsRowChangeEvent(((GenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenericArgumentsRowDeleted != null)) {
                    this.GenericArgumentsRowDeleted(this, new GenericArgumentsRowChangeEvent(((GenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenericArgumentsRowDeleting != null)) {
                    this.GenericArgumentsRowDeleting(this, new GenericArgumentsRowChangeEvent(((GenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGenericArgumentsRow(GenericArgumentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenericArgumentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HostEnvironmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnosVersion;
            
            private System.Data.DataColumn columnprocessorCount;
            
            private System.Data.DataColumn columncurrentDirectory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentDataTable() {
                this.TableName = "HostEnvironment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HostEnvironmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HostEnvironmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn osVersionColumn {
                get {
                    return this.columnosVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processorCountColumn {
                get {
                    return this.columnprocessorCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn currentDirectoryColumn {
                get {
                    return this.columncurrentDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow this[int index] {
                get {
                    return ((HostEnvironmentRow)(this.Rows[index]));
                }
            }
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowChanging;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowChanged;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowDeleting;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHostEnvironmentRow(HostEnvironmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow AddHostEnvironmentRow(System.Guid id, string osVersion, int processorCount, string currentDirectory) {
                HostEnvironmentRow rowHostEnvironmentRow = ((HostEnvironmentRow)(this.NewRow()));
                rowHostEnvironmentRow.ItemArray = new object[] {
                        id,
                        osVersion,
                        processorCount,
                        currentDirectory};
                this.Rows.Add(rowHostEnvironmentRow);
                return rowHostEnvironmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow FindByid(System.Guid id) {
                return ((HostEnvironmentRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HostEnvironmentDataTable cln = ((HostEnvironmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HostEnvironmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnosVersion = base.Columns["osVersion"];
                this.columnprocessorCount = base.Columns["processorCount"];
                this.columncurrentDirectory = base.Columns["currentDirectory"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnosVersion = new System.Data.DataColumn("osVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnosVersion);
                this.columnprocessorCount = new System.Data.DataColumn("processorCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessorCount);
                this.columncurrentDirectory = new System.Data.DataColumn("currentDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrentDirectory);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnosVersion.MaxLength = 256;
                this.columncurrentDirectory.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow NewHostEnvironmentRow() {
                return ((HostEnvironmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HostEnvironmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HostEnvironmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HostEnvironmentRowChanged != null)) {
                    this.HostEnvironmentRowChanged(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HostEnvironmentRowChanging != null)) {
                    this.HostEnvironmentRowChanging(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HostEnvironmentRowDeleted != null)) {
                    this.HostEnvironmentRowDeleted(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HostEnvironmentRowDeleting != null)) {
                    this.HostEnvironmentRowDeleting(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHostEnvironmentRow(HostEnvironmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HostEnvironmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InnerExceptionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnexceptionId;
            
            private System.Data.DataColumn columninnerExceptionId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsDataTable() {
                this.TableName = "InnerExceptions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InnerExceptionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InnerExceptionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionIdColumn {
                get {
                    return this.columnexceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn innerExceptionIdColumn {
                get {
                    return this.columninnerExceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow this[int index] {
                get {
                    return ((InnerExceptionsRow)(this.Rows[index]));
                }
            }
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowChanging;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowChanged;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowDeleting;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInnerExceptionsRow(InnerExceptionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow AddInnerExceptionsRow(System.Guid exceptionId, System.Guid innerExceptionId) {
                InnerExceptionsRow rowInnerExceptionsRow = ((InnerExceptionsRow)(this.NewRow()));
                rowInnerExceptionsRow.ItemArray = new object[] {
                        exceptionId,
                        innerExceptionId};
                this.Rows.Add(rowInnerExceptionsRow);
                return rowInnerExceptionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InnerExceptionsDataTable cln = ((InnerExceptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InnerExceptionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexceptionId = base.Columns["exceptionId"];
                this.columninnerExceptionId = base.Columns["innerExceptionId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexceptionId = new System.Data.DataColumn("exceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionId);
                this.columninnerExceptionId = new System.Data.DataColumn("innerExceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninnerExceptionId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow NewInnerExceptionsRow() {
                return ((InnerExceptionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InnerExceptionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InnerExceptionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InnerExceptionsRowChanged != null)) {
                    this.InnerExceptionsRowChanged(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InnerExceptionsRowChanging != null)) {
                    this.InnerExceptionsRowChanging(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InnerExceptionsRowDeleted != null)) {
                    this.InnerExceptionsRowDeleted(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InnerExceptionsRowDeleting != null)) {
                    this.InnerExceptionsRowDeleting(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInnerExceptionsRow(InnerExceptionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InnerExceptionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogEntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnsiteCode;
            
            private System.Data.DataColumn columnissueTag;
            
            private System.Data.DataColumn columnactivityId;
            
            private System.Data.DataColumn columnappDomainName;
            
            private System.Data.DataColumn columnerrorMessages;
            
            private System.Data.DataColumn columneventId;
            
            private System.Data.DataColumn columnloggedSeverity;
            
            private System.Data.DataColumn columnmachineName;
            
            private System.Data.DataColumn columnmanagedThreadName;
            
            private System.Data.DataColumn columnpriority;
            
            private System.Data.DataColumn columnprocessId;
            
            private System.Data.DataColumn columnprocessName;
            
            private System.Data.DataColumn columnseverity;
            
            private System.Data.DataColumn columntimeStamp;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columnwin32ThreadId;
            
            private System.Data.DataColumn columncategoriesId;
            
            private System.Data.DataColumn columnexceptionId;
            
            private System.Data.DataColumn columnextendedPropertiesId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryDataTable() {
                this.TableName = "LogEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogEntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogEntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn siteCodeColumn {
                get {
                    return this.columnsiteCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn issueTagColumn {
                get {
                    return this.columnissueTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn activityIdColumn {
                get {
                    return this.columnactivityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn appDomainNameColumn {
                get {
                    return this.columnappDomainName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn errorMessagesColumn {
                get {
                    return this.columnerrorMessages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn eventIdColumn {
                get {
                    return this.columneventId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loggedSeverityColumn {
                get {
                    return this.columnloggedSeverity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn machineNameColumn {
                get {
                    return this.columnmachineName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn managedThreadNameColumn {
                get {
                    return this.columnmanagedThreadName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn priorityColumn {
                get {
                    return this.columnpriority;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processIdColumn {
                get {
                    return this.columnprocessId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processNameColumn {
                get {
                    return this.columnprocessName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn severityColumn {
                get {
                    return this.columnseverity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeStampColumn {
                get {
                    return this.columntimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn win32ThreadIdColumn {
                get {
                    return this.columnwin32ThreadId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn categoriesIdColumn {
                get {
                    return this.columncategoriesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionIdColumn {
                get {
                    return this.columnexceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn extendedPropertiesIdColumn {
                get {
                    return this.columnextendedPropertiesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow this[int index] {
                get {
                    return ((LogEntryRow)(this.Rows[index]));
                }
            }
            
            public event LogEntryRowChangeEventHandler LogEntryRowChanging;
            
            public event LogEntryRowChangeEventHandler LogEntryRowChanged;
            
            public event LogEntryRowChangeEventHandler LogEntryRowDeleting;
            
            public event LogEntryRowChangeEventHandler LogEntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogEntryRow(LogEntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow AddLogEntryRow(
                        System.Guid id, 
                        string siteCode, 
                        System.Guid issueTag, 
                        System.Guid activityId, 
                        string appDomainName, 
                        string errorMessages, 
                        int eventId, 
                        string loggedSeverity, 
                        string machineName, 
                        string managedThreadName, 
                        int priority, 
                        int processId, 
                        string processName, 
                        string severity, 
                        System.DateTime timeStamp, 
                        string title, 
                        int win32ThreadId, 
                        System.Guid categoriesId, 
                        System.Guid exceptionId, 
                        System.Guid extendedPropertiesId) {
                LogEntryRow rowLogEntryRow = ((LogEntryRow)(this.NewRow()));
                rowLogEntryRow.ItemArray = new object[] {
                        id,
                        siteCode,
                        issueTag,
                        activityId,
                        appDomainName,
                        errorMessages,
                        eventId,
                        loggedSeverity,
                        machineName,
                        managedThreadName,
                        priority,
                        processId,
                        processName,
                        severity,
                        timeStamp,
                        title,
                        win32ThreadId,
                        categoriesId,
                        exceptionId,
                        extendedPropertiesId};
                this.Rows.Add(rowLogEntryRow);
                return rowLogEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow FindByid(System.Guid id) {
                return ((LogEntryRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LogEntryDataTable cln = ((LogEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LogEntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsiteCode = base.Columns["siteCode"];
                this.columnissueTag = base.Columns["issueTag"];
                this.columnactivityId = base.Columns["activityId"];
                this.columnappDomainName = base.Columns["appDomainName"];
                this.columnerrorMessages = base.Columns["errorMessages"];
                this.columneventId = base.Columns["eventId"];
                this.columnloggedSeverity = base.Columns["loggedSeverity"];
                this.columnmachineName = base.Columns["machineName"];
                this.columnmanagedThreadName = base.Columns["managedThreadName"];
                this.columnpriority = base.Columns["priority"];
                this.columnprocessId = base.Columns["processId"];
                this.columnprocessName = base.Columns["processName"];
                this.columnseverity = base.Columns["severity"];
                this.columntimeStamp = base.Columns["timeStamp"];
                this.columntitle = base.Columns["title"];
                this.columnwin32ThreadId = base.Columns["win32ThreadId"];
                this.columncategoriesId = base.Columns["categoriesId"];
                this.columnexceptionId = base.Columns["exceptionId"];
                this.columnextendedPropertiesId = base.Columns["extendedPropertiesId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsiteCode = new System.Data.DataColumn("siteCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsiteCode);
                this.columnissueTag = new System.Data.DataColumn("issueTag", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnissueTag);
                this.columnactivityId = new System.Data.DataColumn("activityId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactivityId);
                this.columnappDomainName = new System.Data.DataColumn("appDomainName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnappDomainName);
                this.columnerrorMessages = new System.Data.DataColumn("errorMessages", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnerrorMessages);
                this.columneventId = new System.Data.DataColumn("eventId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columneventId);
                this.columnloggedSeverity = new System.Data.DataColumn("loggedSeverity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnloggedSeverity);
                this.columnmachineName = new System.Data.DataColumn("machineName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmachineName);
                this.columnmanagedThreadName = new System.Data.DataColumn("managedThreadName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagedThreadName);
                this.columnpriority = new System.Data.DataColumn("priority", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriority);
                this.columnprocessId = new System.Data.DataColumn("processId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessId);
                this.columnprocessName = new System.Data.DataColumn("processName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessName);
                this.columnseverity = new System.Data.DataColumn("severity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnseverity);
                this.columntimeStamp = new System.Data.DataColumn("timeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntimeStamp);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnwin32ThreadId = new System.Data.DataColumn("win32ThreadId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwin32ThreadId);
                this.columncategoriesId = new System.Data.DataColumn("categoriesId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncategoriesId);
                this.columnexceptionId = new System.Data.DataColumn("exceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionId);
                this.columnextendedPropertiesId = new System.Data.DataColumn("extendedPropertiesId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnextendedPropertiesId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnsiteCode.MaxLength = 32;
                this.columnappDomainName.MaxLength = 256;
                this.columnerrorMessages.MaxLength = 256;
                this.columnloggedSeverity.MaxLength = 64;
                this.columnmachineName.MaxLength = 64;
                this.columnmanagedThreadName.MaxLength = 256;
                this.columnprocessName.MaxLength = 256;
                this.columnseverity.MaxLength = 64;
                this.columntitle.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow NewLogEntryRow() {
                return ((LogEntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LogEntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LogEntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogEntryRowChanged != null)) {
                    this.LogEntryRowChanged(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogEntryRowChanging != null)) {
                    this.LogEntryRowChanging(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogEntryRowDeleted != null)) {
                    this.LogEntryRowDeleted(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogEntryRowDeleting != null)) {
                    this.LogEntryRowDeleting(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogEntryRow(LogEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnstartTime;
            
            private System.Data.DataColumn columnprocessId;
            
            private System.Data.DataColumn columnterminalServicesSessionId;
            
            private System.Data.DataColumn columnnonPagedSystemMemorySize;
            
            private System.Data.DataColumn columnpagedMemorySize;
            
            private System.Data.DataColumn columnpagedSystemMemory;
            
            private System.Data.DataColumn columnpeakPagedMemorySize;
            
            private System.Data.DataColumn columnpeakVirtualMemorySize;
            
            private System.Data.DataColumn columnpeakWorkingSet;
            
            private System.Data.DataColumn columnprivateMemorySize;
            
            private System.Data.DataColumn columnvirtualMemorySize;
            
            private System.Data.DataColumn columnworkingSet;
            
            private System.Data.DataColumn columntotalProcessorTimeDays;
            
            private System.Data.DataColumn columntotalProcessorTimeHours;
            
            private System.Data.DataColumn columntotalProcessorTimeMinutes;
            
            private System.Data.DataColumn columntotalProcessorTimeSeconds;
            
            private System.Data.DataColumn columntotalProcessorTimeFraction;
            
            private System.Data.DataColumn columnuserProcessorTimeDays;
            
            private System.Data.DataColumn columnuserProcessorTimeHours;
            
            private System.Data.DataColumn columnuserProcessorTimeMinutes;
            
            private System.Data.DataColumn columnuserProcessorTimeSeconds;
            
            private System.Data.DataColumn columnuserProcessorTimeFraction;
            
            private System.Data.DataColumn columnthreadCount;
            
            private System.Data.DataColumn columnstartInfoId;
            
            private System.Data.DataColumn columnprocessEnvironmentId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoDataTable() {
                this.TableName = "ProcessInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startTimeColumn {
                get {
                    return this.columnstartTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processIdColumn {
                get {
                    return this.columnprocessId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn terminalServicesSessionIdColumn {
                get {
                    return this.columnterminalServicesSessionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nonPagedSystemMemorySizeColumn {
                get {
                    return this.columnnonPagedSystemMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pagedMemorySizeColumn {
                get {
                    return this.columnpagedMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pagedSystemMemoryColumn {
                get {
                    return this.columnpagedSystemMemory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakPagedMemorySizeColumn {
                get {
                    return this.columnpeakPagedMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakVirtualMemorySizeColumn {
                get {
                    return this.columnpeakVirtualMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakWorkingSetColumn {
                get {
                    return this.columnpeakWorkingSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn privateMemorySizeColumn {
                get {
                    return this.columnprivateMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn virtualMemorySizeColumn {
                get {
                    return this.columnvirtualMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn workingSetColumn {
                get {
                    return this.columnworkingSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeDaysColumn {
                get {
                    return this.columntotalProcessorTimeDays;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeHoursColumn {
                get {
                    return this.columntotalProcessorTimeHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeMinutesColumn {
                get {
                    return this.columntotalProcessorTimeMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeSecondsColumn {
                get {
                    return this.columntotalProcessorTimeSeconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeFractionColumn {
                get {
                    return this.columntotalProcessorTimeFraction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeDaysColumn {
                get {
                    return this.columnuserProcessorTimeDays;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeHoursColumn {
                get {
                    return this.columnuserProcessorTimeHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeMinutesColumn {
                get {
                    return this.columnuserProcessorTimeMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeSecondsColumn {
                get {
                    return this.columnuserProcessorTimeSeconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeFractionColumn {
                get {
                    return this.columnuserProcessorTimeFraction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn threadCountColumn {
                get {
                    return this.columnthreadCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startInfoIdColumn {
                get {
                    return this.columnstartInfoId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processEnvironmentIdColumn {
                get {
                    return this.columnprocessEnvironmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow this[int index] {
                get {
                    return ((ProcessInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowChanging;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowChanged;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowDeleting;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessInfoRow(ProcessInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow AddProcessInfoRow(
                        System.Guid id, 
                        System.DateTime startTime, 
                        int processId, 
                        int terminalServicesSessionId, 
                        long nonPagedSystemMemorySize, 
                        long pagedMemorySize, 
                        long pagedSystemMemory, 
                        long peakPagedMemorySize, 
                        long peakVirtualMemorySize, 
                        long peakWorkingSet, 
                        long privateMemorySize, 
                        long virtualMemorySize, 
                        long workingSet, 
                        int totalProcessorTimeDays, 
                        int totalProcessorTimeHours, 
                        int totalProcessorTimeMinutes, 
                        int totalProcessorTimeSeconds, 
                        int totalProcessorTimeFraction, 
                        int userProcessorTimeDays, 
                        int userProcessorTimeHours, 
                        int userProcessorTimeMinutes, 
                        int userProcessorTimeSeconds, 
                        int userProcessorTimeFraction, 
                        int threadCount, 
                        System.Guid startInfoId, 
                        System.Guid processEnvironmentId) {
                ProcessInfoRow rowProcessInfoRow = ((ProcessInfoRow)(this.NewRow()));
                rowProcessInfoRow.ItemArray = new object[] {
                        id,
                        startTime,
                        processId,
                        terminalServicesSessionId,
                        nonPagedSystemMemorySize,
                        pagedMemorySize,
                        pagedSystemMemory,
                        peakPagedMemorySize,
                        peakVirtualMemorySize,
                        peakWorkingSet,
                        privateMemorySize,
                        virtualMemorySize,
                        workingSet,
                        totalProcessorTimeDays,
                        totalProcessorTimeHours,
                        totalProcessorTimeMinutes,
                        totalProcessorTimeSeconds,
                        totalProcessorTimeFraction,
                        userProcessorTimeDays,
                        userProcessorTimeHours,
                        userProcessorTimeMinutes,
                        userProcessorTimeSeconds,
                        userProcessorTimeFraction,
                        threadCount,
                        startInfoId,
                        processEnvironmentId};
                this.Rows.Add(rowProcessInfoRow);
                return rowProcessInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow FindByid(System.Guid id) {
                return ((ProcessInfoRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProcessInfoDataTable cln = ((ProcessInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProcessInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnstartTime = base.Columns["startTime"];
                this.columnprocessId = base.Columns["processId"];
                this.columnterminalServicesSessionId = base.Columns["terminalServicesSessionId"];
                this.columnnonPagedSystemMemorySize = base.Columns["nonPagedSystemMemorySize"];
                this.columnpagedMemorySize = base.Columns["pagedMemorySize"];
                this.columnpagedSystemMemory = base.Columns["pagedSystemMemory"];
                this.columnpeakPagedMemorySize = base.Columns["peakPagedMemorySize"];
                this.columnpeakVirtualMemorySize = base.Columns["peakVirtualMemorySize"];
                this.columnpeakWorkingSet = base.Columns["peakWorkingSet"];
                this.columnprivateMemorySize = base.Columns["privateMemorySize"];
                this.columnvirtualMemorySize = base.Columns["virtualMemorySize"];
                this.columnworkingSet = base.Columns["workingSet"];
                this.columntotalProcessorTimeDays = base.Columns["totalProcessorTimeDays"];
                this.columntotalProcessorTimeHours = base.Columns["totalProcessorTimeHours"];
                this.columntotalProcessorTimeMinutes = base.Columns["totalProcessorTimeMinutes"];
                this.columntotalProcessorTimeSeconds = base.Columns["totalProcessorTimeSeconds"];
                this.columntotalProcessorTimeFraction = base.Columns["totalProcessorTimeFraction"];
                this.columnuserProcessorTimeDays = base.Columns["userProcessorTimeDays"];
                this.columnuserProcessorTimeHours = base.Columns["userProcessorTimeHours"];
                this.columnuserProcessorTimeMinutes = base.Columns["userProcessorTimeMinutes"];
                this.columnuserProcessorTimeSeconds = base.Columns["userProcessorTimeSeconds"];
                this.columnuserProcessorTimeFraction = base.Columns["userProcessorTimeFraction"];
                this.columnthreadCount = base.Columns["threadCount"];
                this.columnstartInfoId = base.Columns["startInfoId"];
                this.columnprocessEnvironmentId = base.Columns["processEnvironmentId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnstartTime = new System.Data.DataColumn("startTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartTime);
                this.columnprocessId = new System.Data.DataColumn("processId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessId);
                this.columnterminalServicesSessionId = new System.Data.DataColumn("terminalServicesSessionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterminalServicesSessionId);
                this.columnnonPagedSystemMemorySize = new System.Data.DataColumn("nonPagedSystemMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnonPagedSystemMemorySize);
                this.columnpagedMemorySize = new System.Data.DataColumn("pagedMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpagedMemorySize);
                this.columnpagedSystemMemory = new System.Data.DataColumn("pagedSystemMemory", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpagedSystemMemory);
                this.columnpeakPagedMemorySize = new System.Data.DataColumn("peakPagedMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakPagedMemorySize);
                this.columnpeakVirtualMemorySize = new System.Data.DataColumn("peakVirtualMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakVirtualMemorySize);
                this.columnpeakWorkingSet = new System.Data.DataColumn("peakWorkingSet", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakWorkingSet);
                this.columnprivateMemorySize = new System.Data.DataColumn("privateMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprivateMemorySize);
                this.columnvirtualMemorySize = new System.Data.DataColumn("virtualMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvirtualMemorySize);
                this.columnworkingSet = new System.Data.DataColumn("workingSet", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkingSet);
                this.columntotalProcessorTimeDays = new System.Data.DataColumn("totalProcessorTimeDays", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeDays);
                this.columntotalProcessorTimeHours = new System.Data.DataColumn("totalProcessorTimeHours", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeHours);
                this.columntotalProcessorTimeMinutes = new System.Data.DataColumn("totalProcessorTimeMinutes", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeMinutes);
                this.columntotalProcessorTimeSeconds = new System.Data.DataColumn("totalProcessorTimeSeconds", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeSeconds);
                this.columntotalProcessorTimeFraction = new System.Data.DataColumn("totalProcessorTimeFraction", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeFraction);
                this.columnuserProcessorTimeDays = new System.Data.DataColumn("userProcessorTimeDays", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeDays);
                this.columnuserProcessorTimeHours = new System.Data.DataColumn("userProcessorTimeHours", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeHours);
                this.columnuserProcessorTimeMinutes = new System.Data.DataColumn("userProcessorTimeMinutes", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeMinutes);
                this.columnuserProcessorTimeSeconds = new System.Data.DataColumn("userProcessorTimeSeconds", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeSeconds);
                this.columnuserProcessorTimeFraction = new System.Data.DataColumn("userProcessorTimeFraction", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeFraction);
                this.columnthreadCount = new System.Data.DataColumn("threadCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnthreadCount);
                this.columnstartInfoId = new System.Data.DataColumn("startInfoId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartInfoId);
                this.columnprocessEnvironmentId = new System.Data.DataColumn("processEnvironmentId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessEnvironmentId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow NewProcessInfoRow() {
                return ((ProcessInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProcessInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProcessInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessInfoRowChanged != null)) {
                    this.ProcessInfoRowChanged(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessInfoRowChanging != null)) {
                    this.ProcessInfoRowChanging(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessInfoRowDeleted != null)) {
                    this.ProcessInfoRowDeleted(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessInfoRowDeleting != null)) {
                    this.ProcessInfoRowDeleting(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessInfoRow(ProcessInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StartInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnarguments;
            
            private System.Data.DataColumn columndomain;
            
            private System.Data.DataColumn columnverb;
            
            private System.Data.DataColumn columnuseShellExecute;
            
            private System.Data.DataColumn columnworkingDirectory;
            
            private System.Data.DataColumn columnstartInfoEnvironmentId;
            
            private System.Data.DataColumn columnverbsId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoDataTable() {
                this.TableName = "StartInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StartInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StartInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn argumentsColumn {
                get {
                    return this.columnarguments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn domainColumn {
                get {
                    return this.columndomain;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn verbColumn {
                get {
                    return this.columnverb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn useShellExecuteColumn {
                get {
                    return this.columnuseShellExecute;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn workingDirectoryColumn {
                get {
                    return this.columnworkingDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startInfoEnvironmentIdColumn {
                get {
                    return this.columnstartInfoEnvironmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn verbsIdColumn {
                get {
                    return this.columnverbsId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow this[int index] {
                get {
                    return ((StartInfoRow)(this.Rows[index]));
                }
            }
            
            public event StartInfoRowChangeEventHandler StartInfoRowChanging;
            
            public event StartInfoRowChangeEventHandler StartInfoRowChanged;
            
            public event StartInfoRowChangeEventHandler StartInfoRowDeleting;
            
            public event StartInfoRowChangeEventHandler StartInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStartInfoRow(StartInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow AddStartInfoRow(System.Guid id, string fileName, string arguments, string domain, string verb, bool useShellExecute, string workingDirectory, System.Guid startInfoEnvironmentId, System.Guid verbsId) {
                StartInfoRow rowStartInfoRow = ((StartInfoRow)(this.NewRow()));
                rowStartInfoRow.ItemArray = new object[] {
                        id,
                        fileName,
                        arguments,
                        domain,
                        verb,
                        useShellExecute,
                        workingDirectory,
                        startInfoEnvironmentId,
                        verbsId};
                this.Rows.Add(rowStartInfoRow);
                return rowStartInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow FindByid(System.Guid id) {
                return ((StartInfoRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StartInfoDataTable cln = ((StartInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StartInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnfileName = base.Columns["fileName"];
                this.columnarguments = base.Columns["arguments"];
                this.columndomain = base.Columns["domain"];
                this.columnverb = base.Columns["verb"];
                this.columnuseShellExecute = base.Columns["useShellExecute"];
                this.columnworkingDirectory = base.Columns["workingDirectory"];
                this.columnstartInfoEnvironmentId = base.Columns["startInfoEnvironmentId"];
                this.columnverbsId = base.Columns["verbsId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfileName);
                this.columnarguments = new System.Data.DataColumn("arguments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarguments);
                this.columndomain = new System.Data.DataColumn("domain", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndomain);
                this.columnverb = new System.Data.DataColumn("verb", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnverb);
                this.columnuseShellExecute = new System.Data.DataColumn("useShellExecute", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuseShellExecute);
                this.columnworkingDirectory = new System.Data.DataColumn("workingDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkingDirectory);
                this.columnstartInfoEnvironmentId = new System.Data.DataColumn("startInfoEnvironmentId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartInfoEnvironmentId);
                this.columnverbsId = new System.Data.DataColumn("verbsId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnverbsId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnfileName.MaxLength = 256;
                this.columnarguments.MaxLength = 256;
                this.columndomain.MaxLength = 256;
                this.columnverb.MaxLength = 256;
                this.columnworkingDirectory.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow NewStartInfoRow() {
                return ((StartInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StartInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StartInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StartInfoRowChanged != null)) {
                    this.StartInfoRowChanged(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StartInfoRowChanging != null)) {
                    this.StartInfoRowChanging(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StartInfoRowDeleted != null)) {
                    this.StartInfoRowDeleted(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StartInfoRowDeleting != null)) {
                    this.StartInfoRowDeleting(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStartInfoRow(StartInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StartInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TargetSiteDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columncallingConvention;
            
            private System.Data.DataColumn columndeclaringType;
            
            private System.Data.DataColumn columnmemberType;
            
            private System.Data.DataColumn columntoken;
            
            private System.Data.DataColumn columndeclaringModule;
            
            private System.Data.DataColumn columngenericArgumentsId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteDataTable() {
                this.TableName = "TargetSite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetSiteDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TargetSiteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn callingConventionColumn {
                get {
                    return this.columncallingConvention;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn declaringTypeColumn {
                get {
                    return this.columndeclaringType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn memberTypeColumn {
                get {
                    return this.columnmemberType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn declaringModuleColumn {
                get {
                    return this.columndeclaringModule;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn genericArgumentsIdColumn {
                get {
                    return this.columngenericArgumentsId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRow this[int index] {
                get {
                    return ((TargetSiteRow)(this.Rows[index]));
                }
            }
            
            public event TargetSiteRowChangeEventHandler TargetSiteRowChanging;
            
            public event TargetSiteRowChangeEventHandler TargetSiteRowChanged;
            
            public event TargetSiteRowChangeEventHandler TargetSiteRowDeleting;
            
            public event TargetSiteRowChangeEventHandler TargetSiteRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTargetSiteRow(TargetSiteRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRow AddTargetSiteRow(System.Guid id, string name, string callingConvention, string declaringType, string memberType, string token, string declaringModule, System.Guid genericArgumentsId) {
                TargetSiteRow rowTargetSiteRow = ((TargetSiteRow)(this.NewRow()));
                rowTargetSiteRow.ItemArray = new object[] {
                        id,
                        name,
                        callingConvention,
                        declaringType,
                        memberType,
                        token,
                        declaringModule,
                        genericArgumentsId};
                this.Rows.Add(rowTargetSiteRow);
                return rowTargetSiteRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRow FindByid(System.Guid id) {
                return ((TargetSiteRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TargetSiteDataTable cln = ((TargetSiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TargetSiteDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columncallingConvention = base.Columns["callingConvention"];
                this.columndeclaringType = base.Columns["declaringType"];
                this.columnmemberType = base.Columns["memberType"];
                this.columntoken = base.Columns["token"];
                this.columndeclaringModule = base.Columns["declaringModule"];
                this.columngenericArgumentsId = base.Columns["genericArgumentsId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columncallingConvention = new System.Data.DataColumn("callingConvention", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncallingConvention);
                this.columndeclaringType = new System.Data.DataColumn("declaringType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeclaringType);
                this.columnmemberType = new System.Data.DataColumn("memberType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemberType);
                this.columntoken = new System.Data.DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntoken);
                this.columndeclaringModule = new System.Data.DataColumn("declaringModule", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeclaringModule);
                this.columngenericArgumentsId = new System.Data.DataColumn("genericArgumentsId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngenericArgumentsId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnname.MaxLength = 256;
                this.columncallingConvention.MaxLength = 256;
                this.columndeclaringType.MaxLength = 256;
                this.columnmemberType.MaxLength = 256;
                this.columntoken.MaxLength = 20;
                this.columndeclaringModule.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRow NewTargetSiteRow() {
                return ((TargetSiteRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TargetSiteRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TargetSiteRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TargetSiteRowChanged != null)) {
                    this.TargetSiteRowChanged(this, new TargetSiteRowChangeEvent(((TargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TargetSiteRowChanging != null)) {
                    this.TargetSiteRowChanging(this, new TargetSiteRowChangeEvent(((TargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TargetSiteRowDeleted != null)) {
                    this.TargetSiteRowDeleted(this, new TargetSiteRowChangeEvent(((TargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TargetSiteRowDeleting != null)) {
                    this.TargetSiteRowDeleting(this, new TargetSiteRowChangeEvent(((TargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTargetSiteRow(TargetSiteRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TargetSiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtendedPropsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryExtendedPropertiesId;
            
            private System.Data.DataColumn columnpropertyKey;
            
            private System.Data.DataColumn columnpropertyValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsDataTable() {
                this.TableName = "ExtendedProps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtendedPropsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtendedPropsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryExtendedPropertiesIdColumn {
                get {
                    return this.columnlogEntryExtendedPropertiesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyKeyColumn {
                get {
                    return this.columnpropertyKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyValueColumn {
                get {
                    return this.columnpropertyValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow this[int index] {
                get {
                    return ((ExtendedPropsRow)(this.Rows[index]));
                }
            }
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowChanging;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowChanged;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowDeleting;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtendedPropsRow(ExtendedPropsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow AddExtendedPropsRow(System.Guid logEntryExtendedPropertiesId, string propertyKey, string propertyValue) {
                ExtendedPropsRow rowExtendedPropsRow = ((ExtendedPropsRow)(this.NewRow()));
                rowExtendedPropsRow.ItemArray = new object[] {
                        logEntryExtendedPropertiesId,
                        propertyKey,
                        propertyValue};
                this.Rows.Add(rowExtendedPropsRow);
                return rowExtendedPropsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtendedPropsDataTable cln = ((ExtendedPropsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtendedPropsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryExtendedPropertiesId = base.Columns["logEntryExtendedPropertiesId"];
                this.columnpropertyKey = base.Columns["propertyKey"];
                this.columnpropertyValue = base.Columns["propertyValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryExtendedPropertiesId = new System.Data.DataColumn("logEntryExtendedPropertiesId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryExtendedPropertiesId);
                this.columnpropertyKey = new System.Data.DataColumn("propertyKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyKey);
                this.columnpropertyValue = new System.Data.DataColumn("propertyValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyValue);
                this.columnpropertyKey.MaxLength = 256;
                this.columnpropertyValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow NewExtendedPropsRow() {
                return ((ExtendedPropsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtendedPropsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtendedPropsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtendedPropsRowChanged != null)) {
                    this.ExtendedPropsRowChanged(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtendedPropsRowChanging != null)) {
                    this.ExtendedPropsRowChanging(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtendedPropsRowDeleted != null)) {
                    this.ExtendedPropsRowDeleted(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtendedPropsRowDeleting != null)) {
                    this.ExtendedPropsRowDeleting(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtendedPropsRow(ExtendedPropsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtendedPropsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionFieldsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnfieldName;
            
            private System.Data.DataColumn columnfieldValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsDataTable() {
                this.TableName = "ExceptionFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionFieldsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionFieldsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fieldNameColumn {
                get {
                    return this.columnfieldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fieldValueColumn {
                get {
                    return this.columnfieldValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsRow this[int index] {
                get {
                    return ((ExceptionFieldsRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionFieldsRowChangeEventHandler ExceptionFieldsRowChanging;
            
            public event ExceptionFieldsRowChangeEventHandler ExceptionFieldsRowChanged;
            
            public event ExceptionFieldsRowChangeEventHandler ExceptionFieldsRowDeleting;
            
            public event ExceptionFieldsRowChangeEventHandler ExceptionFieldsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionFieldsRow(ExceptionFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsRow AddExceptionFieldsRow(System.Guid id, string fieldName, string fieldValue) {
                ExceptionFieldsRow rowExceptionFieldsRow = ((ExceptionFieldsRow)(this.NewRow()));
                rowExceptionFieldsRow.ItemArray = new object[] {
                        id,
                        fieldName,
                        fieldValue};
                this.Rows.Add(rowExceptionFieldsRow);
                return rowExceptionFieldsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionFieldsDataTable cln = ((ExceptionFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionFieldsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnfieldName = base.Columns["fieldName"];
                this.columnfieldValue = base.Columns["fieldValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnfieldName = new System.Data.DataColumn("fieldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldName);
                this.columnfieldValue = new System.Data.DataColumn("fieldValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldValue);
                this.columnfieldName.MaxLength = 256;
                this.columnfieldValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsRow NewExceptionFieldsRow() {
                return ((ExceptionFieldsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionFieldsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionFieldsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionFieldsRowChanged != null)) {
                    this.ExceptionFieldsRowChanged(this, new ExceptionFieldsRowChangeEvent(((ExceptionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionFieldsRowChanging != null)) {
                    this.ExceptionFieldsRowChanging(this, new ExceptionFieldsRowChangeEvent(((ExceptionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionFieldsRowDeleted != null)) {
                    this.ExceptionFieldsRowDeleted(this, new ExceptionFieldsRowChangeEvent(((ExceptionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionFieldsRowDeleting != null)) {
                    this.ExceptionFieldsRowDeleting(this, new ExceptionFieldsRowChangeEvent(((ExceptionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionFieldsRow(ExceptionFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionPropertiesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnpropertyName;
            
            private System.Data.DataColumn columnpropertyValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesDataTable() {
                this.TableName = "ExceptionProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionPropertiesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionPropertiesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyNameColumn {
                get {
                    return this.columnpropertyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyValueColumn {
                get {
                    return this.columnpropertyValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesRow this[int index] {
                get {
                    return ((ExceptionPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionPropertiesRowChangeEventHandler ExceptionPropertiesRowChanging;
            
            public event ExceptionPropertiesRowChangeEventHandler ExceptionPropertiesRowChanged;
            
            public event ExceptionPropertiesRowChangeEventHandler ExceptionPropertiesRowDeleting;
            
            public event ExceptionPropertiesRowChangeEventHandler ExceptionPropertiesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionPropertiesRow(ExceptionPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesRow AddExceptionPropertiesRow(System.Guid id, string propertyName, string propertyValue) {
                ExceptionPropertiesRow rowExceptionPropertiesRow = ((ExceptionPropertiesRow)(this.NewRow()));
                rowExceptionPropertiesRow.ItemArray = new object[] {
                        id,
                        propertyName,
                        propertyValue};
                this.Rows.Add(rowExceptionPropertiesRow);
                return rowExceptionPropertiesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionPropertiesDataTable cln = ((ExceptionPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionPropertiesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnpropertyName = base.Columns["propertyName"];
                this.columnpropertyValue = base.Columns["propertyValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnpropertyName = new System.Data.DataColumn("propertyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyName);
                this.columnpropertyValue = new System.Data.DataColumn("propertyValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyValue);
                this.columnpropertyName.MaxLength = 256;
                this.columnpropertyValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesRow NewExceptionPropertiesRow() {
                return ((ExceptionPropertiesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionPropertiesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionPropertiesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionPropertiesRowChanged != null)) {
                    this.ExceptionPropertiesRowChanged(this, new ExceptionPropertiesRowChangeEvent(((ExceptionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionPropertiesRowChanging != null)) {
                    this.ExceptionPropertiesRowChanging(this, new ExceptionPropertiesRowChangeEvent(((ExceptionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionPropertiesRowDeleted != null)) {
                    this.ExceptionPropertiesRowDeleted(this, new ExceptionPropertiesRowChangeEvent(((ExceptionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionPropertiesRowDeleting != null)) {
                    this.ExceptionPropertiesRowDeleting(this, new ExceptionPropertiesRowChangeEvent(((ExceptionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionPropertiesRow(ExceptionPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CriticalErrorDS ds = new CriticalErrorDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdditionalInfoRow : System.Data.DataRow {
            
            private AdditionalInfoDataTable tableAdditionalInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdditionalInfo = ((AdditionalInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableAdditionalInfo.idColumn]));
                }
                set {
                    this[this.tableAdditionalInfo.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalInfo.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'AdditionalInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalInfo.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalInfo.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'value\' in table \'AdditionalInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalInfo.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableAdditionalInfo.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableAdditionalInfo.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableAdditionalInfo.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableAdditionalInfo.valueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerbsRow : System.Data.DataRow {
            
            private VerbsDataTable tableVerbs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerbsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerbs = ((VerbsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableVerbs.idColumn]));
                }
                set {
                    this[this.tableVerbs.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string verb {
                get {
                    try {
                        return ((string)(this[this.tableVerbs.verbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'verb\' in table \'Verbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerbs.verbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsverbNull() {
                return this.IsNull(this.tableVerbs.verbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetverbNull() {
                this[this.tableVerbs.verbColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoriesRow : System.Data.DataRow {
            
            private CategoriesDataTable tableCategories;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoriesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategories = ((CategoriesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryCategoriesId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableCategories.logEntryCategoriesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryCategoriesId\' in table \'Categories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategories.logEntryCategoriesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category {
                get {
                    try {
                        return ((string)(this[this.tableCategories.categoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'category\' in table \'Categories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategories.categoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryCategoriesIdNull() {
                return this.IsNull(this.tableCategories.logEntryCategoriesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryCategoriesIdNull() {
                this[this.tableCategories.logEntryCategoriesIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscategoryNull() {
                return this.IsNull(this.tableCategories.categoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcategoryNull() {
                this[this.tableCategories.categoryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiagnosticInfoRow : System.Data.DataRow {
            
            private DiagnosticInfoDataTable tableDiagnosticInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagnosticInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiagnosticInfo = ((DiagnosticInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableDiagnosticInfo.idColumn]));
                }
                set {
                    this[this.tableDiagnosticInfo.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clrVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.clrVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'clrVersion\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.clrVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string executingAssemblyName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.executingAssemblyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'executingAssemblyName\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.executingAssemblyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileDescription {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileDescription\' in table \'DiagnosticInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileVersion\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionProductName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionProductName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionProductVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionProductVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionProductVersion\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionProductVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionCompanyName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionCompanyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionCompanyName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionCompanyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionComments {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionCommentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionComments\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionCommentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionInternalName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionInternalNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionInternalName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionInternalNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool versionIsDebug {
                get {
                    try {
                        return ((bool)(this[this.tableDiagnosticInfo.versionIsDebugColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionIsDebug\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionIsDebugColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool versionIsPatched {
                get {
                    try {
                        return ((bool)(this[this.tableDiagnosticInfo.versionIsPatchedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionIsPatched\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionIsPatchedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLanguage {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLanguageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLanguage\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLanguageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLegalCopyright {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLegalCopyrightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLegalCopyright\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLegalCopyrightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLegalTrademarks {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLegalTrademarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLegalTrademarks\' in table \'DiagnosticInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLegalTrademarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid processInfoId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableDiagnosticInfo.processInfoIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processInfoId\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.processInfoIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid hostEnvironmentId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableDiagnosticInfo.hostEnvironmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'hostEnvironmentId\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.hostEnvironmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclrVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.clrVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclrVersionNull() {
                this[this.tableDiagnosticInfo.clrVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexecutingAssemblyNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.executingAssemblyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexecutingAssemblyNameNull() {
                this[this.tableDiagnosticInfo.executingAssemblyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileNameNull() {
                this[this.tableDiagnosticInfo.versionFileNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileDescriptionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileDescriptionNull() {
                this[this.tableDiagnosticInfo.versionFileDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileVersionNull() {
                this[this.tableDiagnosticInfo.versionFileVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionProductNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionProductNameNull() {
                this[this.tableDiagnosticInfo.versionProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionProductVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionProductVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionProductVersionNull() {
                this[this.tableDiagnosticInfo.versionProductVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionCompanyNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionCompanyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionCompanyNameNull() {
                this[this.tableDiagnosticInfo.versionCompanyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionCommentsNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionCommentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionCommentsNull() {
                this[this.tableDiagnosticInfo.versionCommentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionInternalNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionInternalNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionInternalNameNull() {
                this[this.tableDiagnosticInfo.versionInternalNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionIsDebugNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionIsDebugColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionIsDebugNull() {
                this[this.tableDiagnosticInfo.versionIsDebugColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionIsPatchedNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionIsPatchedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionIsPatchedNull() {
                this[this.tableDiagnosticInfo.versionIsPatchedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLanguageNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLanguageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLanguageNull() {
                this[this.tableDiagnosticInfo.versionLanguageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLegalCopyrightNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLegalCopyrightColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLegalCopyrightNull() {
                this[this.tableDiagnosticInfo.versionLegalCopyrightColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLegalTrademarksNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLegalTrademarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLegalTrademarksNull() {
                this[this.tableDiagnosticInfo.versionLegalTrademarksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessInfoIdNull() {
                return this.IsNull(this.tableDiagnosticInfo.processInfoIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessInfoIdNull() {
                this[this.tableDiagnosticInfo.processInfoIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshostEnvironmentIdNull() {
                return this.IsNull(this.tableDiagnosticInfo.hostEnvironmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethostEnvironmentIdNull() {
                this[this.tableDiagnosticInfo.hostEnvironmentIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnvironmentVariablesRow : System.Data.DataRow {
            
            private EnvironmentVariablesDataTable tableEnvironmentVariables;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironmentVariablesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnvironmentVariables = ((EnvironmentVariablesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableEnvironmentVariables.idColumn]));
                }
                set {
                    this[this.tableEnvironmentVariables.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string variableName {
                get {
                    try {
                        return ((string)(this[this.tableEnvironmentVariables.variableNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'variableName\' in table \'EnvironmentVariables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironmentVariables.variableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string variableValue {
                get {
                    try {
                        return ((string)(this[this.tableEnvironmentVariables.variableValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'variableValue\' in table \'EnvironmentVariables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironmentVariables.variableValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvariableNameNull() {
                return this.IsNull(this.tableEnvironmentVariables.variableNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvariableNameNull() {
                this[this.tableEnvironmentVariables.variableNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvariableValueNull() {
                return this.IsNull(this.tableEnvironmentVariables.variableValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvariableValueNull() {
                this[this.tableEnvironmentVariables.variableValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionRow : System.Data.DataRow {
            
            private ExceptionDataTable tableException;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableException = ((ExceptionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableException.idColumn]));
                }
                set {
                    this[this.tableException.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableException.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableException.dateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dateTime\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.dateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string exceptionType {
                get {
                    try {
                        return ((string)(this[this.tableException.exceptionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionType\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string exceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableException.exceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionMessage\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableException.sourceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'source\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.sourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helpLink {
                get {
                    try {
                        return ((string)(this[this.tableException.helpLinkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'helpLink\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.helpLinkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionDataId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.exceptionDataIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionDataId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionDataIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid targetSiteId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.targetSiteIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'targetSiteId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.targetSiteIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stackTrace {
                get {
                    try {
                        return ((string)(this[this.tableException.stackTraceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stackTrace\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.stackTraceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid additionalInfoId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.additionalInfoIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'additionalInfoId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.additionalInfoIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid diagnosticInfoId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.diagnosticInfoIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'diagnosticInfoId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.diagnosticInfoIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid propertiesId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.propertiesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertiesId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.propertiesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid fieldsId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.fieldsIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fieldsId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.fieldsIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableException.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableException.descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateTimeNull() {
                return this.IsNull(this.tableException.dateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateTimeNull() {
                this[this.tableException.dateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionTypeNull() {
                return this.IsNull(this.tableException.exceptionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionTypeNull() {
                this[this.tableException.exceptionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionMessageNull() {
                return this.IsNull(this.tableException.exceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionMessageNull() {
                this[this.tableException.exceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableException.sourceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableException.sourceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshelpLinkNull() {
                return this.IsNull(this.tableException.helpLinkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethelpLinkNull() {
                this[this.tableException.helpLinkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionDataIdNull() {
                return this.IsNull(this.tableException.exceptionDataIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionDataIdNull() {
                this[this.tableException.exceptionDataIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstargetSiteIdNull() {
                return this.IsNull(this.tableException.targetSiteIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettargetSiteIdNull() {
                this[this.tableException.targetSiteIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstackTraceNull() {
                return this.IsNull(this.tableException.stackTraceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstackTraceNull() {
                this[this.tableException.stackTraceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsadditionalInfoIdNull() {
                return this.IsNull(this.tableException.additionalInfoIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetadditionalInfoIdNull() {
                this[this.tableException.additionalInfoIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiagnosticInfoIdNull() {
                return this.IsNull(this.tableException.diagnosticInfoIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiagnosticInfoIdNull() {
                this[this.tableException.diagnosticInfoIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertiesIdNull() {
                return this.IsNull(this.tableException.propertiesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertiesIdNull() {
                this[this.tableException.propertiesIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfieldsIdNull() {
                return this.IsNull(this.tableException.fieldsIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfieldsIdNull() {
                this[this.tableException.fieldsIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionDataRow : System.Data.DataRow {
            
            private ExceptionDataDataTable tableExceptionData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExceptionData = ((ExceptionDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableExceptionData.idColumn]));
                }
                set {
                    this[this.tableExceptionData.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataKey {
                get {
                    try {
                        return ((string)(this[this.tableExceptionData.dataKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dataKey\' in table \'ExceptionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionData.dataKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataValue {
                get {
                    try {
                        return ((string)(this[this.tableExceptionData.dataValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dataValue\' in table \'ExceptionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionData.dataValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataKeyNull() {
                return this.IsNull(this.tableExceptionData.dataKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataKeyNull() {
                this[this.tableExceptionData.dataKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataValueNull() {
                return this.IsNull(this.tableExceptionData.dataValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataValueNull() {
                this[this.tableExceptionData.dataValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GenericArgumentsRow : System.Data.DataRow {
            
            private GenericArgumentsDataTable tableGenericArguments;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenericArgumentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenericArguments = ((GenericArgumentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    try {
                        return ((System.Guid)(this[this.tableGenericArguments.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'GenericArguments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenericArguments.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableGenericArguments.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'type\' in table \'GenericArguments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenericArguments.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableGenericArguments.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableGenericArguments.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableGenericArguments.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableGenericArguments.typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HostEnvironmentRow : System.Data.DataRow {
            
            private HostEnvironmentDataTable tableHostEnvironment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HostEnvironmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHostEnvironment = ((HostEnvironmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableHostEnvironment.idColumn]));
                }
                set {
                    this[this.tableHostEnvironment.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string osVersion {
                get {
                    try {
                        return ((string)(this[this.tableHostEnvironment.osVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'osVersion\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.osVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processorCount {
                get {
                    try {
                        return ((int)(this[this.tableHostEnvironment.processorCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processorCount\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.processorCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currentDirectory {
                get {
                    try {
                        return ((string)(this[this.tableHostEnvironment.currentDirectoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'currentDirectory\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.currentDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsosVersionNull() {
                return this.IsNull(this.tableHostEnvironment.osVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetosVersionNull() {
                this[this.tableHostEnvironment.osVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessorCountNull() {
                return this.IsNull(this.tableHostEnvironment.processorCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessorCountNull() {
                this[this.tableHostEnvironment.processorCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurrentDirectoryNull() {
                return this.IsNull(this.tableHostEnvironment.currentDirectoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurrentDirectoryNull() {
                this[this.tableHostEnvironment.currentDirectoryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InnerExceptionsRow : System.Data.DataRow {
            
            private InnerExceptionsDataTable tableInnerExceptions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InnerExceptionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInnerExceptions = ((InnerExceptionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableInnerExceptions.exceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionId\' in table \'InnerExceptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInnerExceptions.exceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid innerExceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableInnerExceptions.innerExceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'innerExceptionId\' in table \'InnerExceptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInnerExceptions.innerExceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionIdNull() {
                return this.IsNull(this.tableInnerExceptions.exceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionIdNull() {
                this[this.tableInnerExceptions.exceptionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinnerExceptionIdNull() {
                return this.IsNull(this.tableInnerExceptions.innerExceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinnerExceptionIdNull() {
                this[this.tableInnerExceptions.innerExceptionIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogEntryRow : System.Data.DataRow {
            
            private LogEntryDataTable tableLogEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogEntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogEntry = ((LogEntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableLogEntry.idColumn]));
                }
                set {
                    this[this.tableLogEntry.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string siteCode {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.siteCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'siteCode\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.siteCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid issueTag {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.issueTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'issueTag\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.issueTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid activityId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.activityIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'activityId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.activityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appDomainName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.appDomainNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'appDomainName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.appDomainNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string errorMessages {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.errorMessagesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'errorMessages\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.errorMessagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int eventId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.eventIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'eventId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.eventIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loggedSeverity {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.loggedSeverityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'loggedSeverity\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.loggedSeverityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string machineName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.machineNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'machineName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.machineNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string managedThreadName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.managedThreadNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'managedThreadName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.managedThreadNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int priority {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.priorityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'priority\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.priorityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.processIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.processIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string processName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.processNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.processNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string severity {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.severityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'severity\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.severityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime timeStamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLogEntry.timeStampColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'timeStamp\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.timeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'title\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int win32ThreadId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.win32ThreadIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'win32ThreadId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.win32ThreadIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid categoriesId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.categoriesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'categoriesId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.categoriesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.exceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.exceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid extendedPropertiesId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.extendedPropertiesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'extendedPropertiesId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.extendedPropertiesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssiteCodeNull() {
                return this.IsNull(this.tableLogEntry.siteCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsiteCodeNull() {
                this[this.tableLogEntry.siteCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsissueTagNull() {
                return this.IsNull(this.tableLogEntry.issueTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetissueTagNull() {
                this[this.tableLogEntry.issueTagColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactivityIdNull() {
                return this.IsNull(this.tableLogEntry.activityIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactivityIdNull() {
                this[this.tableLogEntry.activityIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappDomainNameNull() {
                return this.IsNull(this.tableLogEntry.appDomainNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappDomainNameNull() {
                this[this.tableLogEntry.appDomainNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IserrorMessagesNull() {
                return this.IsNull(this.tableLogEntry.errorMessagesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeterrorMessagesNull() {
                this[this.tableLogEntry.errorMessagesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseventIdNull() {
                return this.IsNull(this.tableLogEntry.eventIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteventIdNull() {
                this[this.tableLogEntry.eventIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloggedSeverityNull() {
                return this.IsNull(this.tableLogEntry.loggedSeverityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloggedSeverityNull() {
                this[this.tableLogEntry.loggedSeverityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmachineNameNull() {
                return this.IsNull(this.tableLogEntry.machineNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmachineNameNull() {
                this[this.tableLogEntry.machineNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmanagedThreadNameNull() {
                return this.IsNull(this.tableLogEntry.managedThreadNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmanagedThreadNameNull() {
                this[this.tableLogEntry.managedThreadNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriorityNull() {
                return this.IsNull(this.tableLogEntry.priorityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriorityNull() {
                this[this.tableLogEntry.priorityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessIdNull() {
                return this.IsNull(this.tableLogEntry.processIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessIdNull() {
                this[this.tableLogEntry.processIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessNameNull() {
                return this.IsNull(this.tableLogEntry.processNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessNameNull() {
                this[this.tableLogEntry.processNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseverityNull() {
                return this.IsNull(this.tableLogEntry.severityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseverityNull() {
                this[this.tableLogEntry.severityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeStampNull() {
                return this.IsNull(this.tableLogEntry.timeStampColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeStampNull() {
                this[this.tableLogEntry.timeStampColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableLogEntry.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableLogEntry.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswin32ThreadIdNull() {
                return this.IsNull(this.tableLogEntry.win32ThreadIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwin32ThreadIdNull() {
                this[this.tableLogEntry.win32ThreadIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscategoriesIdNull() {
                return this.IsNull(this.tableLogEntry.categoriesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcategoriesIdNull() {
                this[this.tableLogEntry.categoriesIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionIdNull() {
                return this.IsNull(this.tableLogEntry.exceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionIdNull() {
                this[this.tableLogEntry.exceptionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextendedPropertiesIdNull() {
                return this.IsNull(this.tableLogEntry.extendedPropertiesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextendedPropertiesIdNull() {
                this[this.tableLogEntry.extendedPropertiesIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessInfoRow : System.Data.DataRow {
            
            private ProcessInfoDataTable tableProcessInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessInfo = ((ProcessInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableProcessInfo.idColumn]));
                }
                set {
                    this[this.tableProcessInfo.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableProcessInfo.startTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'startTime\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.startTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processId {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.processIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processId\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.processIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int terminalServicesSessionId {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.terminalServicesSessionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'terminalServicesSessionId\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.terminalServicesSessionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long nonPagedSystemMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nonPagedSystemMemorySize\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pagedMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.pagedMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pagedMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.pagedMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pagedSystemMemory {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.pagedSystemMemoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pagedSystemMemory\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.pagedSystemMemoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakPagedMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakPagedMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakPagedMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakPagedMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakVirtualMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakVirtualMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakVirtualMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakVirtualMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakWorkingSet {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakWorkingSetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakWorkingSet\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakWorkingSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long privateMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.privateMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'privateMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.privateMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long virtualMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.virtualMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'virtualMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.virtualMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long workingSet {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.workingSetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'workingSet\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.workingSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeDays {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeDaysColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeDays\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeDaysColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeHours {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeHours\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeMinutes {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeMinutes\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeSeconds {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeSecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeSeconds\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeSecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeFraction {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeFractionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeFraction\' in table \'ProcessInfo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeFractionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeDays {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeDaysColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeDays\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeDaysColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeHours {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeHours\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeMinutes {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeMinutes\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeSeconds {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeSecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeSeconds\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeSecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeFraction {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeFractionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeFraction\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeFractionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int threadCount {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.threadCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'threadCount\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.threadCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid startInfoId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableProcessInfo.startInfoIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'startInfoId\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.startInfoIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid processEnvironmentId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableProcessInfo.processEnvironmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processEnvironmentId\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.processEnvironmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartTimeNull() {
                return this.IsNull(this.tableProcessInfo.startTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartTimeNull() {
                this[this.tableProcessInfo.startTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessIdNull() {
                return this.IsNull(this.tableProcessInfo.processIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessIdNull() {
                this[this.tableProcessInfo.processIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsterminalServicesSessionIdNull() {
                return this.IsNull(this.tableProcessInfo.terminalServicesSessionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetterminalServicesSessionIdNull() {
                this[this.tableProcessInfo.terminalServicesSessionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnonPagedSystemMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.nonPagedSystemMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnonPagedSystemMemorySizeNull() {
                this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspagedMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.pagedMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpagedMemorySizeNull() {
                this[this.tableProcessInfo.pagedMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspagedSystemMemoryNull() {
                return this.IsNull(this.tableProcessInfo.pagedSystemMemoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpagedSystemMemoryNull() {
                this[this.tableProcessInfo.pagedSystemMemoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakPagedMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.peakPagedMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakPagedMemorySizeNull() {
                this[this.tableProcessInfo.peakPagedMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakVirtualMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.peakVirtualMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakVirtualMemorySizeNull() {
                this[this.tableProcessInfo.peakVirtualMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakWorkingSetNull() {
                return this.IsNull(this.tableProcessInfo.peakWorkingSetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakWorkingSetNull() {
                this[this.tableProcessInfo.peakWorkingSetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprivateMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.privateMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprivateMemorySizeNull() {
                this[this.tableProcessInfo.privateMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvirtualMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.virtualMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvirtualMemorySizeNull() {
                this[this.tableProcessInfo.virtualMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkingSetNull() {
                return this.IsNull(this.tableProcessInfo.workingSetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkingSetNull() {
                this[this.tableProcessInfo.workingSetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeDaysNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeDaysColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeDaysNull() {
                this[this.tableProcessInfo.totalProcessorTimeDaysColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeHoursNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeHoursNull() {
                this[this.tableProcessInfo.totalProcessorTimeHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeMinutesNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeMinutesNull() {
                this[this.tableProcessInfo.totalProcessorTimeMinutesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeSecondsNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeSecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeSecondsNull() {
                this[this.tableProcessInfo.totalProcessorTimeSecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeFractionNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeFractionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeFractionNull() {
                this[this.tableProcessInfo.totalProcessorTimeFractionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeDaysNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeDaysColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeDaysNull() {
                this[this.tableProcessInfo.userProcessorTimeDaysColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeHoursNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeHoursNull() {
                this[this.tableProcessInfo.userProcessorTimeHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeMinutesNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeMinutesNull() {
                this[this.tableProcessInfo.userProcessorTimeMinutesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeSecondsNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeSecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeSecondsNull() {
                this[this.tableProcessInfo.userProcessorTimeSecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeFractionNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeFractionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeFractionNull() {
                this[this.tableProcessInfo.userProcessorTimeFractionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthreadCountNull() {
                return this.IsNull(this.tableProcessInfo.threadCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthreadCountNull() {
                this[this.tableProcessInfo.threadCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartInfoIdNull() {
                return this.IsNull(this.tableProcessInfo.startInfoIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartInfoIdNull() {
                this[this.tableProcessInfo.startInfoIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessEnvironmentIdNull() {
                return this.IsNull(this.tableProcessInfo.processEnvironmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessEnvironmentIdNull() {
                this[this.tableProcessInfo.processEnvironmentIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StartInfoRow : System.Data.DataRow {
            
            private StartInfoDataTable tableStartInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StartInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStartInfo = ((StartInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableStartInfo.idColumn]));
                }
                set {
                    this[this.tableStartInfo.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fileName\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.fileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arguments {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.argumentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'arguments\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.argumentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string domain {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.domainColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'domain\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.domainColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string verb {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.verbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'verb\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.verbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool useShellExecute {
                get {
                    try {
                        return ((bool)(this[this.tableStartInfo.useShellExecuteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'useShellExecute\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.useShellExecuteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string workingDirectory {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.workingDirectoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'workingDirectory\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.workingDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid startInfoEnvironmentId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableStartInfo.startInfoEnvironmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'startInfoEnvironmentId\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.startInfoEnvironmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid verbsId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableStartInfo.verbsIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'verbsId\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.verbsIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileNameNull() {
                return this.IsNull(this.tableStartInfo.fileNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileNameNull() {
                this[this.tableStartInfo.fileNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsargumentsNull() {
                return this.IsNull(this.tableStartInfo.argumentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetargumentsNull() {
                this[this.tableStartInfo.argumentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdomainNull() {
                return this.IsNull(this.tableStartInfo.domainColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdomainNull() {
                this[this.tableStartInfo.domainColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsverbNull() {
                return this.IsNull(this.tableStartInfo.verbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetverbNull() {
                this[this.tableStartInfo.verbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuseShellExecuteNull() {
                return this.IsNull(this.tableStartInfo.useShellExecuteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuseShellExecuteNull() {
                this[this.tableStartInfo.useShellExecuteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkingDirectoryNull() {
                return this.IsNull(this.tableStartInfo.workingDirectoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkingDirectoryNull() {
                this[this.tableStartInfo.workingDirectoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartInfoEnvironmentIdNull() {
                return this.IsNull(this.tableStartInfo.startInfoEnvironmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartInfoEnvironmentIdNull() {
                this[this.tableStartInfo.startInfoEnvironmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsverbsIdNull() {
                return this.IsNull(this.tableStartInfo.verbsIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetverbsIdNull() {
                this[this.tableStartInfo.verbsIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TargetSiteRow : System.Data.DataRow {
            
            private TargetSiteDataTable tableTargetSite;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetSiteRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTargetSite = ((TargetSiteDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableTargetSite.idColumn]));
                }
                set {
                    this[this.tableTargetSite.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string callingConvention {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.callingConventionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'callingConvention\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.callingConventionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string declaringType {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.declaringTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'declaringType\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.declaringTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberType {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.memberTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'memberType\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.memberTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string token {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.tokenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'token\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.tokenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string declaringModule {
                get {
                    try {
                        return ((string)(this[this.tableTargetSite.declaringModuleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'declaringModule\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.declaringModuleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid genericArgumentsId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableTargetSite.genericArgumentsIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'genericArgumentsId\' in table \'TargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTargetSite.genericArgumentsIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableTargetSite.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableTargetSite.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscallingConventionNull() {
                return this.IsNull(this.tableTargetSite.callingConventionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcallingConventionNull() {
                this[this.tableTargetSite.callingConventionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeclaringTypeNull() {
                return this.IsNull(this.tableTargetSite.declaringTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeclaringTypeNull() {
                this[this.tableTargetSite.declaringTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberTypeNull() {
                return this.IsNull(this.tableTargetSite.memberTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberTypeNull() {
                this[this.tableTargetSite.memberTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstokenNull() {
                return this.IsNull(this.tableTargetSite.tokenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettokenNull() {
                this[this.tableTargetSite.tokenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeclaringModuleNull() {
                return this.IsNull(this.tableTargetSite.declaringModuleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeclaringModuleNull() {
                this[this.tableTargetSite.declaringModuleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgenericArgumentsIdNull() {
                return this.IsNull(this.tableTargetSite.genericArgumentsIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgenericArgumentsIdNull() {
                this[this.tableTargetSite.genericArgumentsIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtendedPropsRow : System.Data.DataRow {
            
            private ExtendedPropsDataTable tableExtendedProps;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtendedPropsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtendedProps = ((ExtendedPropsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryExtendedPropertiesId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableExtendedProps.logEntryExtendedPropertiesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryExtendedPropertiesId\' in table \'ExtendedProps\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.logEntryExtendedPropertiesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyKey {
                get {
                    try {
                        return ((string)(this[this.tableExtendedProps.propertyKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyKey\' in table \'ExtendedProps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.propertyKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyValue {
                get {
                    try {
                        return ((string)(this[this.tableExtendedProps.propertyValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyValue\' in table \'ExtendedProps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.propertyValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryExtendedPropertiesIdNull() {
                return this.IsNull(this.tableExtendedProps.logEntryExtendedPropertiesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryExtendedPropertiesIdNull() {
                this[this.tableExtendedProps.logEntryExtendedPropertiesIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyKeyNull() {
                return this.IsNull(this.tableExtendedProps.propertyKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyKeyNull() {
                this[this.tableExtendedProps.propertyKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyValueNull() {
                return this.IsNull(this.tableExtendedProps.propertyValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyValueNull() {
                this[this.tableExtendedProps.propertyValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionFieldsRow : System.Data.DataRow {
            
            private ExceptionFieldsDataTable tableExceptionFields;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionFieldsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExceptionFields = ((ExceptionFieldsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    try {
                        return ((System.Guid)(this[this.tableExceptionFields.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'ExceptionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionFields.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fieldName {
                get {
                    try {
                        return ((string)(this[this.tableExceptionFields.fieldNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fieldName\' in table \'ExceptionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionFields.fieldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fieldValue {
                get {
                    try {
                        return ((string)(this[this.tableExceptionFields.fieldValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fieldValue\' in table \'ExceptionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionFields.fieldValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableExceptionFields.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableExceptionFields.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfieldNameNull() {
                return this.IsNull(this.tableExceptionFields.fieldNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfieldNameNull() {
                this[this.tableExceptionFields.fieldNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfieldValueNull() {
                return this.IsNull(this.tableExceptionFields.fieldValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfieldValueNull() {
                this[this.tableExceptionFields.fieldValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionPropertiesRow : System.Data.DataRow {
            
            private ExceptionPropertiesDataTable tableExceptionProperties;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionPropertiesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExceptionProperties = ((ExceptionPropertiesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    try {
                        return ((System.Guid)(this[this.tableExceptionProperties.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'ExceptionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionProperties.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyName {
                get {
                    try {
                        return ((string)(this[this.tableExceptionProperties.propertyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyName\' in table \'ExceptionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionProperties.propertyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyValue {
                get {
                    try {
                        return ((string)(this[this.tableExceptionProperties.propertyValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyValue\' in table \'ExceptionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionProperties.propertyValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableExceptionProperties.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableExceptionProperties.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyNameNull() {
                return this.IsNull(this.tableExceptionProperties.propertyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyNameNull() {
                this[this.tableExceptionProperties.propertyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyValueNull() {
                return this.IsNull(this.tableExceptionProperties.propertyValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyValueNull() {
                this[this.tableExceptionProperties.propertyValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdditionalInfoRowChangeEvent : System.EventArgs {
            
            private AdditionalInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoRowChangeEvent(AdditionalInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerbsRowChangeEvent : System.EventArgs {
            
            private VerbsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRowChangeEvent(VerbsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoriesRowChangeEvent : System.EventArgs {
            
            private CategoriesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRowChangeEvent(CategoriesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiagnosticInfoRowChangeEvent : System.EventArgs {
            
            private DiagnosticInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRowChangeEvent(DiagnosticInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnvironmentVariablesRowChangeEvent : System.EventArgs {
            
            private EnvironmentVariablesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRowChangeEvent(EnvironmentVariablesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionRowChangeEvent : System.EventArgs {
            
            private ExceptionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRowChangeEvent(ExceptionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionDataRowChangeEvent : System.EventArgs {
            
            private ExceptionDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRowChangeEvent(ExceptionDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GenericArgumentsRowChangeEvent : System.EventArgs {
            
            private GenericArgumentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsRowChangeEvent(GenericArgumentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenericArgumentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HostEnvironmentRowChangeEvent : System.EventArgs {
            
            private HostEnvironmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRowChangeEvent(HostEnvironmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InnerExceptionsRowChangeEvent : System.EventArgs {
            
            private InnerExceptionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRowChangeEvent(InnerExceptionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogEntryRowChangeEvent : System.EventArgs {
            
            private LogEntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRowChangeEvent(LogEntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessInfoRowChangeEvent : System.EventArgs {
            
            private ProcessInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRowChangeEvent(ProcessInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StartInfoRowChangeEvent : System.EventArgs {
            
            private StartInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRowChangeEvent(StartInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TargetSiteRowChangeEvent : System.EventArgs {
            
            private TargetSiteRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRowChangeEvent(TargetSiteRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetSiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtendedPropsRowChangeEvent : System.EventArgs {
            
            private ExtendedPropsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRowChangeEvent(ExtendedPropsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionFieldsRowChangeEvent : System.EventArgs {
            
            private ExceptionFieldsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsRowChangeEvent(ExceptionFieldsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionPropertiesRowChangeEvent : System.EventArgs {
            
            private ExceptionPropertiesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesRowChangeEvent(ExceptionPropertiesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CriticalErrorReporting.Data.CriticalErrorDSTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AdditionalInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AdditionalInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AdditionalInfo";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("value", "value");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AdditionalInfo] WHERE (([id] = @Original_id) AND ((@IsNull_nam" +
                "e = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_value = 1 " +
                "AND [value] IS NULL) OR ([value] = @Original_value)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_value", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AdditionalInfo] ([id], [name], [value]) VALUES (@id, @name, @v" +
                "alue);\r\nSELECT id, name, value FROM AdditionalInfo WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[AdditionalInfo] SET [id] = @id, [name] = @name, [value] = @value WHERE (([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_value = 1 AND [value] IS NULL) OR ([value] = @Original_value)));
SELECT id, name, value FROM AdditionalInfo WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_value", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, name, value FROM dbo.AdditionalInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertAdditionalInfo";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.AdditionalInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.AdditionalInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.AdditionalInfoDataTable dataTable = new CriticalErrorDS.AdditionalInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.AdditionalInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "AdditionalInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_name, string Original_value) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_name));
            }
            if ((Original_value == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_value));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string name, string value) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((value == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(value));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid id, string name, string value, System.Guid Original_id, string Original_name, string Original_value) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            if ((value == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(value));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_name));
            }
            if ((Original_value == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_value));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertAdditionalInfo(System.Nullable<System.Guid> id, string name, string value) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((name == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(name));
            }
            if ((value == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(value));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VerbsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VerbsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Verbs";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("verb", "verb");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Verbs] WHERE (([id] = @Original_id) AND ((@IsNull_verb = 1 AND" +
                " [verb] IS NULL) OR ([verb] = @Original_verb)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verb", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Verbs] ([id], [verb]) VALUES (@id, @verb);\r\nSELECT id, verb FR" +
                "OM Verbs WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Verbs] SET [id] = @id, [verb] = @verb WHERE (([id] = @Original_id) " +
                "AND ((@IsNull_verb = 1 AND [verb] IS NULL) OR ([verb] = @Original_verb)));\r\nSELE" +
                "CT id, verb FROM Verbs WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verb", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, verb FROM dbo.Verbs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertVerbs";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.VerbsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.VerbsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.VerbsDataTable dataTable = new CriticalErrorDS.VerbsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.VerbsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "Verbs");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_verb) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_verb == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_verb));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string verb) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((verb == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(verb));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid id, string verb, System.Guid Original_id, string Original_verb) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((verb == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(verb));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_id));
            if ((Original_verb == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_verb));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertVerbs(System.Nullable<System.Guid> id, string verb) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((verb == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(verb));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CategoriesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CategoriesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Categories";
            tableMapping.ColumnMappings.Add("logEntryCategoriesId", "logEntryCategoriesId");
            tableMapping.ColumnMappings.Add("category", "category");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Categories] ([logEntryCategoriesId], [category]) VALUES (@logE" +
                "ntryCategoriesId, @category)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryCategoriesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryCategoriesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@category", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "category", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryCategoriesId, category FROM dbo.Categories";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertCategories";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryCategoriesId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@category", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.CategoriesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.CategoriesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.CategoriesDataTable dataTable = new CriticalErrorDS.CategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.CategoriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "Categories");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryCategoriesId, string category) {
            if ((logEntryCategoriesId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryCategoriesId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((category == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(category));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertCategories(System.Nullable<System.Guid> logEntryCategoriesId, string category) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((logEntryCategoriesId.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(logEntryCategoriesId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((category == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(category));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DiagnosticInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DiagnosticInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DiagnosticInfo";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("clrVersion", "clrVersion");
            tableMapping.ColumnMappings.Add("executingAssemblyName", "executingAssemblyName");
            tableMapping.ColumnMappings.Add("versionFileName", "versionFileName");
            tableMapping.ColumnMappings.Add("versionFileDescription", "versionFileDescription");
            tableMapping.ColumnMappings.Add("versionFileVersion", "versionFileVersion");
            tableMapping.ColumnMappings.Add("versionProductName", "versionProductName");
            tableMapping.ColumnMappings.Add("versionProductVersion", "versionProductVersion");
            tableMapping.ColumnMappings.Add("versionCompanyName", "versionCompanyName");
            tableMapping.ColumnMappings.Add("versionComments", "versionComments");
            tableMapping.ColumnMappings.Add("versionInternalName", "versionInternalName");
            tableMapping.ColumnMappings.Add("versionIsDebug", "versionIsDebug");
            tableMapping.ColumnMappings.Add("versionIsPatched", "versionIsPatched");
            tableMapping.ColumnMappings.Add("versionLanguage", "versionLanguage");
            tableMapping.ColumnMappings.Add("versionLegalCopyright", "versionLegalCopyright");
            tableMapping.ColumnMappings.Add("versionLegalTrademarks", "versionLegalTrademarks");
            tableMapping.ColumnMappings.Add("processInfoId", "processInfoId");
            tableMapping.ColumnMappings.Add("hostEnvironmentId", "hostEnvironmentId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DiagnosticInfo] WHERE (([id] = @Original_id) AND ((@IsNull_clr" +
                "Version = 1 AND [clrVersion] IS NULL) OR ([clrVersion] = @Original_clrVersion)) " +
                "AND ((@IsNull_executingAssemblyName = 1 AND [executingAssemblyName] IS NULL) OR " +
                "([executingAssemblyName] = @Original_executingAssemblyName)) AND ((@IsNull_versi" +
                "onFileName = 1 AND [versionFileName] IS NULL) OR ([versionFileName] = @Original_" +
                "versionFileName)) AND ((@IsNull_versionFileDescription = 1 AND [versionFileDescr" +
                "iption] IS NULL) OR ([versionFileDescription] = @Original_versionFileDescription" +
                ")) AND ((@IsNull_versionFileVersion = 1 AND [versionFileVersion] IS NULL) OR ([v" +
                "ersionFileVersion] = @Original_versionFileVersion)) AND ((@IsNull_versionProduct" +
                "Name = 1 AND [versionProductName] IS NULL) OR ([versionProductName] = @Original_" +
                "versionProductName)) AND ((@IsNull_versionProductVersion = 1 AND [versionProduct" +
                "Version] IS NULL) OR ([versionProductVersion] = @Original_versionProductVersion)" +
                ") AND ((@IsNull_versionCompanyName = 1 AND [versionCompanyName] IS NULL) OR ([ve" +
                "rsionCompanyName] = @Original_versionCompanyName)) AND ((@IsNull_versionComments" +
                " = 1 AND [versionComments] IS NULL) OR ([versionComments] = @Original_versionCom" +
                "ments)) AND ((@IsNull_versionInternalName = 1 AND [versionInternalName] IS NULL)" +
                " OR ([versionInternalName] = @Original_versionInternalName)) AND ((@IsNull_versi" +
                "onIsDebug = 1 AND [versionIsDebug] IS NULL) OR ([versionIsDebug] = @Original_ver" +
                "sionIsDebug)) AND ((@IsNull_versionIsPatched = 1 AND [versionIsPatched] IS NULL)" +
                " OR ([versionIsPatched] = @Original_versionIsPatched)) AND ((@IsNull_versionLang" +
                "uage = 1 AND [versionLanguage] IS NULL) OR ([versionLanguage] = @Original_versio" +
                "nLanguage)) AND ((@IsNull_versionLegalCopyright = 1 AND [versionLegalCopyright] " +
                "IS NULL) OR ([versionLegalCopyright] = @Original_versionLegalCopyright)) AND ((@" +
                "IsNull_versionLegalTrademarks = 1 AND [versionLegalTrademarks] IS NULL) OR ([ver" +
                "sionLegalTrademarks] = @Original_versionLegalTrademarks)) AND ((@IsNull_processI" +
                "nfoId = 1 AND [processInfoId] IS NULL) OR ([processInfoId] = @Original_processIn" +
                "foId)) AND ((@IsNull_hostEnvironmentId = 1 AND [hostEnvironmentId] IS NULL) OR (" +
                "[hostEnvironmentId] = @Original_hostEnvironmentId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_clrVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_clrVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_executingAssemblyName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_executingAssemblyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileDescription", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileDescription", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionProductName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionProductName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionProductVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionProductVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionCompanyName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionCompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionComments", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionComments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionInternalName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionInternalName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionIsDebug", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionIsDebug", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionIsPatched", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionIsPatched", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLanguage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLanguage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLegalCopyright", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLegalCopyright", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLegalTrademarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_hostEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hostEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DiagnosticInfo] ([id], [clrVersion], [executingAssemblyName], [versionFileName], [versionFileDescription], [versionFileVersion], [versionProductName], [versionProductVersion], [versionCompanyName], [versionComments], [versionInternalName], [versionIsDebug], [versionIsPatched], [versionLanguage], [versionLegalCopyright], [versionLegalTrademarks], [processInfoId],[hostEnvironmentId]) VALUES (@id, @clrVersion, @executingAssemblyName, @versionFileName, @versionFileDescription, @versionFileVersion, @versionProductName, @versionProductVersion, @versionCompanyName, @versionComments, @versionInternalName, @versionIsDebug, @versionIsPatched, @versionLanguage, @versionLegalCopyright, @versionLegalTrademarks, @processInfoId,@hostEnvironmentId);
SELECT id, clrVersion, executingAssemblyName, versionFileName, versionFileDescription, versionFileVersion, versionProductName, versionProductVersion, versionCompanyName, versionComments, versionInternalName, versionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, versionLegalTrademarks, processInfoId, hostEnvironmentId FROM DiagnosticInfo WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@clrVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@executingAssemblyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileDescription", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionCompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionComments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionInternalName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsDebug", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsPatched", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLanguage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalCopyright", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hostEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "hostEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DiagnosticInfo] SET [id] = @id, [clrVersion] = @clrVersion, [execut" +
                "ingAssemblyName] = @executingAssemblyName, [versionFileName] = @versionFileName," +
                " [versionFileDescription] = @versionFileDescription, [versionFileVersion] = @ver" +
                "sionFileVersion, [versionProductName] = @versionProductName, [versionProductVers" +
                "ion] = @versionProductVersion, [versionCompanyName] = @versionCompanyName, [vers" +
                "ionComments] = @versionComments, [versionInternalName] = @versionInternalName, [" +
                "versionIsDebug] = @versionIsDebug, [versionIsPatched] = @versionIsPatched, [vers" +
                "ionLanguage] = @versionLanguage, [versionLegalCopyright] = @versionLegalCopyrigh" +
                "t, [versionLegalTrademarks] = @versionLegalTrademarks, [processInfoId] = @proces" +
                "sInfoId WHERE (([id] = @Original_id) AND ((@IsNull_clrVersion = 1 AND [clrVersio" +
                "n] IS NULL) OR ([clrVersion] = @Original_clrVersion)) AND ((@IsNull_executingAss" +
                "emblyName = 1 AND [executingAssemblyName] IS NULL) OR ([executingAssemblyName] =" +
                " @Original_executingAssemblyName)) AND ((@IsNull_versionFileName = 1 AND [versio" +
                "nFileName] IS NULL) OR ([versionFileName] = @Original_versionFileName)) AND ((@I" +
                "sNull_versionFileDescription = 1 AND [versionFileDescription] IS NULL) OR ([vers" +
                "ionFileDescription] = @Original_versionFileDescription)) AND ((@IsNull_versionFi" +
                "leVersion = 1 AND [versionFileVersion] IS NULL) OR ([versionFileVersion] = @Orig" +
                "inal_versionFileVersion)) AND ((@IsNull_versionProductName = 1 AND [versionProdu" +
                "ctName] IS NULL) OR ([versionProductName] = @Original_versionProductName)) AND (" +
                "(@IsNull_versionProductVersion = 1 AND [versionProductVersion] IS NULL) OR ([ver" +
                "sionProductVersion] = @Original_versionProductVersion)) AND ((@IsNull_versionCom" +
                "panyName = 1 AND [versionCompanyName] IS NULL) OR ([versionCompanyName] = @Origi" +
                "nal_versionCompanyName)) AND ((@IsNull_versionComments = 1 AND [versionComments]" +
                " IS NULL) OR ([versionComments] = @Original_versionComments)) AND ((@IsNull_vers" +
                "ionInternalName = 1 AND [versionInternalName] IS NULL) OR ([versionInternalName]" +
                " = @Original_versionInternalName)) AND ((@IsNull_versionIsDebug = 1 AND [version" +
                "IsDebug] IS NULL) OR ([versionIsDebug] = @Original_versionIsDebug)) AND ((@IsNul" +
                "l_versionIsPatched = 1 AND [versionIsPatched] IS NULL) OR ([versionIsPatched] = " +
                "@Original_versionIsPatched)) AND ((@IsNull_versionLanguage = 1 AND [versionLangu" +
                "age] IS NULL) OR ([versionLanguage] = @Original_versionLanguage)) AND ((@IsNull_" +
                "versionLegalCopyright = 1 AND [versionLegalCopyright] IS NULL) OR ([versionLegal" +
                "Copyright] = @Original_versionLegalCopyright)) AND ((@IsNull_versionLegalTradema" +
                "rks = 1 AND [versionLegalTrademarks] IS NULL) OR ([versionLegalTrademarks] = @Or" +
                "iginal_versionLegalTrademarks)) AND ((@IsNull_processInfoId = 1 AND [processInfo" +
                "Id] IS NULL) OR ([processInfoId] = @Original_processInfoId)) AND ((@IsNull_hostE" +
                "nvironmentId = 1 AND [hostEnvironmentId] IS NULL) OR ([hostEnvironmentId] = @Ori" +
                "ginal_hostEnvironmentId)));\r\nSELECT id, clrVersion, executingAssemblyName, versi" +
                "onFileName, versionFileDescription, versionFileVersion, versionProductName, vers" +
                "ionProductVersion, versionCompanyName, versionComments, versionInternalName, ver" +
                "sionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, versionLe" +
                "galTrademarks, processInfoId, hostEnvironmentId FROM DiagnosticInfo WHERE (id = " +
                "@id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@clrVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@executingAssemblyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileDescription", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionCompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionComments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionInternalName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsDebug", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsPatched", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLanguage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalCopyright", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_clrVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_clrVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_executingAssemblyName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_executingAssemblyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileDescription", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileDescription", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionFileVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionFileVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionProductName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionProductName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionProductVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionProductVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionCompanyName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionCompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionComments", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionComments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionInternalName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionInternalName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionIsDebug", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionIsDebug", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionIsPatched", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionIsPatched", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLanguage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLanguage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLegalCopyright", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLegalCopyright", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_versionLegalTrademarks", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_hostEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hostEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id, clrVersion, executingAssemblyName, versionFileName, versionFileDescription, versionFileVersion, versionProductName, versionProductVersion, versionCompanyName, versionComments, versionInternalName, versionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, versionLegalTrademarks, processInfoId, hostEnvironmentId FROM dbo.DiagnosticInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO DiagnosticInfo
                      (id, clrVersion, executingAssemblyName, versionFileName, versionFileDescription, versionFileVersion, versionProductName, versionProductVersion, 
                      versionCompanyName, versionComments, versionInternalName, versionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, 
                      versionLegalTrademarks, processInfoId, hostEnvironmentId)
VALUES     (@id,@clrVersion,@executingAssemblyName,@versionFileName,@versionFileDescription,@versionFileVersion,@versionProductName,@versionProductVersion,@versionCompanyName,@versionComments,@versionInternalName,@versionIsDebug,@versionIsPatched,@versionLanguage,@versionLegalCopyright,@versionLegalTrademarks,@processInfoId,@hostEnvironmentId)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@clrVersion", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@executingAssemblyName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileDescription", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileVersion", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductVersion", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionCompanyName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionComments", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionInternalName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsDebug", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsPatched", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLanguage", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalCopyright", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processInfoId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "processInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@hostEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "hostEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.DiagnosticInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.DiagnosticInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.DiagnosticInfoDataTable dataTable = new CriticalErrorDS.DiagnosticInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.DiagnosticInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "DiagnosticInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    System.Guid Original_id, 
                    string Original_clrVersion, 
                    string Original_executingAssemblyName, 
                    string Original_versionFileName, 
                    string Original_versionFileDescription, 
                    string Original_versionFileVersion, 
                    string Original_versionProductName, 
                    string Original_versionProductVersion, 
                    string Original_versionCompanyName, 
                    string Original_versionComments, 
                    string Original_versionInternalName, 
                    System.Nullable<bool> Original_versionIsDebug, 
                    System.Nullable<bool> Original_versionIsPatched, 
                    string Original_versionLanguage, 
                    string Original_versionLegalCopyright, 
                    string Original_versionLegalTrademarks, 
                    System.Nullable<System.Guid> Original_processInfoId, 
                    System.Nullable<System.Guid> Original_hostEnvironmentId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_clrVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_clrVersion));
            }
            if ((Original_executingAssemblyName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_executingAssemblyName));
            }
            if ((Original_versionFileName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_versionFileName));
            }
            if ((Original_versionFileDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_versionFileDescription));
            }
            if ((Original_versionFileVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_versionFileVersion));
            }
            if ((Original_versionProductName == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_versionProductName));
            }
            if ((Original_versionProductVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_versionProductVersion));
            }
            if ((Original_versionCompanyName == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_versionCompanyName));
            }
            if ((Original_versionComments == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_versionComments));
            }
            if ((Original_versionInternalName == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_versionInternalName));
            }
            if ((Original_versionIsDebug.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((bool)(Original_versionIsDebug.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_versionIsPatched.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((bool)(Original_versionIsPatched.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_versionLanguage == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_versionLanguage));
            }
            if ((Original_versionLegalCopyright == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_versionLegalCopyright));
            }
            if ((Original_versionLegalTrademarks == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_versionLegalTrademarks));
            }
            if ((Original_processInfoId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((System.Guid)(Original_processInfoId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_hostEnvironmentId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((System.Guid)(Original_hostEnvironmentId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid id, 
                    string clrVersion, 
                    string executingAssemblyName, 
                    string versionFileName, 
                    string versionFileDescription, 
                    string versionFileVersion, 
                    string versionProductName, 
                    string versionProductVersion, 
                    string versionCompanyName, 
                    string versionComments, 
                    string versionInternalName, 
                    System.Nullable<bool> versionIsDebug, 
                    System.Nullable<bool> versionIsPatched, 
                    string versionLanguage, 
                    string versionLegalCopyright, 
                    string versionLegalTrademarks, 
                    System.Nullable<System.Guid> processInfoId, 
                    System.Nullable<System.Guid> hostEnvironmentId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((clrVersion == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(clrVersion));
            }
            if ((executingAssemblyName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(executingAssemblyName));
            }
            if ((versionFileName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(versionFileName));
            }
            if ((versionFileDescription == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(versionFileDescription));
            }
            if ((versionFileVersion == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(versionFileVersion));
            }
            if ((versionProductName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(versionProductName));
            }
            if ((versionProductVersion == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(versionProductVersion));
            }
            if ((versionCompanyName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(versionCompanyName));
            }
            if ((versionComments == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(versionComments));
            }
            if ((versionInternalName == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(versionInternalName));
            }
            if ((versionIsDebug.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(versionIsDebug.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((versionIsPatched.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(versionIsPatched.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((versionLanguage == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(versionLanguage));
            }
            if ((versionLegalCopyright == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(versionLegalCopyright));
            }
            if ((versionLegalTrademarks == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(versionLegalTrademarks));
            }
            if ((processInfoId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((System.Guid)(processInfoId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((hostEnvironmentId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.Guid)(hostEnvironmentId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    string clrVersion, 
                    string executingAssemblyName, 
                    string versionFileName, 
                    string versionFileDescription, 
                    string versionFileVersion, 
                    string versionProductName, 
                    string versionProductVersion, 
                    string versionCompanyName, 
                    string versionComments, 
                    string versionInternalName, 
                    System.Nullable<bool> versionIsDebug, 
                    System.Nullable<bool> versionIsPatched, 
                    string versionLanguage, 
                    string versionLegalCopyright, 
                    string versionLegalTrademarks, 
                    System.Nullable<System.Guid> processInfoId, 
                    System.Guid Original_id, 
                    string Original_clrVersion, 
                    string Original_executingAssemblyName, 
                    string Original_versionFileName, 
                    string Original_versionFileDescription, 
                    string Original_versionFileVersion, 
                    string Original_versionProductName, 
                    string Original_versionProductVersion, 
                    string Original_versionCompanyName, 
                    string Original_versionComments, 
                    string Original_versionInternalName, 
                    System.Nullable<bool> Original_versionIsDebug, 
                    System.Nullable<bool> Original_versionIsPatched, 
                    string Original_versionLanguage, 
                    string Original_versionLegalCopyright, 
                    string Original_versionLegalTrademarks, 
                    System.Nullable<System.Guid> Original_processInfoId, 
                    System.Nullable<System.Guid> Original_hostEnvironmentId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((clrVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(clrVersion));
            }
            if ((executingAssemblyName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(executingAssemblyName));
            }
            if ((versionFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(versionFileName));
            }
            if ((versionFileDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(versionFileDescription));
            }
            if ((versionFileVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(versionFileVersion));
            }
            if ((versionProductName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(versionProductName));
            }
            if ((versionProductVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(versionProductVersion));
            }
            if ((versionCompanyName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(versionCompanyName));
            }
            if ((versionComments == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(versionComments));
            }
            if ((versionInternalName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(versionInternalName));
            }
            if ((versionIsDebug.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(versionIsDebug.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((versionIsPatched.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(versionIsPatched.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((versionLanguage == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(versionLanguage));
            }
            if ((versionLegalCopyright == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(versionLegalCopyright));
            }
            if ((versionLegalTrademarks == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(versionLegalTrademarks));
            }
            if ((processInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.Guid)(processInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(Original_id));
            if ((Original_clrVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_clrVersion));
            }
            if ((Original_executingAssemblyName == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_executingAssemblyName));
            }
            if ((Original_versionFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_versionFileName));
            }
            if ((Original_versionFileDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_versionFileDescription));
            }
            if ((Original_versionFileVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_versionFileVersion));
            }
            if ((Original_versionProductName == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_versionProductName));
            }
            if ((Original_versionProductVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_versionProductVersion));
            }
            if ((Original_versionCompanyName == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_versionCompanyName));
            }
            if ((Original_versionComments == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_versionComments));
            }
            if ((Original_versionInternalName == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_versionInternalName));
            }
            if ((Original_versionIsDebug.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_versionIsDebug.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((Original_versionIsPatched.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((bool)(Original_versionIsPatched.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = System.DBNull.Value;
            }
            if ((Original_versionLanguage == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_versionLanguage));
            }
            if ((Original_versionLegalCopyright == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_versionLegalCopyright));
            }
            if ((Original_versionLegalTrademarks == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_versionLegalTrademarks));
            }
            if ((Original_processInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((System.Guid)(Original_processInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = System.DBNull.Value;
            }
            if ((Original_hostEnvironmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((System.Guid)(Original_hostEnvironmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertDiagnosticInfo(
                    System.Guid id, 
                    string clrVersion, 
                    string executingAssemblyName, 
                    string versionFileName, 
                    string versionFileDescription, 
                    string versionFileVersion, 
                    string versionProductName, 
                    string versionProductVersion, 
                    string versionCompanyName, 
                    string versionComments, 
                    string versionInternalName, 
                    System.Nullable<bool> versionIsDebug, 
                    System.Nullable<bool> versionIsPatched, 
                    string versionLanguage, 
                    string versionLegalCopyright, 
                    string versionLegalTrademarks, 
                    System.Nullable<System.Guid> processInfoId, 
                    System.Nullable<System.Guid> hostEnvironmentId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((System.Guid)(id));
            if ((clrVersion == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(clrVersion));
            }
            if ((executingAssemblyName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(executingAssemblyName));
            }
            if ((versionFileName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(versionFileName));
            }
            if ((versionFileDescription == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(versionFileDescription));
            }
            if ((versionFileVersion == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(versionFileVersion));
            }
            if ((versionProductName == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(versionProductName));
            }
            if ((versionProductVersion == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(versionProductVersion));
            }
            if ((versionCompanyName == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(versionCompanyName));
            }
            if ((versionComments == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(versionComments));
            }
            if ((versionInternalName == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(versionInternalName));
            }
            if ((versionIsDebug.HasValue == true)) {
                command.Parameters[11].Value = ((bool)(versionIsDebug.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((versionIsPatched.HasValue == true)) {
                command.Parameters[12].Value = ((bool)(versionIsPatched.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            if ((versionLanguage == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(versionLanguage));
            }
            if ((versionLegalCopyright == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(versionLegalCopyright));
            }
            if ((versionLegalTrademarks == null)) {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[15].Value = ((string)(versionLegalTrademarks));
            }
            if ((processInfoId.HasValue == true)) {
                command.Parameters[16].Value = ((System.Guid)(processInfoId.Value));
            }
            else {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            if ((hostEnvironmentId.HasValue == true)) {
                command.Parameters[17].Value = ((System.Guid)(hostEnvironmentId.Value));
            }
            else {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EnvironmentVariablesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EnvironmentVariablesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EnvironmentVariables";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("variableName", "variableName");
            tableMapping.ColumnMappings.Add("variableValue", "variableValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EnvironmentVariables] WHERE (([id] = @Original_id) AND ((@IsNull_variableName = 1 AND [variableName] IS NULL) OR ([variableName] = @Original_variableName)) AND ((@IsNull_variableValue = 1 AND [variableValue] IS NULL) OR ([variableValue] = @Original_variableValue)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_variableName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_variableName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_variableValue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_variableValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EnvironmentVariables] ([id], [variableName], [variableValue]) " +
                "VALUES (@id, @variableName, @variableValue);\r\nSELECT id, variableName, variableV" +
                "alue FROM EnvironmentVariables WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EnvironmentVariables] SET [id] = @id, [variableName] = @variableName, [variableValue] = @variableValue WHERE (([id] = @Original_id) AND ((@IsNull_variableName = 1 AND [variableName] IS NULL) OR ([variableName] = @Original_variableName)) AND ((@IsNull_variableValue = 1 AND [variableValue] IS NULL) OR ([variableValue] = @Original_variableValue)));
SELECT id, variableName, variableValue FROM EnvironmentVariables WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_variableName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_variableName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_variableValue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_variableValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, variableName, variableValue FROM dbo.EnvironmentVariables";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertEnvironmentVariables";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableValue", System.Data.SqlDbType.NVarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.EnvironmentVariablesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.EnvironmentVariablesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.EnvironmentVariablesDataTable dataTable = new CriticalErrorDS.EnvironmentVariablesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.EnvironmentVariablesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "EnvironmentVariables");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_variableName, string Original_variableValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_variableName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_variableName));
            }
            if ((Original_variableValue == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_variableValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string variableName, string variableValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((variableName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(variableName));
            }
            if ((variableValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(variableValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid id, string variableName, string variableValue, System.Guid Original_id, string Original_variableName, string Original_variableValue) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((variableName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(variableName));
            }
            if ((variableValue == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(variableValue));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_id));
            if ((Original_variableName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_variableName));
            }
            if ((Original_variableValue == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_variableValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertEnvironmentVariables(System.Nullable<System.Guid> id, string variableName, string variableValue) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((variableName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(variableName));
            }
            if ((variableValue == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(variableValue));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Exception";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("dateTime", "dateTime");
            tableMapping.ColumnMappings.Add("exceptionType", "exceptionType");
            tableMapping.ColumnMappings.Add("exceptionMessage", "exceptionMessage");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("helpLink", "helpLink");
            tableMapping.ColumnMappings.Add("exceptionDataId", "exceptionDataId");
            tableMapping.ColumnMappings.Add("targetSiteId", "targetSiteId");
            tableMapping.ColumnMappings.Add("stackTrace", "stackTrace");
            tableMapping.ColumnMappings.Add("additionalInfoId", "additionalInfoId");
            tableMapping.ColumnMappings.Add("diagnosticInfoId", "diagnosticInfoId");
            tableMapping.ColumnMappings.Add("propertiesId", "propertiesId");
            tableMapping.ColumnMappings.Add("fieldsId", "fieldsId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Exception] WHERE (([id] = @Original_id) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)) AND ((@IsNull_dateTime = 1 AND [dateTime] IS NULL) OR ([dateTime] = @Original_dateTime)) AND ((@IsNull_exceptionType = 1 AND [exceptionType] IS NULL) OR ([exceptionType] = @Original_exceptionType)) AND ((@IsNull_exceptionMessage = 1 AND [exceptionMessage] IS NULL) OR ([exceptionMessage] = @Original_exceptionMessage)) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Original_source)) AND ((@IsNull_helpLink = 1 AND [helpLink] IS NULL) OR ([helpLink] = @Original_helpLink)) AND ((@IsNull_exceptionDataId = 1 AND [exceptionDataId] IS NULL) OR ([exceptionDataId] = @Original_exceptionDataId)) AND ((@IsNull_targetSiteId = 1 AND [targetSiteId] IS NULL) OR ([targetSiteId] = @Original_targetSiteId)) AND ((@IsNull_stackTrace = 1 AND [stackTrace] IS NULL) OR ([stackTrace] = @Original_stackTrace)) AND ((@IsNull_additionalInfoId = 1 AND [additionalInfoId] IS NULL) OR ([additionalInfoId] = @Original_additionalInfoId)) AND ((@IsNull_diagnosticInfoId = 1 AND [diagnosticInfoId] IS NULL) OR ([diagnosticInfoId] = @Original_diagnosticInfoId)) AND ((@IsNull_propertiesId = 1 AND [propertiesId] IS NULL) OR ([propertiesId] = @Original_propertiesId)) AND ((@IsNull_fieldsId = 1 AND [fieldsId] IS NULL) OR ([fieldsId] = @Original_fieldsId)) )";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionMessage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_source", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_helpLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionDataId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_targetSiteId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_targetSiteId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_stackTrace", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_additionalInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_additionalInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_diagnosticInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_diagnosticInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_propertiesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_propertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fieldsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fieldsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Exception] ([id], [description], [dateTime], [exceptionType], [exceptionMessage], [source], [helpLink], [exceptionDataId], [targetSiteId], [stackTrace], [additionalInfoId], [diagnosticInfoId],[propertiesId],[fieldsId]) VALUES (@id, @description, @dateTime, @exceptionType, @exceptionMessage, @source, @helpLink, @exceptionDataId, @targetSiteId, @stackTrace, @additionalInfoId, @diagnosticInfoId,@propertiesId,@fieldsId);
SELECT id, description, dateTime, exceptionType, exceptionMessage, source, helpLink, exceptionDataId, targetSiteId, stackTrace, additionalInfoId, diagnosticInfoId, propertiesId, fieldsId FROM Exception WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@targetSiteId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@additionalInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@diagnosticInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "propertiesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "fieldsId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Exception] SET [id] = @id, [description] = @description, [dateTime]" +
                " = @dateTime, [exceptionType] = @exceptionType, [exceptionMessage] = @exceptionM" +
                "essage, [source] = @source, [helpLink] = @helpLink, [exceptionDataId] = @excepti" +
                "onDataId, [targetSiteId] = @targetSiteId, [stackTrace] = @stackTrace, [additiona" +
                "lInfoId] = @additionalInfoId, [diagnosticInfoId] = @diagnosticInfoId, [propertie" +
                "sId] = @propertiesId, [fieldsId] = @fieldsId WHERE (([id] = @Original_id) AND ((" +
                "@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original" +
                "_description)) AND ((@IsNull_dateTime = 1 AND [dateTime] IS NULL) OR ([dateTime]" +
                " = @Original_dateTime)) AND ((@IsNull_exceptionType = 1 AND [exceptionType] IS N" +
                "ULL) OR ([exceptionType] = @Original_exceptionType)) AND ((@IsNull_exceptionMess" +
                "age = 1 AND [exceptionMessage] IS NULL) OR ([exceptionMessage] = @Original_excep" +
                "tionMessage)) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Ori" +
                "ginal_source)) AND ((@IsNull_helpLink = 1 AND [helpLink] IS NULL) OR ([helpLink]" +
                " = @Original_helpLink)) AND ((@IsNull_exceptionDataId = 1 AND [exceptionDataId] " +
                "IS NULL) OR ([exceptionDataId] = @Original_exceptionDataId)) AND ((@IsNull_targe" +
                "tSiteId = 1 AND [targetSiteId] IS NULL) OR ([targetSiteId] = @Original_targetSit" +
                "eId)) AND ((@IsNull_stackTrace = 1 AND [stackTrace] IS NULL) OR ([stackTrace] = " +
                "@Original_stackTrace)) AND ((@IsNull_additionalInfoId = 1 AND [additionalInfoId]" +
                " IS NULL) OR ([additionalInfoId] = @Original_additionalInfoId)) AND ((@IsNull_di" +
                "agnosticInfoId = 1 AND [diagnosticInfoId] IS NULL) OR ([diagnosticInfoId] = @Ori" +
                "ginal_diagnosticInfoId)) AND ((@IsNull_propertiesId = 1 AND [propertiesId] IS NU" +
                "LL) OR ([propertiesId] = @Original_propertiesId)) AND ((@IsNull_fieldsId = 1 AND" +
                " [fieldsId] IS NULL) OR ([fieldsId] = @Original_fieldsId)));\r\nSELECT id, descrip" +
                "tion, dateTime, exceptionType, exceptionMessage, source, helpLink, exceptionData" +
                "Id, targetSiteId, stackTrace, additionalInfoId, diagnosticInfoId, propertiesId, " +
                "fieldsId FROM Exception WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@targetSiteId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@additionalInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@diagnosticInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionMessage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_source", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_helpLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionDataId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_targetSiteId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_targetSiteId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "targetSiteId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_stackTrace", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_additionalInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_additionalInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "additionalInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_diagnosticInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_diagnosticInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_propertiesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_propertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fieldsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fieldsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "diagnosticInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, description, dateTime, exceptionType, exceptionMessage, source, helpLi" +
                "nk, exceptionDataId, targetSiteId, stackTrace, additionalInfoId, diagnosticInfoI" +
                "d,propertiesId, fieldsId FROM dbo.Exception";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertException";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionType", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionMessage", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@helpLink", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@targetSiteId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@stackTrace", System.Data.SqlDbType.NVarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@additionalInfoId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@diagnosticInfoId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertiesId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldsId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ExceptionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ExceptionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ExceptionDataTable dataTable = new CriticalErrorDS.ExceptionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ExceptionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "Exception");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_description, System.Nullable<System.DateTime> Original_dateTime, string Original_exceptionType, string Original_exceptionMessage, string Original_source, string Original_helpLink, System.Nullable<System.Guid> Original_exceptionDataId, System.Nullable<System.Guid> Original_targetSiteId, string Original_stackTrace, System.Nullable<System.Guid> Original_additionalInfoId, System.Nullable<System.Guid> Original_diagnosticInfoId, System.Nullable<System.Guid> Original_propertiesId, System.Nullable<System.Guid> Original_fieldsId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_description));
            }
            if ((Original_dateTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_dateTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_exceptionType == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_exceptionType));
            }
            if ((Original_exceptionMessage == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_exceptionMessage));
            }
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_source));
            }
            if ((Original_helpLink == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_helpLink));
            }
            if ((Original_exceptionDataId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.Guid)(Original_exceptionDataId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_targetSiteId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.Guid)(Original_targetSiteId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_stackTrace == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_stackTrace));
            }
            if ((Original_additionalInfoId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.Guid)(Original_additionalInfoId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_diagnosticInfoId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((System.Guid)(Original_diagnosticInfoId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_propertiesId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((System.Guid)(Original_propertiesId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_fieldsId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((System.Guid)(Original_fieldsId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string description, System.Nullable<System.DateTime> dateTime, string exceptionType, string exceptionMessage, string source, string helpLink, System.Nullable<System.Guid> exceptionDataId, System.Nullable<System.Guid> targetSiteId, string stackTrace, System.Nullable<System.Guid> additionalInfoId, System.Nullable<System.Guid> diagnosticInfoId, System.Nullable<System.Guid> propertiesId, System.Nullable<System.Guid> fieldsId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            if ((dateTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(dateTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((exceptionType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(exceptionType));
            }
            if ((exceptionMessage == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(exceptionMessage));
            }
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(source));
            }
            if ((helpLink == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(helpLink));
            }
            if ((exceptionDataId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.Guid)(exceptionDataId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((targetSiteId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.Guid)(targetSiteId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((stackTrace == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(stackTrace));
            }
            if ((additionalInfoId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.Guid)(additionalInfoId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((diagnosticInfoId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.Guid)(diagnosticInfoId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((propertiesId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.Guid)(propertiesId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((fieldsId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.Guid)(fieldsId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    string description, 
                    System.Nullable<System.DateTime> dateTime, 
                    string exceptionType, 
                    string exceptionMessage, 
                    string source, 
                    string helpLink, 
                    System.Nullable<System.Guid> exceptionDataId, 
                    System.Nullable<System.Guid> targetSiteId, 
                    string stackTrace, 
                    System.Nullable<System.Guid> additionalInfoId, 
                    System.Nullable<System.Guid> diagnosticInfoId, 
                    System.Guid Original_id, 
                    string Original_description, 
                    System.Nullable<System.DateTime> Original_dateTime, 
                    string Original_exceptionType, 
                    string Original_exceptionMessage, 
                    string Original_source, 
                    string Original_helpLink, 
                    System.Nullable<System.Guid> Original_exceptionDataId, 
                    System.Nullable<System.Guid> Original_targetSiteId, 
                    string Original_stackTrace, 
                    System.Nullable<System.Guid> Original_additionalInfoId, 
                    System.Nullable<System.Guid> Original_diagnosticInfoId, 
                    System.Nullable<System.Guid> Original_propertiesId, 
                    System.Nullable<System.Guid> Original_fieldsId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            if ((dateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(dateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((exceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(exceptionType));
            }
            if ((exceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(exceptionMessage));
            }
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(source));
            }
            if ((helpLink == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(helpLink));
            }
            if ((exceptionDataId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(exceptionDataId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((targetSiteId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(targetSiteId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((stackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(stackTrace));
            }
            if ((additionalInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.Guid)(additionalInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((diagnosticInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.Guid)(diagnosticInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.Guid)(Original_id));
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_description));
            }
            if ((Original_dateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_dateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_exceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_exceptionType));
            }
            if ((Original_exceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_exceptionMessage));
            }
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source));
            }
            if ((Original_helpLink == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_helpLink));
            }
            if ((Original_exceptionDataId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.Guid)(Original_exceptionDataId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_targetSiteId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.Guid)(Original_targetSiteId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((Original_stackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_stackTrace));
            }
            if ((Original_additionalInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.Guid)(Original_additionalInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_diagnosticInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((System.Guid)(Original_diagnosticInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_propertiesId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.Guid)(Original_propertiesId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_fieldsId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((System.Guid)(Original_fieldsId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertException(System.Nullable<System.Guid> id, string description, System.Nullable<System.DateTime> dateTime, string exceptionType, string exceptionMessage, string source, string helpLink, System.Nullable<System.Guid> exceptionDataId, System.Nullable<System.Guid> targetSiteId, string stackTrace, System.Nullable<System.Guid> additionalInfoId, System.Nullable<System.Guid> diagnosticInfoId, System.Nullable<System.Guid> propertiesId, System.Nullable<System.Guid> fieldsId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((description == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(description));
            }
            if ((dateTime.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(dateTime.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((exceptionType == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(exceptionType));
            }
            if ((exceptionMessage == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(exceptionMessage));
            }
            if ((source == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(source));
            }
            if ((helpLink == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(helpLink));
            }
            if ((exceptionDataId.HasValue == true)) {
                command.Parameters[8].Value = ((System.Guid)(exceptionDataId.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            if ((targetSiteId.HasValue == true)) {
                command.Parameters[9].Value = ((System.Guid)(targetSiteId.Value));
            }
            else {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            if ((stackTrace == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(stackTrace));
            }
            if ((additionalInfoId.HasValue == true)) {
                command.Parameters[11].Value = ((System.Guid)(additionalInfoId.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((diagnosticInfoId.HasValue == true)) {
                command.Parameters[12].Value = ((System.Guid)(diagnosticInfoId.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            if ((propertiesId.HasValue == true)) {
                command.Parameters[13].Value = ((System.Guid)(propertiesId.Value));
            }
            else {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            if ((fieldsId.HasValue == true)) {
                command.Parameters[14].Value = ((System.Guid)(fieldsId.Value));
            }
            else {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExceptionData";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("dataKey", "dataKey");
            tableMapping.ColumnMappings.Add("dataValue", "dataValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ExceptionData] WHERE (([id] = @Original_id) AND ((@IsNull_data" +
                "Key = 1 AND [dataKey] IS NULL) OR ([dataKey] = @Original_dataKey)) AND ((@IsNull" +
                "_dataValue = 1 AND [dataValue] IS NULL) OR ([dataValue] = @Original_dataValue)))" +
                "";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dataKey", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dataKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dataValue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dataValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExceptionData] ([id], [dataKey], [dataValue]) VALUES (@id, @da" +
                "taKey, @dataValue);\r\nSELECT id, dataKey, dataValue FROM ExceptionData WHERE (id " +
                "= @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ExceptionData] SET [id] = @id, [dataKey] = @dataKey, [dataValue] = @dataValue WHERE (([id] = @Original_id) AND ((@IsNull_dataKey = 1 AND [dataKey] IS NULL) OR ([dataKey] = @Original_dataKey)) AND ((@IsNull_dataValue = 1 AND [dataValue] IS NULL) OR ([dataValue] = @Original_dataValue)));
SELECT id, dataKey, dataValue FROM ExceptionData WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dataKey", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dataKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dataValue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dataValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, dataKey, dataValue FROM dbo.ExceptionData";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertExceptionData";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataKey", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataValue", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ExceptionDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ExceptionDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ExceptionDataDataTable dataTable = new CriticalErrorDS.ExceptionDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ExceptionDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "ExceptionData");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_dataKey, string Original_dataValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_dataKey == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_dataKey));
            }
            if ((Original_dataValue == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_dataValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string dataKey, string dataValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((dataKey == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(dataKey));
            }
            if ((dataValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(dataValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid id, string dataKey, string dataValue, System.Guid Original_id, string Original_dataKey, string Original_dataValue) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((dataKey == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(dataKey));
            }
            if ((dataValue == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(dataValue));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_id));
            if ((Original_dataKey == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_dataKey));
            }
            if ((Original_dataValue == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_dataValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertExceptionData(System.Nullable<System.Guid> id, string dataKey, string dataValue) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((dataKey == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(dataKey));
            }
            if ((dataValue == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(dataValue));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GenericArgumentsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GenericArgumentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GenericArguments";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("type", "type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GenericArguments] ([id], [type]) VALUES (@id, @type)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@type", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, type FROM dbo.GenericArguments";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertGenericArguments";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@type", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.GenericArgumentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.GenericArgumentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.GenericArgumentsDataTable dataTable = new CriticalErrorDS.GenericArgumentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.GenericArgumentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "GenericArguments");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> id, string type) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((type == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(type));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertGenericArguments(System.Nullable<System.Guid> id, string type) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((type == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(type));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HostEnvironmentTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HostEnvironmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HostEnvironment";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("osVersion", "osVersion");
            tableMapping.ColumnMappings.Add("processorCount", "processorCount");
            tableMapping.ColumnMappings.Add("currentDirectory", "currentDirectory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[HostEnvironment] WHERE (([id] = @Original_id) AND ((@IsNull_osVersion = 1 AND [osVersion] IS NULL) OR ([osVersion] = @Original_osVersion)) AND ((@IsNull_processorCount = 1 AND [processorCount] IS NULL) OR ([processorCount] = @Original_processorCount)) AND ((@IsNull_currentDirectory = 1 AND [currentDirectory] IS NULL) OR ([currentDirectory] = @Original_currentDirectory)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_osVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_osVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processorCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processorCount", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_currentDirectory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_currentDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HostEnvironment] ([id], [osVersion], [processorCount], [curren" +
                "tDirectory]) VALUES (@id, @osVersion, @processorCount, @currentDirectory);\r\nSELE" +
                "CT id, osVersion, processorCount, currentDirectory FROM HostEnvironment WHERE (i" +
                "d = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@osVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processorCount", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@currentDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HostEnvironment] SET [id] = @id, [osVersion] = @osVersion, [processorCount] = @processorCount, [currentDirectory] = @currentDirectory WHERE (([id] = @Original_id) AND ((@IsNull_osVersion = 1 AND [osVersion] IS NULL) OR ([osVersion] = @Original_osVersion)) AND ((@IsNull_processorCount = 1 AND [processorCount] IS NULL) OR ([processorCount] = @Original_processorCount)) AND ((@IsNull_currentDirectory = 1 AND [currentDirectory] IS NULL) OR ([currentDirectory] = @Original_currentDirectory)));
SELECT id, osVersion, processorCount, currentDirectory FROM HostEnvironment WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@osVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processorCount", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@currentDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_osVersion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_osVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processorCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processorCount", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_currentDirectory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_currentDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, osVersion, processorCount, currentDirectory FROM dbo.HostEnvironment";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertHostEnvironment";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@osVersion", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processorCount", System.Data.SqlDbType.SmallInt, 2, System.Data.ParameterDirection.Input, 5, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@currentDirectory", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.HostEnvironmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.HostEnvironmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.HostEnvironmentDataTable dataTable = new CriticalErrorDS.HostEnvironmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.HostEnvironmentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "HostEnvironment");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_osVersion, System.Nullable<short> Original_processorCount, string Original_currentDirectory) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_osVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_osVersion));
            }
            if ((Original_processorCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((short)(Original_processorCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_currentDirectory == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_currentDirectory));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string osVersion, System.Nullable<short> processorCount, string currentDirectory) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((osVersion == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(osVersion));
            }
            if ((processorCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((short)(processorCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((currentDirectory == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(currentDirectory));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Guid id, string osVersion, System.Nullable<short> processorCount, string currentDirectory, System.Guid Original_id, string Original_osVersion, System.Nullable<short> Original_processorCount, string Original_currentDirectory) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((osVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(osVersion));
            }
            if ((processorCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(processorCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((currentDirectory == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(currentDirectory));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_id));
            if ((Original_osVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_osVersion));
            }
            if ((Original_processorCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(Original_processorCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_currentDirectory == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_currentDirectory));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertHostEnvironment(System.Nullable<System.Guid> id, string osVersion, System.Nullable<short> processorCount, string currentDirectory) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((osVersion == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(osVersion));
            }
            if ((processorCount.HasValue == true)) {
                command.Parameters[3].Value = ((short)(processorCount.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((currentDirectory == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(currentDirectory));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InnerExceptionsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InnerExceptionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InnerExceptions";
            tableMapping.ColumnMappings.Add("exceptionId", "exceptionId");
            tableMapping.ColumnMappings.Add("innerExceptionId", "innerExceptionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[InnerExceptions] ([exceptionId], [innerExceptionId]) VALUES (@" +
                "exceptionId, @innerExceptionId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@innerExceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "innerExceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT exceptionId, innerExceptionId FROM dbo.InnerExceptions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertInnerExceptions";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@innerExceptionId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.InnerExceptionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.InnerExceptionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.InnerExceptionsDataTable dataTable = new CriticalErrorDS.InnerExceptionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.InnerExceptionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "InnerExceptions");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> exceptionId, System.Nullable<System.Guid> innerExceptionId) {
            if ((exceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((innerExceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(innerExceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertInnerExceptions(System.Nullable<System.Guid> exceptionId, System.Nullable<System.Guid> innerExceptionId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((exceptionId.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((innerExceptionId.HasValue == true)) {
                command.Parameters[2].Value = ((System.Guid)(innerExceptionId.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LogEntryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LogEntryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LogEntry";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("siteCode", "siteCode");
            tableMapping.ColumnMappings.Add("issueTag", "issueTag");
            tableMapping.ColumnMappings.Add("activityId", "activityId");
            tableMapping.ColumnMappings.Add("appDomainName", "appDomainName");
            tableMapping.ColumnMappings.Add("errorMessages", "errorMessages");
            tableMapping.ColumnMappings.Add("eventId", "eventId");
            tableMapping.ColumnMappings.Add("loggedSeverity", "loggedSeverity");
            tableMapping.ColumnMappings.Add("machineName", "machineName");
            tableMapping.ColumnMappings.Add("managedThreadName", "managedThreadName");
            tableMapping.ColumnMappings.Add("priority", "priority");
            tableMapping.ColumnMappings.Add("processId", "processId");
            tableMapping.ColumnMappings.Add("processName", "processName");
            tableMapping.ColumnMappings.Add("severity", "severity");
            tableMapping.ColumnMappings.Add("timeStamp", "timeStamp");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("win32ThreadId", "win32ThreadId");
            tableMapping.ColumnMappings.Add("categoriesId", "categoriesId");
            tableMapping.ColumnMappings.Add("exceptionId", "exceptionId");
            tableMapping.ColumnMappings.Add("extendedPropertiesId", "extendedPropertiesId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [LogEntry] WHERE (([id] = @Original_id) AND ((@IsNull_siteCode = 1 AN" +
                "D [siteCode] IS NULL) OR ([siteCode] = @Original_siteCode)) AND ((@IsNull_issueT" +
                "ag = 1 AND [issueTag] IS NULL) OR ([issueTag] = @Original_issueTag)) AND ((@IsNu" +
                "ll_activityId = 1 AND [activityId] IS NULL) OR ([activityId] = @Original_activit" +
                "yId)) AND ((@IsNull_appDomainName = 1 AND [appDomainName] IS NULL) OR ([appDomai" +
                "nName] = @Original_appDomainName)) AND ((@IsNull_errorMessages = 1 AND [errorMes" +
                "sages] IS NULL) OR ([errorMessages] = @Original_errorMessages)) AND ((@IsNull_ev" +
                "entId = 1 AND [eventId] IS NULL) OR ([eventId] = @Original_eventId)) AND ((@IsNu" +
                "ll_loggedSeverity = 1 AND [loggedSeverity] IS NULL) OR ([loggedSeverity] = @Orig" +
                "inal_loggedSeverity)) AND ((@IsNull_machineName = 1 AND [machineName] IS NULL) O" +
                "R ([machineName] = @Original_machineName)) AND ((@IsNull_managedThreadName = 1 A" +
                "ND [managedThreadName] IS NULL) OR ([managedThreadName] = @Original_managedThrea" +
                "dName)) AND ((@IsNull_priority = 1 AND [priority] IS NULL) OR ([priority] = @Ori" +
                "ginal_priority)) AND ((@IsNull_processId = 1 AND [processId] IS NULL) OR ([proce" +
                "ssId] = @Original_processId)) AND ((@IsNull_processName = 1 AND [processName] IS" +
                " NULL) OR ([processName] = @Original_processName)) AND ((@IsNull_severity = 1 AN" +
                "D [severity] IS NULL) OR ([severity] = @Original_severity)) AND ((@IsNull_timeSt" +
                "amp = 1 AND [timeStamp] IS NULL) OR ([timeStamp] = @Original_timeStamp)) AND ((@" +
                "IsNull_title = 1 AND [title] IS NULL) OR ([title] = @Original_title)) AND ((@IsN" +
                "ull_win32ThreadId = 1 AND [win32ThreadId] IS NULL) OR ([win32ThreadId] = @Origin" +
                "al_win32ThreadId)) AND ((@IsNull_categoriesId = 1 AND [categoriesId] IS NULL) OR" +
                " ([categoriesId] = @Original_categoriesId)) AND ((@IsNull_extendedPropertiesId =" +
                " 1 AND [extendedPropertiesId] IS NULL) OR ([extendedPropertiesId] = @Original_ex" +
                "tendedPropertiesId)) AND ((@IsNull_exceptionId = 1 AND [exceptionId] IS NULL) OR" +
                " ([exceptionId] = @Original_exceptionId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_siteCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_siteCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_issueTag", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_issueTag", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_activityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_activityId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_appDomainName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_appDomainName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_errorMessages", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_errorMessages", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_loggedSeverity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_loggedSeverity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_machineName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_machineName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_managedThreadName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_managedThreadName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_severity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_severity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_timeStamp", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_categoriesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_categoriesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_extendedPropertiesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_extendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [LogEntry] ([id], [siteCode], [issueTag], [activityId], [appDomainName], [errorMessages], [eventId], [loggedSeverity], [machineName], [managedThreadName], [priority], [processId], [processName], [severity], [timeStamp], [title], [win32ThreadId], [categoriesId], [extendedPropertiesId], [exceptionId]) VALUES (@id, @siteCode, @issueTag, @activityId, @appDomainName, @errorMessages, @eventId, @loggedSeverity, @machineName, @managedThreadName, @priority, @processId, @processName, @severity, @timeStamp, @title, @win32ThreadId, @categoriesId, @extendedPropertiesId, @exceptionId);
SELECT id, siteCode, issueTag, activityId, appDomainName, errorMessages, eventId, loggedSeverity, machineName, managedThreadName, priority, processId, processName, severity, timeStamp, title, win32ThreadId, categoriesId, extendedPropertiesId, exceptionId FROM LogEntry WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@siteCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@issueTag", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@activityId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@appDomainName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@errorMessages", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@loggedSeverity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@machineName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@managedThreadName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@severity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@categoriesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@extendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [LogEntry] SET [id] = @id, [siteCode] = @siteCode, [issueTag] = @issueTag," +
                " [activityId] = @activityId, [appDomainName] = @appDomainName, [errorMessages] =" +
                " @errorMessages, [eventId] = @eventId, [loggedSeverity] = @loggedSeverity, [mach" +
                "ineName] = @machineName, [managedThreadName] = @managedThreadName, [priority] = " +
                "@priority, [processId] = @processId, [processName] = @processName, [severity] = " +
                "@severity, [timeStamp] = @timeStamp, [title] = @title, [win32ThreadId] = @win32T" +
                "hreadId, [categoriesId] = @categoriesId, [extendedPropertiesId] = @extendedPrope" +
                "rtiesId, [exceptionId] = @exceptionId WHERE (([id] = @Original_id) AND ((@IsNull" +
                "_siteCode = 1 AND [siteCode] IS NULL) OR ([siteCode] = @Original_siteCode)) AND " +
                "((@IsNull_issueTag = 1 AND [issueTag] IS NULL) OR ([issueTag] = @Original_issueT" +
                "ag)) AND ((@IsNull_activityId = 1 AND [activityId] IS NULL) OR ([activityId] = @" +
                "Original_activityId)) AND ((@IsNull_appDomainName = 1 AND [appDomainName] IS NUL" +
                "L) OR ([appDomainName] = @Original_appDomainName)) AND ((@IsNull_errorMessages =" +
                " 1 AND [errorMessages] IS NULL) OR ([errorMessages] = @Original_errorMessages)) " +
                "AND ((@IsNull_eventId = 1 AND [eventId] IS NULL) OR ([eventId] = @Original_event" +
                "Id)) AND ((@IsNull_loggedSeverity = 1 AND [loggedSeverity] IS NULL) OR ([loggedS" +
                "everity] = @Original_loggedSeverity)) AND ((@IsNull_machineName = 1 AND [machine" +
                "Name] IS NULL) OR ([machineName] = @Original_machineName)) AND ((@IsNull_managed" +
                "ThreadName = 1 AND [managedThreadName] IS NULL) OR ([managedThreadName] = @Origi" +
                "nal_managedThreadName)) AND ((@IsNull_priority = 1 AND [priority] IS NULL) OR ([" +
                "priority] = @Original_priority)) AND ((@IsNull_processId = 1 AND [processId] IS " +
                "NULL) OR ([processId] = @Original_processId)) AND ((@IsNull_processName = 1 AND " +
                "[processName] IS NULL) OR ([processName] = @Original_processName)) AND ((@IsNull" +
                "_severity = 1 AND [severity] IS NULL) OR ([severity] = @Original_severity)) AND " +
                "((@IsNull_timeStamp = 1 AND [timeStamp] IS NULL) OR ([timeStamp] = @Original_tim" +
                "eStamp)) AND ((@IsNull_title = 1 AND [title] IS NULL) OR ([title] = @Original_ti" +
                "tle)) AND ((@IsNull_win32ThreadId = 1 AND [win32ThreadId] IS NULL) OR ([win32Thr" +
                "eadId] = @Original_win32ThreadId)) AND ((@IsNull_categoriesId = 1 AND [categorie" +
                "sId] IS NULL) OR ([categoriesId] = @Original_categoriesId)) AND ((@IsNull_extend" +
                "edPropertiesId = 1 AND [extendedPropertiesId] IS NULL) OR ([extendedPropertiesId" +
                "] = @Original_extendedPropertiesId)) AND ((@IsNull_exceptionId = 1 AND [exceptio" +
                "nId] IS NULL) OR ([exceptionId] = @Original_exceptionId)));\r\nSELECT id, siteCode" +
                ", issueTag, activityId, appDomainName, errorMessages, eventId, loggedSeverity, m" +
                "achineName, managedThreadName, priority, processId, processName, severity, timeS" +
                "tamp, title, win32ThreadId, categoriesId, extendedPropertiesId, exceptionId FROM" +
                " LogEntry WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@siteCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@issueTag", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@activityId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@appDomainName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@errorMessages", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@loggedSeverity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@machineName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@managedThreadName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@severity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@categoriesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@extendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_siteCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_siteCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_issueTag", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_issueTag", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_activityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_activityId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_appDomainName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_appDomainName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_errorMessages", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_errorMessages", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_loggedSeverity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_loggedSeverity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_machineName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_machineName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_managedThreadName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_managedThreadName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_severity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_severity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_timeStamp", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_categoriesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_categoriesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_extendedPropertiesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_extendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "extendedPropertiesId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     id, siteCode, issueTag, activityId, appDomainName, errorMessages, eventId, loggedSeverity, machineName, managedThreadName, priority, 
                      processId, processName, severity, timeStamp, title, win32ThreadId, categoriesId, extendedPropertiesId, exceptionId
FROM         LogEntry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertLogEntry";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@siteCode", System.Data.SqlDbType.NVarChar, 32, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@issueTag", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@activityId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@appDomainName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@errorMessages", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@eventId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@loggedSeverity", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@machineName", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@managedThreadName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@severity", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@win32ThreadId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@categoriesId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@extendedPropsId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.LogEntryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.LogEntryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.LogEntryDataTable dataTable = new CriticalErrorDS.LogEntryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.LogEntryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "LogEntry");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    System.Guid Original_id, 
                    string Original_siteCode, 
                    System.Nullable<System.Guid> Original_issueTag, 
                    System.Nullable<System.Guid> Original_activityId, 
                    string Original_appDomainName, 
                    string Original_errorMessages, 
                    System.Nullable<int> Original_eventId, 
                    string Original_loggedSeverity, 
                    string Original_machineName, 
                    string Original_managedThreadName, 
                    System.Nullable<int> Original_priority, 
                    System.Nullable<int> Original_processId, 
                    string Original_processName, 
                    string Original_severity, 
                    System.Nullable<System.DateTime> Original_timeStamp, 
                    string Original_title, 
                    System.Nullable<int> Original_win32ThreadId, 
                    System.Nullable<System.Guid> Original_categoriesId, 
                    System.Nullable<System.Guid> Original_extendedPropertiesId, 
                    System.Nullable<System.Guid> Original_exceptionId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_siteCode == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_siteCode));
            }
            if ((Original_issueTag.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.Guid)(Original_issueTag.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_activityId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.Guid)(Original_activityId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_appDomainName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_appDomainName));
            }
            if ((Original_errorMessages == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_errorMessages));
            }
            if ((Original_eventId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_eventId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_loggedSeverity == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_loggedSeverity));
            }
            if ((Original_machineName == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_machineName));
            }
            if ((Original_managedThreadName == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_managedThreadName));
            }
            if ((Original_priority.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_priority.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_processId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_processId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_processName == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_processName));
            }
            if ((Original_severity == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_severity));
            }
            if ((Original_timeStamp.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((System.DateTime)(Original_timeStamp.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((Original_title == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_title));
            }
            if ((Original_win32ThreadId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((int)(Original_win32ThreadId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_categoriesId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((System.Guid)(Original_categoriesId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_extendedPropertiesId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((System.Guid)(Original_extendedPropertiesId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_exceptionId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((System.Guid)(Original_exceptionId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid id, 
                    string siteCode, 
                    System.Nullable<System.Guid> issueTag, 
                    System.Nullable<System.Guid> activityId, 
                    string appDomainName, 
                    string errorMessages, 
                    System.Nullable<int> eventId, 
                    string loggedSeverity, 
                    string machineName, 
                    string managedThreadName, 
                    System.Nullable<int> priority, 
                    System.Nullable<int> processId, 
                    string processName, 
                    string severity, 
                    System.Nullable<System.DateTime> timeStamp, 
                    string title, 
                    System.Nullable<int> win32ThreadId, 
                    System.Nullable<System.Guid> categoriesId, 
                    System.Nullable<System.Guid> extendedPropertiesId, 
                    System.Nullable<System.Guid> exceptionId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((siteCode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(siteCode));
            }
            if ((issueTag.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(issueTag.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((activityId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(activityId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((appDomainName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(appDomainName));
            }
            if ((errorMessages == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(errorMessages));
            }
            if ((eventId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(eventId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((loggedSeverity == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(loggedSeverity));
            }
            if ((machineName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(machineName));
            }
            if ((managedThreadName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(managedThreadName));
            }
            if ((priority.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(priority.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((processName == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(processName));
            }
            if ((severity == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(severity));
            }
            if ((timeStamp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((title == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(title));
            }
            if ((win32ThreadId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(win32ThreadId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((categoriesId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.Guid)(categoriesId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((extendedPropertiesId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.Guid)(extendedPropertiesId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((exceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    string siteCode, 
                    System.Nullable<System.Guid> issueTag, 
                    System.Nullable<System.Guid> activityId, 
                    string appDomainName, 
                    string errorMessages, 
                    System.Nullable<int> eventId, 
                    string loggedSeverity, 
                    string machineName, 
                    string managedThreadName, 
                    System.Nullable<int> priority, 
                    System.Nullable<int> processId, 
                    string processName, 
                    string severity, 
                    System.Nullable<System.DateTime> timeStamp, 
                    string title, 
                    System.Nullable<int> win32ThreadId, 
                    System.Nullable<System.Guid> categoriesId, 
                    System.Nullable<System.Guid> extendedPropertiesId, 
                    System.Nullable<System.Guid> exceptionId, 
                    System.Guid Original_id, 
                    string Original_siteCode, 
                    System.Nullable<System.Guid> Original_issueTag, 
                    System.Nullable<System.Guid> Original_activityId, 
                    string Original_appDomainName, 
                    string Original_errorMessages, 
                    System.Nullable<int> Original_eventId, 
                    string Original_loggedSeverity, 
                    string Original_machineName, 
                    string Original_managedThreadName, 
                    System.Nullable<int> Original_priority, 
                    System.Nullable<int> Original_processId, 
                    string Original_processName, 
                    string Original_severity, 
                    System.Nullable<System.DateTime> Original_timeStamp, 
                    string Original_title, 
                    System.Nullable<int> Original_win32ThreadId, 
                    System.Nullable<System.Guid> Original_categoriesId, 
                    System.Nullable<System.Guid> Original_extendedPropertiesId, 
                    System.Nullable<System.Guid> Original_exceptionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((siteCode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(siteCode));
            }
            if ((issueTag.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(issueTag.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((activityId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(activityId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((appDomainName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(appDomainName));
            }
            if ((errorMessages == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(errorMessages));
            }
            if ((eventId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(eventId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((loggedSeverity == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(loggedSeverity));
            }
            if ((machineName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(machineName));
            }
            if ((managedThreadName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(managedThreadName));
            }
            if ((priority.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(priority.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((processName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(processName));
            }
            if ((severity == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(severity));
            }
            if ((timeStamp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((title == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(title));
            }
            if ((win32ThreadId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(win32ThreadId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((categoriesId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(categoriesId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((extendedPropertiesId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.Guid)(extendedPropertiesId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((exceptionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.Guid)(Original_id));
            if ((Original_siteCode == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_siteCode));
            }
            if ((Original_issueTag.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.Guid)(Original_issueTag.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_activityId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.Guid)(Original_activityId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_appDomainName == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_appDomainName));
            }
            if ((Original_errorMessages == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_errorMessages));
            }
            if ((Original_eventId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_eventId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_loggedSeverity == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_loggedSeverity));
            }
            if ((Original_machineName == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_machineName));
            }
            if ((Original_managedThreadName == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_managedThreadName));
            }
            if ((Original_priority.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_priority.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            if ((Original_processId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_processId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = System.DBNull.Value;
            }
            if ((Original_processName == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_processName));
            }
            if ((Original_severity == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_severity));
            }
            if ((Original_timeStamp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((System.DateTime)(Original_timeStamp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = System.DBNull.Value;
            }
            if ((Original_title == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_title));
            }
            if ((Original_win32ThreadId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(Original_win32ThreadId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = System.DBNull.Value;
            }
            if ((Original_categoriesId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((System.Guid)(Original_categoriesId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = System.DBNull.Value;
            }
            if ((Original_extendedPropertiesId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((System.Guid)(Original_extendedPropertiesId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = System.DBNull.Value;
            }
            if ((Original_exceptionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((System.Guid)(Original_exceptionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertLogEntry(
                    System.Nullable<System.Guid> id, 
                    string siteCode, 
                    System.Nullable<System.Guid> issueTag, 
                    System.Nullable<System.Guid> activityId, 
                    string appDomainName, 
                    string errorMessages, 
                    System.Nullable<int> eventId, 
                    string loggedSeverity, 
                    string machineName, 
                    string managedThreadName, 
                    System.Nullable<int> priority, 
                    System.Nullable<int> processId, 
                    string processName, 
                    string severity, 
                    System.Nullable<System.DateTime> timeStamp, 
                    string title, 
                    System.Nullable<int> win32ThreadId, 
                    System.Nullable<System.Guid> categoriesId, 
                    System.Nullable<System.Guid> extendedPropsId, 
                    System.Nullable<System.Guid> exceptionId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((siteCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(siteCode));
            }
            if ((issueTag.HasValue == true)) {
                command.Parameters[3].Value = ((System.Guid)(issueTag.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((activityId.HasValue == true)) {
                command.Parameters[4].Value = ((System.Guid)(activityId.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((appDomainName == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(appDomainName));
            }
            if ((errorMessages == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(errorMessages));
            }
            if ((eventId.HasValue == true)) {
                command.Parameters[7].Value = ((int)(eventId.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((loggedSeverity == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(loggedSeverity));
            }
            if ((machineName == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(machineName));
            }
            if ((managedThreadName == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(managedThreadName));
            }
            if ((priority.HasValue == true)) {
                command.Parameters[11].Value = ((int)(priority.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                command.Parameters[12].Value = ((int)(processId.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            if ((processName == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(processName));
            }
            if ((severity == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(severity));
            }
            if ((timeStamp.HasValue == true)) {
                command.Parameters[15].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            if ((title == null)) {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[16].Value = ((string)(title));
            }
            if ((win32ThreadId.HasValue == true)) {
                command.Parameters[17].Value = ((int)(win32ThreadId.Value));
            }
            else {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            if ((categoriesId.HasValue == true)) {
                command.Parameters[18].Value = ((System.Guid)(categoriesId.Value));
            }
            else {
                command.Parameters[18].Value = System.DBNull.Value;
            }
            if ((extendedPropsId.HasValue == true)) {
                command.Parameters[19].Value = ((System.Guid)(extendedPropsId.Value));
            }
            else {
                command.Parameters[19].Value = System.DBNull.Value;
            }
            if ((exceptionId.HasValue == true)) {
                command.Parameters[20].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                command.Parameters[20].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProcessInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProcessInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ProcessInfo";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("startTime", "startTime");
            tableMapping.ColumnMappings.Add("processId", "processId");
            tableMapping.ColumnMappings.Add("terminalServicesSessionId", "terminalServicesSessionId");
            tableMapping.ColumnMappings.Add("nonPagedSystemMemorySize", "nonPagedSystemMemorySize");
            tableMapping.ColumnMappings.Add("pagedMemorySize", "pagedMemorySize");
            tableMapping.ColumnMappings.Add("pagedSystemMemory", "pagedSystemMemory");
            tableMapping.ColumnMappings.Add("peakPagedMemorySize", "peakPagedMemorySize");
            tableMapping.ColumnMappings.Add("peakVirtualMemorySize", "peakVirtualMemorySize");
            tableMapping.ColumnMappings.Add("peakWorkingSet", "peakWorkingSet");
            tableMapping.ColumnMappings.Add("privateMemorySize", "privateMemorySize");
            tableMapping.ColumnMappings.Add("virtualMemorySize", "virtualMemorySize");
            tableMapping.ColumnMappings.Add("workingSet", "workingSet");
            tableMapping.ColumnMappings.Add("totalProcessorTimeDays", "totalProcessorTimeDays");
            tableMapping.ColumnMappings.Add("totalProcessorTimeHours", "totalProcessorTimeHours");
            tableMapping.ColumnMappings.Add("totalProcessorTimeMinutes", "totalProcessorTimeMinutes");
            tableMapping.ColumnMappings.Add("totalProcessorTimeSeconds", "totalProcessorTimeSeconds");
            tableMapping.ColumnMappings.Add("totalProcessorTimeFraction", "totalProcessorTimeFraction");
            tableMapping.ColumnMappings.Add("userProcessorTimeDays", "userProcessorTimeDays");
            tableMapping.ColumnMappings.Add("userProcessorTimeHours", "userProcessorTimeHours");
            tableMapping.ColumnMappings.Add("userProcessorTimeMinutes", "userProcessorTimeMinutes");
            tableMapping.ColumnMappings.Add("userProcessorTimeSeconds", "userProcessorTimeSeconds");
            tableMapping.ColumnMappings.Add("userProcessorTimeFraction", "userProcessorTimeFraction");
            tableMapping.ColumnMappings.Add("threadCount", "threadCount");
            tableMapping.ColumnMappings.Add("startInfoId", "startInfoId");
            tableMapping.ColumnMappings.Add("processEnvironmentId", "processEnvironmentId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ProcessInfo] WHERE (([id] = @Original_id) AND ((@IsNull_startT" +
                "ime = 1 AND [startTime] IS NULL) OR ([startTime] = @Original_startTime)) AND ((@" +
                "IsNull_processId = 1 AND [processId] IS NULL) OR ([processId] = @Original_proces" +
                "sId)) AND ((@IsNull_terminalServicesSessionId = 1 AND [terminalServicesSessionId" +
                "] IS NULL) OR ([terminalServicesSessionId] = @Original_terminalServicesSessionId" +
                ")) AND ((@IsNull_nonPagedSystemMemorySize = 1 AND [nonPagedSystemMemorySize] IS " +
                "NULL) OR ([nonPagedSystemMemorySize] = @Original_nonPagedSystemMemorySize)) AND " +
                "((@IsNull_pagedMemorySize = 1 AND [pagedMemorySize] IS NULL) OR ([pagedMemorySiz" +
                "e] = @Original_pagedMemorySize)) AND ((@IsNull_pagedSystemMemory = 1 AND [pagedS" +
                "ystemMemory] IS NULL) OR ([pagedSystemMemory] = @Original_pagedSystemMemory)) AN" +
                "D ((@IsNull_peakPagedMemorySize = 1 AND [peakPagedMemorySize] IS NULL) OR ([peak" +
                "PagedMemorySize] = @Original_peakPagedMemorySize)) AND ((@IsNull_peakVirtualMemo" +
                "rySize = 1 AND [peakVirtualMemorySize] IS NULL) OR ([peakVirtualMemorySize] = @O" +
                "riginal_peakVirtualMemorySize)) AND ((@IsNull_peakWorkingSet = 1 AND [peakWorkin" +
                "gSet] IS NULL) OR ([peakWorkingSet] = @Original_peakWorkingSet)) AND ((@IsNull_p" +
                "rivateMemorySize = 1 AND [privateMemorySize] IS NULL) OR ([privateMemorySize] = " +
                "@Original_privateMemorySize)) AND ((@IsNull_virtualMemorySize = 1 AND [virtualMe" +
                "morySize] IS NULL) OR ([virtualMemorySize] = @Original_virtualMemorySize)) AND (" +
                "(@IsNull_workingSet = 1 AND [workingSet] IS NULL) OR ([workingSet] = @Original_w" +
                "orkingSet)) AND ((@IsNull_totalProcessorTimeDays = 1 AND [totalProcessorTimeDays" +
                "] IS NULL) OR ([totalProcessorTimeDays] = @Original_totalProcessorTimeDays)) AND" +
                " ((@IsNull_totalProcessorTimeHours = 1 AND [totalProcessorTimeHours] IS NULL) OR" +
                " ([totalProcessorTimeHours] = @Original_totalProcessorTimeHours)) AND ((@IsNull_" +
                "totalProcessorTimeMinutes = 1 AND [totalProcessorTimeMinutes] IS NULL) OR ([tota" +
                "lProcessorTimeMinutes] = @Original_totalProcessorTimeMinutes)) AND ((@IsNull_tot" +
                "alProcessorTimeSeconds = 1 AND [totalProcessorTimeSeconds] IS NULL) OR ([totalPr" +
                "ocessorTimeSeconds] = @Original_totalProcessorTimeSeconds)) AND ((@IsNull_totalP" +
                "rocessorTimeFraction = 1 AND [totalProcessorTimeFraction] IS NULL) OR ([totalPro" +
                "cessorTimeFraction] = @Original_totalProcessorTimeFraction)) AND ((@IsNull_userP" +
                "rocessorTimeDays = 1 AND [userProcessorTimeDays] IS NULL) OR ([userProcessorTime" +
                "Days] = @Original_userProcessorTimeDays)) AND ((@IsNull_userProcessorTimeHours =" +
                " 1 AND [userProcessorTimeHours] IS NULL) OR ([userProcessorTimeHours] = @Origina" +
                "l_userProcessorTimeHours)) AND ((@IsNull_userProcessorTimeMinutes = 1 AND [userP" +
                "rocessorTimeMinutes] IS NULL) OR ([userProcessorTimeMinutes] = @Original_userPro" +
                "cessorTimeMinutes)) AND ((@IsNull_userProcessorTimeSeconds = 1 AND [userProcesso" +
                "rTimeSeconds] IS NULL) OR ([userProcessorTimeSeconds] = @Original_userProcessorT" +
                "imeSeconds)) AND ((@IsNull_userProcessorTimeFraction = 1 AND [userProcessorTimeF" +
                "raction] IS NULL) OR ([userProcessorTimeFraction] = @Original_userProcessorTimeF" +
                "raction)) AND ((@IsNull_threadCount = 1 AND [threadCount] IS NULL) OR ([threadCo" +
                "unt] = @Original_threadCount)) AND ((@IsNull_startInfoId = 1 AND [startInfoId] I" +
                "S NULL) OR ([startInfoId] = @Original_startInfoId)) AND ((@IsNull_processEnviron" +
                "mentId = 1 AND [processEnvironmentId] IS NULL) OR ([processEnvironmentId] = @Ori" +
                "ginal_processEnvironmentId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nonPagedSystemMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pagedMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pagedSystemMemory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pagedSystemMemory", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakPagedMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakPagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakVirtualMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakWorkingSet", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakWorkingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_privateMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_privateMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_virtualMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_virtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_workingSet", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_workingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeFraction", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "totalProcessorTimeFraction", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeFraction", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "userProcessorTimeFraction", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ProcessInfo] ([id], [startTime], [processId], [terminalService" +
                "sSessionId], [nonPagedSystemMemorySize], [pagedMemorySize], [pagedSystemMemory]," +
                " [peakPagedMemorySize], [peakVirtualMemorySize], [peakWorkingSet], [privateMemor" +
                "ySize], [virtualMemorySize], [workingSet], [totalProcessorTimeDays], [totalProce" +
                "ssorTimeHours], [totalProcessorTimeMinutes], [totalProcessorTimeSeconds], [total" +
                "ProcessorTimeFraction], [userProcessorTimeDays], [userProcessorTimeHours], [user" +
                "ProcessorTimeMinutes], [userProcessorTimeSeconds], [userProcessorTimeFraction], " +
                "[threadCount], [startInfoId], [processEnvironmentId]) VALUES (@id, @startTime, @" +
                "processId, @terminalServicesSessionId, @nonPagedSystemMemorySize, @pagedMemorySi" +
                "ze, @pagedSystemMemory, @peakPagedMemorySize, @peakVirtualMemorySize, @peakWorki" +
                "ngSet, @privateMemorySize, @virtualMemorySize, @workingSet, @totalProcessorTimeD" +
                "ays, @totalProcessorTimeHours, @totalProcessorTimeMinutes, @totalProcessorTimeSe" +
                "conds, @totalProcessorTimeFraction, @userProcessorTimeDays, @userProcessorTimeHo" +
                "urs, @userProcessorTimeMinutes, @userProcessorTimeSeconds, @userProcessorTimeFra" +
                "ction, @threadCount, @startInfoId, @processEnvironmentId);\r\nSELECT id, startTime" +
                ", processId, terminalServicesSessionId, nonPagedSystemMemorySize, pagedMemorySiz" +
                "e, pagedSystemMemory, peakPagedMemorySize, peakVirtualMemorySize, peakWorkingSet" +
                ", privateMemorySize, virtualMemorySize, workingSet, totalProcessorTimeDays, tota" +
                "lProcessorTimeHours, totalProcessorTimeMinutes, totalProcessorTimeSeconds, total" +
                "ProcessorTimeFraction, userProcessorTimeDays, userProcessorTimeHours, userProces" +
                "sorTimeMinutes, userProcessorTimeSeconds, userProcessorTimeFraction, threadCount" +
                ", startInfoId, processEnvironmentId FROM ProcessInfo WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedSystemMemory", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakPagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakWorkingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@privateMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@virtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "totalProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "userProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ProcessInfo] SET [id] = @id, [startTime] = @startTime, [processId] " +
                "= @processId, [terminalServicesSessionId] = @terminalServicesSessionId, [nonPage" +
                "dSystemMemorySize] = @nonPagedSystemMemorySize, [pagedMemorySize] = @pagedMemory" +
                "Size, [pagedSystemMemory] = @pagedSystemMemory, [peakPagedMemorySize] = @peakPag" +
                "edMemorySize, [peakVirtualMemorySize] = @peakVirtualMemorySize, [peakWorkingSet]" +
                " = @peakWorkingSet, [privateMemorySize] = @privateMemorySize, [virtualMemorySize" +
                "] = @virtualMemorySize, [workingSet] = @workingSet, [totalProcessorTimeDays] = @" +
                "totalProcessorTimeDays, [totalProcessorTimeHours] = @totalProcessorTimeHours, [t" +
                "otalProcessorTimeMinutes] = @totalProcessorTimeMinutes, [totalProcessorTimeSecon" +
                "ds] = @totalProcessorTimeSeconds, [totalProcessorTimeFraction] = @totalProcessor" +
                "TimeFraction, [userProcessorTimeDays] = @userProcessorTimeDays, [userProcessorTi" +
                "meHours] = @userProcessorTimeHours, [userProcessorTimeMinutes] = @userProcessorT" +
                "imeMinutes, [userProcessorTimeSeconds] = @userProcessorTimeSeconds, [userProcess" +
                "orTimeFraction] = @userProcessorTimeFraction, [threadCount] = @threadCount, [sta" +
                "rtInfoId] = @startInfoId, [processEnvironmentId] = @processEnvironmentId WHERE (" +
                "([id] = @Original_id) AND ((@IsNull_startTime = 1 AND [startTime] IS NULL) OR ([" +
                "startTime] = @Original_startTime)) AND ((@IsNull_processId = 1 AND [processId] I" +
                "S NULL) OR ([processId] = @Original_processId)) AND ((@IsNull_terminalServicesSe" +
                "ssionId = 1 AND [terminalServicesSessionId] IS NULL) OR ([terminalServicesSessio" +
                "nId] = @Original_terminalServicesSessionId)) AND ((@IsNull_nonPagedSystemMemoryS" +
                "ize = 1 AND [nonPagedSystemMemorySize] IS NULL) OR ([nonPagedSystemMemorySize] =" +
                " @Original_nonPagedSystemMemorySize)) AND ((@IsNull_pagedMemorySize = 1 AND [pag" +
                "edMemorySize] IS NULL) OR ([pagedMemorySize] = @Original_pagedMemorySize)) AND (" +
                "(@IsNull_pagedSystemMemory = 1 AND [pagedSystemMemory] IS NULL) OR ([pagedSystem" +
                "Memory] = @Original_pagedSystemMemory)) AND ((@IsNull_peakPagedMemorySize = 1 AN" +
                "D [peakPagedMemorySize] IS NULL) OR ([peakPagedMemorySize] = @Original_peakPaged" +
                "MemorySize)) AND ((@IsNull_peakVirtualMemorySize = 1 AND [peakVirtualMemorySize]" +
                " IS NULL) OR ([peakVirtualMemorySize] = @Original_peakVirtualMemorySize)) AND ((" +
                "@IsNull_peakWorkingSet = 1 AND [peakWorkingSet] IS NULL) OR ([peakWorkingSet] = " +
                "@Original_peakWorkingSet)) AND ((@IsNull_privateMemorySize = 1 AND [privateMemor" +
                "ySize] IS NULL) OR ([privateMemorySize] = @Original_privateMemorySize)) AND ((@I" +
                "sNull_virtualMemorySize = 1 AND [virtualMemorySize] IS NULL) OR ([virtualMemoryS" +
                "ize] = @Original_virtualMemorySize)) AND ((@IsNull_workingSet = 1 AND [workingSe" +
                "t] IS NULL) OR ([workingSet] = @Original_workingSet)) AND ((@IsNull_totalProcess" +
                "orTimeDays = 1 AND [totalProcessorTimeDays] IS NULL) OR ([totalProcessorTimeDays" +
                "] = @Original_totalProcessorTimeDays)) AND ((@IsNull_totalProcessorTimeHours = 1" +
                " AND [totalProcessorTimeHours] IS NULL) OR ([totalProcessorTimeHours] = @Origina" +
                "l_totalProcessorTimeHours)) AND ((@IsNull_totalProcessorTimeMinutes = 1 AND [tot" +
                "alProcessorTimeMinutes] IS NULL) OR ([totalProcessorTimeMinutes] = @Original_tot" +
                "alProcessorTimeMinutes)) AND ((@IsNull_totalProcessorTimeSeconds = 1 AND [totalP" +
                "rocessorTimeSeconds] IS NULL) OR ([totalProcessorTimeSeconds] = @Original_totalP" +
                "rocessorTimeSeconds)) AND ((@IsNull_totalProcessorTimeFraction = 1 AND [totalPro" +
                "cessorTimeFraction] IS NULL) OR ([totalProcessorTimeFraction] = @Original_totalP" +
                "rocessorTimeFraction)) AND ((@IsNull_userProcessorTimeDays = 1 AND [userProcesso" +
                "rTimeDays] IS NULL) OR ([userProcessorTimeDays] = @Original_userProcessorTimeDay" +
                "s)) AND ((@IsNull_userProcessorTimeHours = 1 AND [userProcessorTimeHours] IS NUL" +
                "L) OR ([userProcessorTimeHours] = @Original_userProcessorTimeHours)) AND ((@IsNu" +
                "ll_userProcessorTimeMinutes = 1 AND [userProcessorTimeMinutes] IS NULL) OR ([use" +
                "rProcessorTimeMinutes] = @Original_userProcessorTimeMinutes)) AND ((@IsNull_user" +
                "ProcessorTimeSeconds = 1 AND [userProcessorTimeSeconds] IS NULL) OR ([userProces" +
                "sorTimeSeconds] = @Original_userProcessorTimeSeconds)) AND ((@IsNull_userProcess" +
                "orTimeFraction = 1 AND [userProcessorTimeFraction] IS NULL) OR ([userProcessorTi" +
                "meFraction] = @Original_userProcessorTimeFraction)) AND ((@IsNull_threadCount = " +
                "1 AND [threadCount] IS NULL) OR ([threadCount] = @Original_threadCount)) AND ((@" +
                "IsNull_startInfoId = 1 AND [startInfoId] IS NULL) OR ([startInfoId] = @Original_" +
                "startInfoId)) AND ((@IsNull_processEnvironmentId = 1 AND [processEnvironmentId] " +
                "IS NULL) OR ([processEnvironmentId] = @Original_processEnvironmentId)));\r\nSELECT" +
                " id, startTime, processId, terminalServicesSessionId, nonPagedSystemMemorySize, " +
                "pagedMemorySize, pagedSystemMemory, peakPagedMemorySize, peakVirtualMemorySize, " +
                "peakWorkingSet, privateMemorySize, virtualMemorySize, workingSet, totalProcessor" +
                "TimeDays, totalProcessorTimeHours, totalProcessorTimeMinutes, totalProcessorTime" +
                "Seconds, totalProcessorTimeFraction, userProcessorTimeDays, userProcessorTimeHou" +
                "rs, userProcessorTimeMinutes, userProcessorTimeSeconds, userProcessorTimeFractio" +
                "n, threadCount, startInfoId, processEnvironmentId FROM ProcessInfo WHERE (id = @" +
                "id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedSystemMemory", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakPagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakWorkingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@privateMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@virtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "totalProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "userProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nonPagedSystemMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pagedMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pagedSystemMemory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pagedSystemMemory", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakPagedMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakPagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakVirtualMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_peakWorkingSet", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_peakWorkingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_privateMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_privateMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_virtualMemorySize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_virtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_workingSet", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_workingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_totalProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeFraction", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_totalProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "totalProcessorTimeFraction", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeFraction", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userProcessorTimeFraction", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 7, "userProcessorTimeFraction", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startInfoId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startInfoId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_processEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_processEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "processEnvironmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id, startTime, processId, terminalServicesSessionId, nonPagedSystemMemorySize, pagedMemorySize, pagedSystemMemory, peakPagedMemorySize, peakVirtualMemorySize, peakWorkingSet, privateMemorySize, virtualMemorySize, workingSet, totalProcessorTimeDays, totalProcessorTimeHours, totalProcessorTimeMinutes, totalProcessorTimeSeconds, totalProcessorTimeFraction, userProcessorTimeDays, userProcessorTimeHours, userProcessorTimeMinutes, userProcessorTimeSeconds, userProcessorTimeFraction, threadCount, startInfoId, processEnvironmentId FROM dbo.ProcessInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertProcessInfo";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@startTime", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@terminalServicesSessionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedSystemMemory", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakPagedMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakWorkingSet", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@privateMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@virtualMemorySize", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingSet", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 19, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeDays", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeHours", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeFraction", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 7, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeDays", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeHours", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeMinutes", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeSeconds", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeFraction", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 7, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@threadCount", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@processEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ProcessInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ProcessInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ProcessInfoDataTable dataTable = new CriticalErrorDS.ProcessInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ProcessInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "ProcessInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    System.Guid Original_id, 
                    System.Nullable<System.DateTime> Original_startTime, 
                    System.Nullable<int> Original_processId, 
                    System.Nullable<int> Original_terminalServicesSessionId, 
                    System.Nullable<long> Original_nonPagedSystemMemorySize, 
                    System.Nullable<long> Original_pagedMemorySize, 
                    System.Nullable<long> Original_pagedSystemMemory, 
                    System.Nullable<long> Original_peakPagedMemorySize, 
                    System.Nullable<long> Original_peakVirtualMemorySize, 
                    System.Nullable<long> Original_peakWorkingSet, 
                    System.Nullable<long> Original_privateMemorySize, 
                    System.Nullable<long> Original_virtualMemorySize, 
                    System.Nullable<long> Original_workingSet, 
                    System.Nullable<int> Original_totalProcessorTimeDays, 
                    System.Nullable<int> Original_totalProcessorTimeHours, 
                    System.Nullable<int> Original_totalProcessorTimeMinutes, 
                    System.Nullable<int> Original_totalProcessorTimeSeconds, 
                    System.Nullable<decimal> Original_totalProcessorTimeFraction, 
                    System.Nullable<int> Original_userProcessorTimeDays, 
                    System.Nullable<int> Original_userProcessorTimeHours, 
                    System.Nullable<int> Original_userProcessorTimeMinutes, 
                    System.Nullable<int> Original_userProcessorTimeSeconds, 
                    System.Nullable<decimal> Original_userProcessorTimeFraction, 
                    System.Nullable<int> Original_threadCount, 
                    System.Nullable<System.Guid> Original_startInfoId, 
                    System.Nullable<System.Guid> Original_processEnvironmentId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_startTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_startTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_processId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_processId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_terminalServicesSessionId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_terminalServicesSessionId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_nonPagedSystemMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_nonPagedSystemMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_pagedMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_pagedMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_pagedSystemMemory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_pagedSystemMemory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_peakPagedMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_peakPagedMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_peakVirtualMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_peakVirtualMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_peakWorkingSet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_peakWorkingSet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_privateMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_privateMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_virtualMemorySize.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((long)(Original_virtualMemorySize.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_workingSet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_workingSet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeDays.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_totalProcessorTimeDays.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_totalProcessorTimeHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_totalProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((int)(Original_totalProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeFraction.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_totalProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeDays.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_userProcessorTimeDays.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeHours.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((int)(Original_userProcessorTimeHours.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((int)(Original_userProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((int)(Original_userProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeFraction.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((decimal)(Original_userProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = System.DBNull.Value;
            }
            if ((Original_threadCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((int)(Original_threadCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = System.DBNull.Value;
            }
            if ((Original_startInfoId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((System.Guid)(Original_startInfoId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = System.DBNull.Value;
            }
            if ((Original_processEnvironmentId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((System.Guid)(Original_processEnvironmentId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid id, 
                    System.Nullable<System.DateTime> startTime, 
                    System.Nullable<int> processId, 
                    System.Nullable<int> terminalServicesSessionId, 
                    System.Nullable<long> nonPagedSystemMemorySize, 
                    System.Nullable<long> pagedMemorySize, 
                    System.Nullable<long> pagedSystemMemory, 
                    System.Nullable<long> peakPagedMemorySize, 
                    System.Nullable<long> peakVirtualMemorySize, 
                    System.Nullable<long> peakWorkingSet, 
                    System.Nullable<long> privateMemorySize, 
                    System.Nullable<long> virtualMemorySize, 
                    System.Nullable<long> workingSet, 
                    System.Nullable<int> totalProcessorTimeDays, 
                    System.Nullable<int> totalProcessorTimeHours, 
                    System.Nullable<int> totalProcessorTimeMinutes, 
                    System.Nullable<int> totalProcessorTimeSeconds, 
                    System.Nullable<decimal> totalProcessorTimeFraction, 
                    System.Nullable<int> userProcessorTimeDays, 
                    System.Nullable<int> userProcessorTimeHours, 
                    System.Nullable<int> userProcessorTimeMinutes, 
                    System.Nullable<int> userProcessorTimeSeconds, 
                    System.Nullable<decimal> userProcessorTimeFraction, 
                    System.Nullable<int> threadCount, 
                    System.Nullable<System.Guid> startInfoId, 
                    System.Nullable<System.Guid> processEnvironmentId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((startTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(startTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((terminalServicesSessionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(terminalServicesSessionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((nonPagedSystemMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(nonPagedSystemMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((pagedMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(pagedMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((pagedSystemMemory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(pagedSystemMemory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((peakPagedMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(peakPagedMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((peakVirtualMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(peakVirtualMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((peakWorkingSet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(peakWorkingSet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((privateMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(privateMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((virtualMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(virtualMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((workingSet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(workingSet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeDays.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(totalProcessorTimeDays.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(totalProcessorTimeHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(totalProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(totalProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeFraction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(totalProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeDays.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(userProcessorTimeDays.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(userProcessorTimeHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(userProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(userProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeFraction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(userProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((threadCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(threadCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((startInfoId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((System.Guid)(startInfoId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((processEnvironmentId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((System.Guid)(processEnvironmentId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    System.Nullable<System.DateTime> startTime, 
                    System.Nullable<int> processId, 
                    System.Nullable<int> terminalServicesSessionId, 
                    System.Nullable<long> nonPagedSystemMemorySize, 
                    System.Nullable<long> pagedMemorySize, 
                    System.Nullable<long> pagedSystemMemory, 
                    System.Nullable<long> peakPagedMemorySize, 
                    System.Nullable<long> peakVirtualMemorySize, 
                    System.Nullable<long> peakWorkingSet, 
                    System.Nullable<long> privateMemorySize, 
                    System.Nullable<long> virtualMemorySize, 
                    System.Nullable<long> workingSet, 
                    System.Nullable<int> totalProcessorTimeDays, 
                    System.Nullable<int> totalProcessorTimeHours, 
                    System.Nullable<int> totalProcessorTimeMinutes, 
                    System.Nullable<int> totalProcessorTimeSeconds, 
                    System.Nullable<decimal> totalProcessorTimeFraction, 
                    System.Nullable<int> userProcessorTimeDays, 
                    System.Nullable<int> userProcessorTimeHours, 
                    System.Nullable<int> userProcessorTimeMinutes, 
                    System.Nullable<int> userProcessorTimeSeconds, 
                    System.Nullable<decimal> userProcessorTimeFraction, 
                    System.Nullable<int> threadCount, 
                    System.Nullable<System.Guid> startInfoId, 
                    System.Nullable<System.Guid> processEnvironmentId, 
                    System.Guid Original_id, 
                    System.Nullable<System.DateTime> Original_startTime, 
                    System.Nullable<int> Original_processId, 
                    System.Nullable<int> Original_terminalServicesSessionId, 
                    System.Nullable<long> Original_nonPagedSystemMemorySize, 
                    System.Nullable<long> Original_pagedMemorySize, 
                    System.Nullable<long> Original_pagedSystemMemory, 
                    System.Nullable<long> Original_peakPagedMemorySize, 
                    System.Nullable<long> Original_peakVirtualMemorySize, 
                    System.Nullable<long> Original_peakWorkingSet, 
                    System.Nullable<long> Original_privateMemorySize, 
                    System.Nullable<long> Original_virtualMemorySize, 
                    System.Nullable<long> Original_workingSet, 
                    System.Nullable<int> Original_totalProcessorTimeDays, 
                    System.Nullable<int> Original_totalProcessorTimeHours, 
                    System.Nullable<int> Original_totalProcessorTimeMinutes, 
                    System.Nullable<int> Original_totalProcessorTimeSeconds, 
                    System.Nullable<decimal> Original_totalProcessorTimeFraction, 
                    System.Nullable<int> Original_userProcessorTimeDays, 
                    System.Nullable<int> Original_userProcessorTimeHours, 
                    System.Nullable<int> Original_userProcessorTimeMinutes, 
                    System.Nullable<int> Original_userProcessorTimeSeconds, 
                    System.Nullable<decimal> Original_userProcessorTimeFraction, 
                    System.Nullable<int> Original_threadCount, 
                    System.Nullable<System.Guid> Original_startInfoId, 
                    System.Nullable<System.Guid> Original_processEnvironmentId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((startTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(startTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((terminalServicesSessionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(terminalServicesSessionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((nonPagedSystemMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(nonPagedSystemMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((pagedMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(pagedMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((pagedSystemMemory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(pagedSystemMemory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((peakPagedMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(peakPagedMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((peakVirtualMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(peakVirtualMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((peakWorkingSet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(peakWorkingSet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((privateMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(privateMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((virtualMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(virtualMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((workingSet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(workingSet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeDays.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(totalProcessorTimeDays.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(totalProcessorTimeHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(totalProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(totalProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeFraction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(totalProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeDays.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(userProcessorTimeDays.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(userProcessorTimeHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(userProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(userProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeFraction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(userProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((threadCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(threadCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((startInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.Guid)(startInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((processEnvironmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((System.Guid)(processEnvironmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((System.Guid)(Original_id));
            if ((Original_startTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_startTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((Original_processId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_processId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((Original_terminalServicesSessionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_terminalServicesSessionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = System.DBNull.Value;
            }
            if ((Original_nonPagedSystemMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((long)(Original_nonPagedSystemMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = System.DBNull.Value;
            }
            if ((Original_pagedMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((long)(Original_pagedMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_pagedSystemMemory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_pagedSystemMemory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            if ((Original_peakPagedMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_peakPagedMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            if ((Original_peakVirtualMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((long)(Original_peakVirtualMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = System.DBNull.Value;
            }
            if ((Original_peakWorkingSet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((long)(Original_peakWorkingSet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = System.DBNull.Value;
            }
            if ((Original_privateMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((long)(Original_privateMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = System.DBNull.Value;
            }
            if ((Original_virtualMemorySize.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((long)(Original_virtualMemorySize.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = System.DBNull.Value;
            }
            if ((Original_workingSet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((long)(Original_workingSet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeDays.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(Original_totalProcessorTimeDays.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(Original_totalProcessorTimeHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((int)(Original_totalProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(Original_totalProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = System.DBNull.Value;
            }
            if ((Original_totalProcessorTimeFraction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((decimal)(Original_totalProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeDays.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(Original_userProcessorTimeDays.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeHours.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(Original_userProcessorTimeHours.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((int)(Original_userProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((int)(Original_userProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = System.DBNull.Value;
            }
            if ((Original_userProcessorTimeFraction.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((decimal)(Original_userProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = System.DBNull.Value;
            }
            if ((Original_threadCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_threadCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = System.DBNull.Value;
            }
            if ((Original_startInfoId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((System.Guid)(Original_startInfoId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = System.DBNull.Value;
            }
            if ((Original_processEnvironmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((System.Guid)(Original_processEnvironmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertProcessInfo(
                    System.Nullable<System.Guid> id, 
                    System.Nullable<System.DateTime> startTime, 
                    System.Nullable<int> processId, 
                    System.Nullable<int> terminalServicesSessionId, 
                    System.Nullable<long> nonPagedSystemMemorySize, 
                    System.Nullable<long> pagedMemorySize, 
                    System.Nullable<long> pagedSystemMemory, 
                    System.Nullable<long> peakPagedMemorySize, 
                    System.Nullable<long> peakVirtualMemorySize, 
                    System.Nullable<long> peakWorkingSet, 
                    System.Nullable<long> privateMemorySize, 
                    System.Nullable<long> virtualMemorySize, 
                    System.Nullable<long> workingSet, 
                    System.Nullable<int> totalProcessorTimeDays, 
                    System.Nullable<int> totalProcessorTimeHours, 
                    System.Nullable<int> totalProcessorTimeMinutes, 
                    System.Nullable<int> totalProcessorTimeSeconds, 
                    System.Nullable<decimal> totalProcessorTimeFraction, 
                    System.Nullable<int> userProcessorTimeDays, 
                    System.Nullable<int> userProcessorTimeHours, 
                    System.Nullable<int> userProcessorTimeMinutes, 
                    System.Nullable<int> userProcessorTimeSeconds, 
                    System.Nullable<decimal> userProcessorTimeFraction, 
                    System.Nullable<int> threadCount, 
                    System.Nullable<System.Guid> startInfoId, 
                    System.Nullable<System.Guid> processEnvironmentId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((startTime.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(startTime.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(processId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((terminalServicesSessionId.HasValue == true)) {
                command.Parameters[4].Value = ((int)(terminalServicesSessionId.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((nonPagedSystemMemorySize.HasValue == true)) {
                command.Parameters[5].Value = ((long)(nonPagedSystemMemorySize.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((pagedMemorySize.HasValue == true)) {
                command.Parameters[6].Value = ((long)(pagedMemorySize.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((pagedSystemMemory.HasValue == true)) {
                command.Parameters[7].Value = ((long)(pagedSystemMemory.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((peakPagedMemorySize.HasValue == true)) {
                command.Parameters[8].Value = ((long)(peakPagedMemorySize.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            if ((peakVirtualMemorySize.HasValue == true)) {
                command.Parameters[9].Value = ((long)(peakVirtualMemorySize.Value));
            }
            else {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            if ((peakWorkingSet.HasValue == true)) {
                command.Parameters[10].Value = ((long)(peakWorkingSet.Value));
            }
            else {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            if ((privateMemorySize.HasValue == true)) {
                command.Parameters[11].Value = ((long)(privateMemorySize.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((virtualMemorySize.HasValue == true)) {
                command.Parameters[12].Value = ((long)(virtualMemorySize.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            if ((workingSet.HasValue == true)) {
                command.Parameters[13].Value = ((long)(workingSet.Value));
            }
            else {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeDays.HasValue == true)) {
                command.Parameters[14].Value = ((int)(totalProcessorTimeDays.Value));
            }
            else {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeHours.HasValue == true)) {
                command.Parameters[15].Value = ((int)(totalProcessorTimeHours.Value));
            }
            else {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeMinutes.HasValue == true)) {
                command.Parameters[16].Value = ((int)(totalProcessorTimeMinutes.Value));
            }
            else {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeSeconds.HasValue == true)) {
                command.Parameters[17].Value = ((int)(totalProcessorTimeSeconds.Value));
            }
            else {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeFraction.HasValue == true)) {
                command.Parameters[18].Value = ((decimal)(totalProcessorTimeFraction.Value));
            }
            else {
                command.Parameters[18].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeDays.HasValue == true)) {
                command.Parameters[19].Value = ((int)(userProcessorTimeDays.Value));
            }
            else {
                command.Parameters[19].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeHours.HasValue == true)) {
                command.Parameters[20].Value = ((int)(userProcessorTimeHours.Value));
            }
            else {
                command.Parameters[20].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeMinutes.HasValue == true)) {
                command.Parameters[21].Value = ((int)(userProcessorTimeMinutes.Value));
            }
            else {
                command.Parameters[21].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeSeconds.HasValue == true)) {
                command.Parameters[22].Value = ((int)(userProcessorTimeSeconds.Value));
            }
            else {
                command.Parameters[22].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeFraction.HasValue == true)) {
                command.Parameters[23].Value = ((decimal)(userProcessorTimeFraction.Value));
            }
            else {
                command.Parameters[23].Value = System.DBNull.Value;
            }
            if ((threadCount.HasValue == true)) {
                command.Parameters[24].Value = ((int)(threadCount.Value));
            }
            else {
                command.Parameters[24].Value = System.DBNull.Value;
            }
            if ((startInfoId.HasValue == true)) {
                command.Parameters[25].Value = ((System.Guid)(startInfoId.Value));
            }
            else {
                command.Parameters[25].Value = System.DBNull.Value;
            }
            if ((processEnvironmentId.HasValue == true)) {
                command.Parameters[26].Value = ((System.Guid)(processEnvironmentId.Value));
            }
            else {
                command.Parameters[26].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StartInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StartInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StartInfo";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("fileName", "fileName");
            tableMapping.ColumnMappings.Add("arguments", "arguments");
            tableMapping.ColumnMappings.Add("domain", "domain");
            tableMapping.ColumnMappings.Add("verb", "verb");
            tableMapping.ColumnMappings.Add("useShellExecute", "useShellExecute");
            tableMapping.ColumnMappings.Add("workingDirectory", "workingDirectory");
            tableMapping.ColumnMappings.Add("startInfoEnvironmentId", "startInfoEnvironmentId");
            tableMapping.ColumnMappings.Add("verbsId", "verbsId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[StartInfo] WHERE (([id] = @Original_id) AND ((@IsNull_fileName = 1 AND [fileName] IS NULL) OR ([fileName] = @Original_fileName)) AND ((@IsNull_arguments = 1 AND [arguments] IS NULL) OR ([arguments] = @Original_arguments)) AND ((@IsNull_domain = 1 AND [domain] IS NULL) OR ([domain] = @Original_domain)) AND ((@IsNull_verb = 1 AND [verb] IS NULL) OR ([verb] = @Original_verb)) AND ((@IsNull_useShellExecute = 1 AND [useShellExecute] IS NULL) OR ([useShellExecute] = @Original_useShellExecute)) AND ((@IsNull_workingDirectory = 1 AND [workingDirectory] IS NULL) OR ([workingDirectory] = @Original_workingDirectory)) AND ((@IsNull_startInfoEnvironmentId = 1 AND [startInfoEnvironmentId] IS NULL) OR ([startInfoEnvironmentId] = @Original_startInfoEnvironmentId)) AND ((@IsNull_verbsId = 1 AND [verbsId] IS NULL) OR ([verbsId] = @Original_verbsId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fileName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_arguments", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arguments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_domain", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_domain", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verb", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_useShellExecute", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_useShellExecute", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_workingDirectory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_workingDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startInfoEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startInfoEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verbsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verbsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[StartInfo] ([id], [fileName], [arguments], [domain], [verb], [useShellExecute], [workingDirectory], [startInfoEnvironmentId], [verbsId]) VALUES (@id, @fileName, @arguments, @domain, @verb, @useShellExecute, @workingDirectory, @startInfoEnvironmentId, @verbsId);
SELECT id, fileName, arguments, domain, verb, useShellExecute, workingDirectory, startInfoEnvironmentId, verbsId FROM StartInfo WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arguments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@domain", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@useShellExecute", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verbsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[StartInfo] SET [id] = @id, [fileName] = @fileName, [arguments] = @arguments, [domain] = @domain, [verb] = @verb, [useShellExecute] = @useShellExecute, [workingDirectory] = @workingDirectory, [startInfoEnvironmentId] = @startInfoEnvironmentId, [verbsId] = @verbsId WHERE (([id] = @Original_id) AND ((@IsNull_fileName = 1 AND [fileName] IS NULL) OR ([fileName] = @Original_fileName)) AND ((@IsNull_arguments = 1 AND [arguments] IS NULL) OR ([arguments] = @Original_arguments)) AND ((@IsNull_domain = 1 AND [domain] IS NULL) OR ([domain] = @Original_domain)) AND ((@IsNull_verb = 1 AND [verb] IS NULL) OR ([verb] = @Original_verb)) AND ((@IsNull_useShellExecute = 1 AND [useShellExecute] IS NULL) OR ([useShellExecute] = @Original_useShellExecute)) AND ((@IsNull_workingDirectory = 1 AND [workingDirectory] IS NULL) OR ([workingDirectory] = @Original_workingDirectory)) AND ((@IsNull_startInfoEnvironmentId = 1 AND [startInfoEnvironmentId] IS NULL) OR ([startInfoEnvironmentId] = @Original_startInfoEnvironmentId)) AND ((@IsNull_verbsId = 1 AND [verbsId] IS NULL) OR ([verbsId] = @Original_verbsId)));
SELECT id, fileName, arguments, domain, verb, useShellExecute, workingDirectory, startInfoEnvironmentId, verbsId FROM StartInfo WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arguments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@domain", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@useShellExecute", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verbsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_fileName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_fileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_arguments", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arguments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_domain", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_domain", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verb", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_useShellExecute", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_useShellExecute", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_workingDirectory", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_workingDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_startInfoEnvironmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_startInfoEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "startInfoEnvironmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_verbsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_verbsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "verbsId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, fileName, arguments, domain, verb, useShellExecute, workingDirectory, " +
                "startInfoEnvironmentId, verbsId FROM dbo.StartInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertStartInfo";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@fileName", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@arguments", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@domain", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@useShellExecute", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingDirectory", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@startInfoEnvironmentId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@verbsId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.StartInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.StartInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.StartInfoDataTable dataTable = new CriticalErrorDS.StartInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.StartInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "StartInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_fileName, string Original_arguments, string Original_domain, string Original_verb, System.Nullable<bool> Original_useShellExecute, string Original_workingDirectory, System.Nullable<System.Guid> Original_startInfoEnvironmentId, System.Nullable<System.Guid> Original_verbsId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_fileName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_fileName));
            }
            if ((Original_arguments == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_arguments));
            }
            if ((Original_domain == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_domain));
            }
            if ((Original_verb == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_verb));
            }
            if ((Original_useShellExecute.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_useShellExecute.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_workingDirectory == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_workingDirectory));
            }
            if ((Original_startInfoEnvironmentId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.Guid)(Original_startInfoEnvironmentId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_verbsId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.Guid)(Original_verbsId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string fileName, string arguments, string domain, string verb, System.Nullable<bool> useShellExecute, string workingDirectory, System.Nullable<System.Guid> startInfoEnvironmentId, System.Nullable<System.Guid> verbsId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((fileName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fileName));
            }
            if ((arguments == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(arguments));
            }
            if ((domain == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(domain));
            }
            if ((verb == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(verb));
            }
            if ((useShellExecute.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(useShellExecute.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((workingDirectory == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(workingDirectory));
            }
            if ((startInfoEnvironmentId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.Guid)(startInfoEnvironmentId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((verbsId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.Guid)(verbsId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    string fileName, 
                    string arguments, 
                    string domain, 
                    string verb, 
                    System.Nullable<bool> useShellExecute, 
                    string workingDirectory, 
                    System.Nullable<System.Guid> startInfoEnvironmentId, 
                    System.Nullable<System.Guid> verbsId, 
                    System.Guid Original_id, 
                    string Original_fileName, 
                    string Original_arguments, 
                    string Original_domain, 
                    string Original_verb, 
                    System.Nullable<bool> Original_useShellExecute, 
                    string Original_workingDirectory, 
                    System.Nullable<System.Guid> Original_startInfoEnvironmentId, 
                    System.Nullable<System.Guid> Original_verbsId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((fileName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(fileName));
            }
            if ((arguments == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(arguments));
            }
            if ((domain == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(domain));
            }
            if ((verb == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(verb));
            }
            if ((useShellExecute.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(useShellExecute.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((workingDirectory == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(workingDirectory));
            }
            if ((startInfoEnvironmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(startInfoEnvironmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((verbsId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(verbsId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(Original_id));
            if ((Original_fileName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_fileName));
            }
            if ((Original_arguments == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_arguments));
            }
            if ((Original_domain == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_domain));
            }
            if ((Original_verb == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_verb));
            }
            if ((Original_useShellExecute.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_useShellExecute.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((Original_workingDirectory == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_workingDirectory));
            }
            if ((Original_startInfoEnvironmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((System.Guid)(Original_startInfoEnvironmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = System.DBNull.Value;
            }
            if ((Original_verbsId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((System.Guid)(Original_verbsId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertStartInfo(System.Nullable<System.Guid> id, string fileName, string arguments, string domain, string verb, System.Nullable<bool> useShellExecute, string workingDirectory, System.Nullable<System.Guid> startInfoEnvironmentId, System.Nullable<System.Guid> verbsId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((fileName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(fileName));
            }
            if ((arguments == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(arguments));
            }
            if ((domain == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(domain));
            }
            if ((verb == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(verb));
            }
            if ((useShellExecute.HasValue == true)) {
                command.Parameters[6].Value = ((bool)(useShellExecute.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((workingDirectory == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(workingDirectory));
            }
            if ((startInfoEnvironmentId.HasValue == true)) {
                command.Parameters[8].Value = ((System.Guid)(startInfoEnvironmentId.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            if ((verbsId.HasValue == true)) {
                command.Parameters[9].Value = ((System.Guid)(verbsId.Value));
            }
            else {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TargetSiteTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TargetSiteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TargetSite";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("callingConvention", "callingConvention");
            tableMapping.ColumnMappings.Add("declaringType", "declaringType");
            tableMapping.ColumnMappings.Add("memberType", "memberType");
            tableMapping.ColumnMappings.Add("token", "token");
            tableMapping.ColumnMappings.Add("declaringModule", "declaringModule");
            tableMapping.ColumnMappings.Add("genericArgumentsId", "genericArgumentsId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TargetSite] WHERE (([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_callingConvention = 1 AND [callingConvention] IS NULL) OR ([callingConvention] = @Original_callingConvention)) AND ((@IsNull_declaringType = 1 AND [declaringType] IS NULL) OR ([declaringType] = @Original_declaringType)) AND ((@IsNull_memberType = 1 AND [memberType] IS NULL) OR ([memberType] = @Original_memberType)) AND ((@IsNull_token = 1 AND [token] IS NULL) OR ([token] = @Original_token)) AND ((@IsNull_declaringModule = 1 AND [declaringModule] IS NULL) OR ([declaringModule] = @Original_declaringModule)) AND ((@IsNull_genericArgumentsId = 1 AND [genericArgumentsId] IS NULL) OR ([genericArgumentsId] = @Original_genericArgumentsId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_callingConvention", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_callingConvention", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_declaringType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_declaringType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_memberType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_memberType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_token", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_token", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_declaringModule", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_declaringModule", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_genericArgumentsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_genericArgumentsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TargetSite] ([id], [name], [callingConvention], [declaringType], [memberType], [token], [declaringModule], [genericArgumentsId]) VALUES (@id, @name, @callingConvention, @declaringType, @memberType, @token, @declaringModule, @genericArgumentsId);
SELECT id, name, callingConvention, declaringType, memberType, token, declaringModule, genericArgumentsId FROM TargetSite WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@callingConvention", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@memberType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@token", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringModule", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@genericArgumentsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TargetSite] SET [id] = @id, [name] = @name, [callingConvention] = @callingConvention, [declaringType] = @declaringType, [memberType] = @memberType, [token] = @token, [declaringModule] = @declaringModule, [genericArgumentsId] = @genericArgumentsId WHERE (([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_callingConvention = 1 AND [callingConvention] IS NULL) OR ([callingConvention] = @Original_callingConvention)) AND ((@IsNull_declaringType = 1 AND [declaringType] IS NULL) OR ([declaringType] = @Original_declaringType)) AND ((@IsNull_memberType = 1 AND [memberType] IS NULL) OR ([memberType] = @Original_memberType)) AND ((@IsNull_token = 1 AND [token] IS NULL) OR ([token] = @Original_token)) AND ((@IsNull_declaringModule = 1 AND [declaringModule] IS NULL) OR ([declaringModule] = @Original_declaringModule)) AND ((@IsNull_genericArgumentsId = 1 AND [genericArgumentsId] IS NULL) OR ([genericArgumentsId] = @Original_genericArgumentsId)));
SELECT id, name, callingConvention, declaringType, memberType, token, declaringModule, genericArgumentsId FROM TargetSite WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@callingConvention", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@memberType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@token", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringModule", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@genericArgumentsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_callingConvention", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_callingConvention", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_declaringType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_declaringType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_memberType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_memberType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_token", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_token", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_declaringModule", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_declaringModule", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_genericArgumentsId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_genericArgumentsId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "genericArgumentsId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, name, callingConvention, declaringType, memberType, token, declaringMo" +
                "dule, genericArgumentsId FROM dbo.TargetSite";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertTargetSite";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@callingConvention", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringType", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@memberType", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@token", System.Data.SqlDbType.NVarChar, 20, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringModule", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@genericArgumentsId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.TargetSiteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.TargetSiteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.TargetSiteDataTable dataTable = new CriticalErrorDS.TargetSiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.TargetSiteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "TargetSite");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, string Original_name, string Original_callingConvention, string Original_declaringType, string Original_memberType, string Original_token, string Original_declaringModule, System.Nullable<System.Guid> Original_genericArgumentsId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_name));
            }
            if ((Original_callingConvention == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_callingConvention));
            }
            if ((Original_declaringType == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_declaringType));
            }
            if ((Original_memberType == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_memberType));
            }
            if ((Original_token == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_token));
            }
            if ((Original_declaringModule == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_declaringModule));
            }
            if ((Original_genericArgumentsId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.Guid)(Original_genericArgumentsId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, string name, string callingConvention, string declaringType, string memberType, string token, string declaringModule, System.Nullable<System.Guid> genericArgumentsId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((callingConvention == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(callingConvention));
            }
            if ((declaringType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(declaringType));
            }
            if ((memberType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(memberType));
            }
            if ((token == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(token));
            }
            if ((declaringModule == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(declaringModule));
            }
            if ((genericArgumentsId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.Guid)(genericArgumentsId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    string name, 
                    string callingConvention, 
                    string declaringType, 
                    string memberType, 
                    string token, 
                    string declaringModule, 
                    System.Nullable<System.Guid> genericArgumentsId, 
                    System.Guid Original_id, 
                    string Original_name, 
                    string Original_callingConvention, 
                    string Original_declaringType, 
                    string Original_memberType, 
                    string Original_token, 
                    string Original_declaringModule, 
                    System.Nullable<System.Guid> Original_genericArgumentsId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            if ((callingConvention == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(callingConvention));
            }
            if ((declaringType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(declaringType));
            }
            if ((memberType == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(memberType));
            }
            if ((token == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(token));
            }
            if ((declaringModule == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(declaringModule));
            }
            if ((genericArgumentsId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(genericArgumentsId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_name));
            }
            if ((Original_callingConvention == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_callingConvention));
            }
            if ((Original_declaringType == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_declaringType));
            }
            if ((Original_memberType == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_memberType));
            }
            if ((Original_token == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_token));
            }
            if ((Original_declaringModule == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_declaringModule));
            }
            if ((Original_genericArgumentsId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.Guid)(Original_genericArgumentsId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertTargetSite(System.Nullable<System.Guid> id, string name, string callingConvention, string declaringType, string memberType, string token, string declaringModule, System.Nullable<System.Guid> genericArgumentsId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((name == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(name));
            }
            if ((callingConvention == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(callingConvention));
            }
            if ((declaringType == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(declaringType));
            }
            if ((memberType == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(memberType));
            }
            if ((token == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(token));
            }
            if ((declaringModule == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(declaringModule));
            }
            if ((genericArgumentsId.HasValue == true)) {
                command.Parameters[8].Value = ((System.Guid)(genericArgumentsId.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExtendedPropsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExtendedPropsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExtendedProps";
            tableMapping.ColumnMappings.Add("logEntryExtendedPropertiesId", "logEntryExtendedPropertiesId");
            tableMapping.ColumnMappings.Add("propertyKey", "propertyKey");
            tableMapping.ColumnMappings.Add("propertyValue", "propertyValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExtendedProps] ([logEntryExtendedPropertiesId], [propertyKey]," +
                " [propertyValue]) VALUES (@logEntryExtendedPropertiesId, @propertyKey, @property" +
                "Value)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryExtendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryExtendedPropertiesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyKey", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryExtendedPropertiesId, propertyKey, propertyValue FROM dbo.Extended" +
                "Props";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InsertExtendedProps";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryExtendedPropertiesId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyKey", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyValue", System.Data.SqlDbType.NVarChar, 256, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ExtendedPropsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ExtendedPropsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ExtendedPropsDataTable dataTable = new CriticalErrorDS.ExtendedPropsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ExtendedPropsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "ExtendedProps");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryExtendedPropertiesId, string propertyKey, string propertyValue) {
            if ((logEntryExtendedPropertiesId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryExtendedPropertiesId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((propertyKey == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(propertyKey));
            }
            if ((propertyValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(propertyValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertExtendedProps(System.Nullable<System.Guid> logEntryExtendedPropertiesId, string propertyKey, string propertyValue) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((logEntryExtendedPropertiesId.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(logEntryExtendedPropertiesId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((propertyKey == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(propertyKey));
            }
            if ((propertyValue == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(propertyValue));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionFieldsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionFieldsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExceptionFields";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("fieldName", "fieldName");
            tableMapping.ColumnMappings.Add("fieldValue", "fieldValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExceptionFields] ([id], [fieldName], [fieldValue]) VALUES (@id" +
                ", @fieldName, @fieldValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fieldName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fieldValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, fieldName, fieldValue FROM dbo.ExceptionFields";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ExceptionFieldsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ExceptionFieldsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ExceptionFieldsDataTable dataTable = new CriticalErrorDS.ExceptionFieldsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ExceptionFieldsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "ExceptionFields");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> id, string fieldName, string fieldValue) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((fieldName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fieldName));
            }
            if ((fieldValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(fieldValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionPropertiesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionPropertiesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExceptionProperties";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("propertyName", "propertyName");
            tableMapping.ColumnMappings.Add("propertyValue", "propertyValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExceptionProperties] ([id], [propertyName], [propertyValue]) V" +
                "ALUES (@id, @propertyName, @propertyValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CriticalErrorReporting.Data.Properties.Settings.Default.CriticalErrorConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, propertyName, propertyValue FROM dbo.ExceptionProperties";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(CriticalErrorDS.ExceptionPropertiesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual CriticalErrorDS.ExceptionPropertiesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CriticalErrorDS.ExceptionPropertiesDataTable dataTable = new CriticalErrorDS.ExceptionPropertiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS.ExceptionPropertiesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(CriticalErrorDS dataSet) {
            return this.Adapter.Update(dataSet, "ExceptionProperties");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> id, string propertyName, string propertyValue) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((propertyName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(propertyName));
            }
            if ((propertyValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(propertyValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591