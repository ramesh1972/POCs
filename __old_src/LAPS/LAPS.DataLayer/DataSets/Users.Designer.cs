//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LAPS.DataLayer.DataSets {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Users")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Users : System.Data.DataSet {
        
        private UserAccountsDataTable tableUserAccounts;
        
        private UsersDataTable tableUsers;
        
        private UserInfoDataTable tableUserInfo;
        
        private AddressesDataTable tableAddresses;
        
        private IdentityInfoDataTable tableIdentityInfo;
        
        private EmploymentInfoDataTable tableEmploymentInfo;
        
        private BankInfoDataTable tableBankInfo;
        
        private ReferencesDataTable tableReferences;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Users() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Users(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserAccounts"] != null)) {
                    base.Tables.Add(new UserAccountsDataTable(ds.Tables["UserAccounts"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["UserInfo"] != null)) {
                    base.Tables.Add(new UserInfoDataTable(ds.Tables["UserInfo"]));
                }
                if ((ds.Tables["Addresses"] != null)) {
                    base.Tables.Add(new AddressesDataTable(ds.Tables["Addresses"]));
                }
                if ((ds.Tables["IdentityInfo"] != null)) {
                    base.Tables.Add(new IdentityInfoDataTable(ds.Tables["IdentityInfo"]));
                }
                if ((ds.Tables["EmploymentInfo"] != null)) {
                    base.Tables.Add(new EmploymentInfoDataTable(ds.Tables["EmploymentInfo"]));
                }
                if ((ds.Tables["BankInfo"] != null)) {
                    base.Tables.Add(new BankInfoDataTable(ds.Tables["BankInfo"]));
                }
                if ((ds.Tables["References"] != null)) {
                    base.Tables.Add(new ReferencesDataTable(ds.Tables["References"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserAccountsDataTable UserAccounts {
            get {
                return this.tableUserAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable _Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserInfoDataTable UserInfo {
            get {
                return this.tableUserInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressesDataTable Addresses {
            get {
                return this.tableAddresses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdentityInfoDataTable IdentityInfo {
            get {
                return this.tableIdentityInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmploymentInfoDataTable EmploymentInfo {
            get {
                return this.tableEmploymentInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BankInfoDataTable BankInfo {
            get {
                return this.tableBankInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReferencesDataTable References {
            get {
                return this.tableReferences;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Users cln = ((Users)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UserAccounts"] != null)) {
                    base.Tables.Add(new UserAccountsDataTable(ds.Tables["UserAccounts"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["UserInfo"] != null)) {
                    base.Tables.Add(new UserInfoDataTable(ds.Tables["UserInfo"]));
                }
                if ((ds.Tables["Addresses"] != null)) {
                    base.Tables.Add(new AddressesDataTable(ds.Tables["Addresses"]));
                }
                if ((ds.Tables["IdentityInfo"] != null)) {
                    base.Tables.Add(new IdentityInfoDataTable(ds.Tables["IdentityInfo"]));
                }
                if ((ds.Tables["EmploymentInfo"] != null)) {
                    base.Tables.Add(new EmploymentInfoDataTable(ds.Tables["EmploymentInfo"]));
                }
                if ((ds.Tables["BankInfo"] != null)) {
                    base.Tables.Add(new BankInfoDataTable(ds.Tables["BankInfo"]));
                }
                if ((ds.Tables["References"] != null)) {
                    base.Tables.Add(new ReferencesDataTable(ds.Tables["References"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUserAccounts = ((UserAccountsDataTable)(base.Tables["UserAccounts"]));
            if ((initTable == true)) {
                if ((this.tableUserAccounts != null)) {
                    this.tableUserAccounts.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableUserInfo = ((UserInfoDataTable)(base.Tables["UserInfo"]));
            if ((initTable == true)) {
                if ((this.tableUserInfo != null)) {
                    this.tableUserInfo.InitVars();
                }
            }
            this.tableAddresses = ((AddressesDataTable)(base.Tables["Addresses"]));
            if ((initTable == true)) {
                if ((this.tableAddresses != null)) {
                    this.tableAddresses.InitVars();
                }
            }
            this.tableIdentityInfo = ((IdentityInfoDataTable)(base.Tables["IdentityInfo"]));
            if ((initTable == true)) {
                if ((this.tableIdentityInfo != null)) {
                    this.tableIdentityInfo.InitVars();
                }
            }
            this.tableEmploymentInfo = ((EmploymentInfoDataTable)(base.Tables["EmploymentInfo"]));
            if ((initTable == true)) {
                if ((this.tableEmploymentInfo != null)) {
                    this.tableEmploymentInfo.InitVars();
                }
            }
            this.tableBankInfo = ((BankInfoDataTable)(base.Tables["BankInfo"]));
            if ((initTable == true)) {
                if ((this.tableBankInfo != null)) {
                    this.tableBankInfo.InitVars();
                }
            }
            this.tableReferences = ((ReferencesDataTable)(base.Tables["References"]));
            if ((initTable == true)) {
                if ((this.tableReferences != null)) {
                    this.tableReferences.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Users";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Users.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUserAccounts = new UserAccountsDataTable();
            base.Tables.Add(this.tableUserAccounts);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableUserInfo = new UserInfoDataTable();
            base.Tables.Add(this.tableUserInfo);
            this.tableAddresses = new AddressesDataTable();
            base.Tables.Add(this.tableAddresses);
            this.tableIdentityInfo = new IdentityInfoDataTable();
            base.Tables.Add(this.tableIdentityInfo);
            this.tableEmploymentInfo = new EmploymentInfoDataTable();
            base.Tables.Add(this.tableEmploymentInfo);
            this.tableBankInfo = new BankInfoDataTable();
            base.Tables.Add(this.tableBankInfo);
            this.tableReferences = new ReferencesDataTable();
            base.Tables.Add(this.tableReferences);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_Users() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAddresses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdentityInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmploymentInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBankInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReferences() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Users ds = new Users();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void UserAccountsRowChangeEventHandler(object sender, UserAccountsRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void UserInfoRowChangeEventHandler(object sender, UserInfoRowChangeEvent e);
        
        public delegate void AddressesRowChangeEventHandler(object sender, AddressesRowChangeEvent e);
        
        public delegate void IdentityInfoRowChangeEventHandler(object sender, IdentityInfoRowChangeEvent e);
        
        public delegate void EmploymentInfoRowChangeEventHandler(object sender, EmploymentInfoRowChangeEvent e);
        
        public delegate void BankInfoRowChangeEventHandler(object sender, BankInfoRowChangeEvent e);
        
        public delegate void ReferencesRowChangeEventHandler(object sender, ReferencesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAccountGUID;
            
            private System.Data.DataColumn columnUserGUID;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnCreateDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsDataTable() {
                this.TableName = "UserAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountGUIDColumn {
                get {
                    return this.columnAccountGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserGUIDColumn {
                get {
                    return this.columnUserGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsRow this[int index] {
                get {
                    return ((UserAccountsRow)(this.Rows[index]));
                }
            }
            
            public event UserAccountsRowChangeEventHandler UserAccountsRowChanging;
            
            public event UserAccountsRowChangeEventHandler UserAccountsRowChanged;
            
            public event UserAccountsRowChangeEventHandler UserAccountsRowDeleting;
            
            public event UserAccountsRowChangeEventHandler UserAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserAccountsRow(UserAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsRow AddUserAccountsRow(System.Guid AccountGUID, System.Guid UserGUID, string Password, System.DateTime CreateDate) {
                UserAccountsRow rowUserAccountsRow = ((UserAccountsRow)(this.NewRow()));
                rowUserAccountsRow.ItemArray = new object[] {
                        AccountGUID,
                        UserGUID,
                        Password,
                        CreateDate};
                this.Rows.Add(rowUserAccountsRow);
                return rowUserAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserAccountsDataTable cln = ((UserAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccountGUID = base.Columns["AccountGUID"];
                this.columnUserGUID = base.Columns["UserGUID"];
                this.columnPassword = base.Columns["Password"];
                this.columnCreateDate = base.Columns["CreateDate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccountGUID = new System.Data.DataColumn("AccountGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountGUID);
                this.columnUserGUID = new System.Data.DataColumn("UserGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserGUID);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnCreateDate = new System.Data.DataColumn("CreateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnAccountGUID.AllowDBNull = false;
                this.columnUserGUID.AllowDBNull = false;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 32;
                this.columnCreateDate.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsRow NewUserAccountsRow() {
                return ((UserAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserAccountsRowChanged != null)) {
                    this.UserAccountsRowChanged(this, new UserAccountsRowChangeEvent(((UserAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserAccountsRowChanging != null)) {
                    this.UserAccountsRowChanging(this, new UserAccountsRowChangeEvent(((UserAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserAccountsRowDeleted != null)) {
                    this.UserAccountsRowDeleted(this, new UserAccountsRowChangeEvent(((UserAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserAccountsRowDeleting != null)) {
                    this.UserAccountsRowDeleting(this, new UserAccountsRowChangeEvent(((UserAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserAccountsRow(UserAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserGUID;
            
            private System.Data.DataColumn columnUserTypeID;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnMiddleName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnUserDOB;
            
            private System.Data.DataColumn columnEmailAddress;
            
            private System.Data.DataColumn columnTelephoneNo;
            
            private System.Data.DataColumn columnMobileNo;
            
            private System.Data.DataColumn columnUserInfoGUID;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnFaxNo;
            
            private System.Data.DataColumn columnTimeToCallFrom;
            
            private System.Data.DataColumn columnTimeToCallTo;
            
            private static System.DateTime columnUserDOB_defaultValue = System.DateTime.Parse("01/01/1900 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserGUIDColumn {
                get {
                    return this.columnUserGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserTypeIDColumn {
                get {
                    return this.columnUserTypeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserDOBColumn {
                get {
                    return this.columnUserDOB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelephoneNoColumn {
                get {
                    return this.columnTelephoneNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MobileNoColumn {
                get {
                    return this.columnMobileNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserInfoGUIDColumn {
                get {
                    return this.columnUserInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FaxNoColumn {
                get {
                    return this.columnFaxNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeToCallFromColumn {
                get {
                    return this.columnTimeToCallFrom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeToCallToColumn {
                get {
                    return this.columnTimeToCallTo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(System.Guid UserGUID, int UserTypeID, string FirstName, string MiddleName, string LastName, System.DateTime UserDOB, string EmailAddress, string TelephoneNo, string MobileNo, System.Guid UserInfoGUID, string Title, string FaxNo, string TimeToCallFrom, string TimeToCallTo) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        UserGUID,
                        UserTypeID,
                        FirstName,
                        MiddleName,
                        LastName,
                        UserDOB,
                        EmailAddress,
                        TelephoneNo,
                        MobileNo,
                        UserInfoGUID,
                        Title,
                        FaxNo,
                        TimeToCallFrom,
                        TimeToCallTo};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserGUID = base.Columns["UserGUID"];
                this.columnUserTypeID = base.Columns["UserTypeID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleName = base.Columns["MiddleName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnUserDOB = base.Columns["UserDOB"];
                this.columnEmailAddress = base.Columns["EmailAddress"];
                this.columnTelephoneNo = base.Columns["TelephoneNo"];
                this.columnMobileNo = base.Columns["MobileNo"];
                this.columnUserInfoGUID = base.Columns["UserInfoGUID"];
                this.columnTitle = base.Columns["Title"];
                this.columnFaxNo = base.Columns["FaxNo"];
                this.columnTimeToCallFrom = base.Columns["TimeToCallFrom"];
                this.columnTimeToCallTo = base.Columns["TimeToCallTo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserGUID = new System.Data.DataColumn("UserGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserGUID);
                this.columnUserTypeID = new System.Data.DataColumn("UserTypeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserTypeID);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new System.Data.DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnUserDOB = new System.Data.DataColumn("UserDOB", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserDOB);
                this.columnEmailAddress = new System.Data.DataColumn("EmailAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailAddress);
                this.columnTelephoneNo = new System.Data.DataColumn("TelephoneNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephoneNo);
                this.columnMobileNo = new System.Data.DataColumn("MobileNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileNo);
                this.columnUserInfoGUID = new System.Data.DataColumn("UserInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserInfoGUID);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnFaxNo = new System.Data.DataColumn("FaxNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFaxNo);
                this.columnTimeToCallFrom = new System.Data.DataColumn("TimeToCallFrom", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeToCallFrom);
                this.columnTimeToCallTo = new System.Data.DataColumn("TimeToCallTo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeToCallTo);
                this.columnUserTypeID.DefaultValue = ((int)(-1));
                this.columnFirstName.DefaultValue = ((string)("\"\""));
                this.columnFirstName.MaxLength = 128;
                this.columnMiddleName.DefaultValue = ((string)("\"\""));
                this.columnMiddleName.MaxLength = 128;
                this.columnLastName.DefaultValue = ((string)("\"\""));
                this.columnLastName.MaxLength = 128;
                this.columnUserDOB.DefaultValue = ((System.DateTime)(UsersDataTable.columnUserDOB_defaultValue));
                this.columnEmailAddress.DefaultValue = ((string)("\"\""));
                this.columnEmailAddress.MaxLength = 256;
                this.columnTelephoneNo.DefaultValue = ((string)("\"\""));
                this.columnTelephoneNo.MaxLength = 32;
                this.columnMobileNo.DefaultValue = ((string)("\"\""));
                this.columnMobileNo.MaxLength = 32;
                this.columnTitle.DefaultValue = ((string)("\"\""));
                this.columnTitle.MaxLength = 10;
                this.columnFaxNo.DefaultValue = ((string)("\"\""));
                this.columnFaxNo.MaxLength = 32;
                this.columnTimeToCallFrom.DefaultValue = ((string)("Select"));
                this.columnTimeToCallFrom.MaxLength = 6;
                this.columnTimeToCallTo.DefaultValue = ((string)("Select"));
                this.columnTimeToCallTo.MaxLength = 6;
                this.ExtendedProperties.Add("Generator_TablePropName", "_Users");
                this.ExtendedProperties.Add("Generator_UserTableName", "Users");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserInfoGUID;
            
            private System.Data.DataColumn columnUserGUID;
            
            private System.Data.DataColumn columnAddressInfoGUID;
            
            private System.Data.DataColumn columnWorkInfoGUID;
            
            private System.Data.DataColumn columnBankInfoGUID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTable() {
                this.TableName = "UserInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserInfoGUIDColumn {
                get {
                    return this.columnUserInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserGUIDColumn {
                get {
                    return this.columnUserGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressInfoGUIDColumn {
                get {
                    return this.columnAddressInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkInfoGUIDColumn {
                get {
                    return this.columnWorkInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankInfoGUIDColumn {
                get {
                    return this.columnBankInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoRow this[int index] {
                get {
                    return ((UserInfoRow)(this.Rows[index]));
                }
            }
            
            public event UserInfoRowChangeEventHandler UserInfoRowChanging;
            
            public event UserInfoRowChangeEventHandler UserInfoRowChanged;
            
            public event UserInfoRowChangeEventHandler UserInfoRowDeleting;
            
            public event UserInfoRowChangeEventHandler UserInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserInfoRow(UserInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoRow AddUserInfoRow(System.Guid UserInfoGUID, System.Guid UserGUID, System.Guid AddressInfoGUID, System.Guid WorkInfoGUID, System.Guid BankInfoGUID) {
                UserInfoRow rowUserInfoRow = ((UserInfoRow)(this.NewRow()));
                rowUserInfoRow.ItemArray = new object[] {
                        UserInfoGUID,
                        UserGUID,
                        AddressInfoGUID,
                        WorkInfoGUID,
                        BankInfoGUID};
                this.Rows.Add(rowUserInfoRow);
                return rowUserInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserInfoDataTable cln = ((UserInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserInfoGUID = base.Columns["UserInfoGUID"];
                this.columnUserGUID = base.Columns["UserGUID"];
                this.columnAddressInfoGUID = base.Columns["AddressInfoGUID"];
                this.columnWorkInfoGUID = base.Columns["WorkInfoGUID"];
                this.columnBankInfoGUID = base.Columns["BankInfoGUID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserInfoGUID = new System.Data.DataColumn("UserInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserInfoGUID);
                this.columnUserGUID = new System.Data.DataColumn("UserGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserGUID);
                this.columnAddressInfoGUID = new System.Data.DataColumn("AddressInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressInfoGUID);
                this.columnWorkInfoGUID = new System.Data.DataColumn("WorkInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkInfoGUID);
                this.columnBankInfoGUID = new System.Data.DataColumn("BankInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankInfoGUID);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoRow NewUserInfoRow() {
                return ((UserInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserInfoRowChanged != null)) {
                    this.UserInfoRowChanged(this, new UserInfoRowChangeEvent(((UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserInfoRowChanging != null)) {
                    this.UserInfoRowChanging(this, new UserInfoRowChangeEvent(((UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserInfoRowDeleted != null)) {
                    this.UserInfoRowDeleted(this, new UserInfoRowChangeEvent(((UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserInfoRowDeleting != null)) {
                    this.UserInfoRowDeleting(this, new UserInfoRowChangeEvent(((UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserInfoRow(UserInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AddressesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBuildingName;
            
            private System.Data.DataColumn columnBuildingNo;
            
            private System.Data.DataColumn columnFlatNo;
            
            private System.Data.DataColumn columnStreet;
            
            private System.Data.DataColumn columnPostalTown;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnCounty;
            
            private System.Data.DataColumn columnOwnOrRent;
            
            private System.Data.DataColumn columnDurationYears;
            
            private System.Data.DataColumn columnDurationMonths;
            
            private System.Data.DataColumn columnAddressInfoGUID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesDataTable() {
                this.TableName = "Addresses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddressesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AddressesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingNameColumn {
                get {
                    return this.columnBuildingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingNoColumn {
                get {
                    return this.columnBuildingNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlatNoColumn {
                get {
                    return this.columnFlatNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostalTownColumn {
                get {
                    return this.columnPostalTown;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountyColumn {
                get {
                    return this.columnCounty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OwnOrRentColumn {
                get {
                    return this.columnOwnOrRent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DurationYearsColumn {
                get {
                    return this.columnDurationYears;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DurationMonthsColumn {
                get {
                    return this.columnDurationMonths;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressInfoGUIDColumn {
                get {
                    return this.columnAddressInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesRow this[int index] {
                get {
                    return ((AddressesRow)(this.Rows[index]));
                }
            }
            
            public event AddressesRowChangeEventHandler AddressesRowChanging;
            
            public event AddressesRowChangeEventHandler AddressesRowChanged;
            
            public event AddressesRowChangeEventHandler AddressesRowDeleting;
            
            public event AddressesRowChangeEventHandler AddressesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAddressesRow(AddressesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesRow AddAddressesRow(string BuildingName, string BuildingNo, string FlatNo, string Street, string PostalTown, string PostalCode, string County, string OwnOrRent, int DurationYears, int DurationMonths, System.Guid AddressInfoGUID) {
                AddressesRow rowAddressesRow = ((AddressesRow)(this.NewRow()));
                rowAddressesRow.ItemArray = new object[] {
                        BuildingName,
                        BuildingNo,
                        FlatNo,
                        Street,
                        PostalTown,
                        PostalCode,
                        County,
                        OwnOrRent,
                        DurationYears,
                        DurationMonths,
                        AddressInfoGUID};
                this.Rows.Add(rowAddressesRow);
                return rowAddressesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AddressesDataTable cln = ((AddressesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AddressesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBuildingName = base.Columns["BuildingName"];
                this.columnBuildingNo = base.Columns["BuildingNo"];
                this.columnFlatNo = base.Columns["FlatNo"];
                this.columnStreet = base.Columns["Street"];
                this.columnPostalTown = base.Columns["PostalTown"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCounty = base.Columns["County"];
                this.columnOwnOrRent = base.Columns["OwnOrRent"];
                this.columnDurationYears = base.Columns["DurationYears"];
                this.columnDurationMonths = base.Columns["DurationMonths"];
                this.columnAddressInfoGUID = base.Columns["AddressInfoGUID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBuildingName = new System.Data.DataColumn("BuildingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingName);
                this.columnBuildingNo = new System.Data.DataColumn("BuildingNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingNo);
                this.columnFlatNo = new System.Data.DataColumn("FlatNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlatNo);
                this.columnStreet = new System.Data.DataColumn("Street", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnPostalTown = new System.Data.DataColumn("PostalTown", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalTown);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnCounty = new System.Data.DataColumn("County", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounty);
                this.columnOwnOrRent = new System.Data.DataColumn("OwnOrRent", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnOrRent);
                this.columnDurationYears = new System.Data.DataColumn("DurationYears", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationYears);
                this.columnDurationMonths = new System.Data.DataColumn("DurationMonths", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationMonths);
                this.columnAddressInfoGUID = new System.Data.DataColumn("AddressInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressInfoGUID);
                this.columnBuildingName.MaxLength = 256;
                this.columnBuildingNo.MaxLength = 10;
                this.columnFlatNo.MaxLength = 10;
                this.columnStreet.MaxLength = 256;
                this.columnPostalTown.MaxLength = 128;
                this.columnPostalCode.MaxLength = 32;
                this.columnCounty.MaxLength = 128;
                this.columnOwnOrRent.MaxLength = 10;
                this.columnDurationYears.DefaultValue = ((int)(0));
                this.columnDurationMonths.DefaultValue = ((int)(0));
                this.columnAddressInfoGUID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesRow NewAddressesRow() {
                return ((AddressesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AddressesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AddressesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressesRowChanged != null)) {
                    this.AddressesRowChanged(this, new AddressesRowChangeEvent(((AddressesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressesRowChanging != null)) {
                    this.AddressesRowChanging(this, new AddressesRowChangeEvent(((AddressesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressesRowDeleted != null)) {
                    this.AddressesRowDeleted(this, new AddressesRowChangeEvent(((AddressesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressesRowDeleting != null)) {
                    this.AddressesRowDeleting(this, new AddressesRowChangeEvent(((AddressesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAddressesRow(AddressesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AddressesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdentityInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserInfoGUID;
            
            private System.Data.DataColumn columnIdentityNumberName;
            
            private System.Data.DataColumn columnIdentityNo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoDataTable() {
                this.TableName = "IdentityInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdentityInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdentityInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserInfoGUIDColumn {
                get {
                    return this.columnUserInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdentityNumberNameColumn {
                get {
                    return this.columnIdentityNumberName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdentityNoColumn {
                get {
                    return this.columnIdentityNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoRow this[int index] {
                get {
                    return ((IdentityInfoRow)(this.Rows[index]));
                }
            }
            
            public event IdentityInfoRowChangeEventHandler IdentityInfoRowChanging;
            
            public event IdentityInfoRowChangeEventHandler IdentityInfoRowChanged;
            
            public event IdentityInfoRowChangeEventHandler IdentityInfoRowDeleting;
            
            public event IdentityInfoRowChangeEventHandler IdentityInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdentityInfoRow(IdentityInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoRow AddIdentityInfoRow(System.Guid UserInfoGUID, string IdentityNumberName, string IdentityNo) {
                IdentityInfoRow rowIdentityInfoRow = ((IdentityInfoRow)(this.NewRow()));
                rowIdentityInfoRow.ItemArray = new object[] {
                        UserInfoGUID,
                        IdentityNumberName,
                        IdentityNo};
                this.Rows.Add(rowIdentityInfoRow);
                return rowIdentityInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdentityInfoDataTable cln = ((IdentityInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdentityInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserInfoGUID = base.Columns["UserInfoGUID"];
                this.columnIdentityNumberName = base.Columns["IdentityNumberName"];
                this.columnIdentityNo = base.Columns["IdentityNo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserInfoGUID = new System.Data.DataColumn("UserInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserInfoGUID);
                this.columnIdentityNumberName = new System.Data.DataColumn("IdentityNumberName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentityNumberName);
                this.columnIdentityNo = new System.Data.DataColumn("IdentityNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentityNo);
                this.columnIdentityNumberName.MaxLength = 128;
                this.columnIdentityNo.MaxLength = 128;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoRow NewIdentityInfoRow() {
                return ((IdentityInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdentityInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdentityInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdentityInfoRowChanged != null)) {
                    this.IdentityInfoRowChanged(this, new IdentityInfoRowChangeEvent(((IdentityInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdentityInfoRowChanging != null)) {
                    this.IdentityInfoRowChanging(this, new IdentityInfoRowChangeEvent(((IdentityInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdentityInfoRowDeleted != null)) {
                    this.IdentityInfoRowDeleted(this, new IdentityInfoRowChangeEvent(((IdentityInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdentityInfoRowDeleting != null)) {
                    this.IdentityInfoRowDeleting(this, new IdentityInfoRowChangeEvent(((IdentityInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdentityInfoRow(IdentityInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdentityInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmploymentInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmploymentInfoGUID;
            
            private System.Data.DataColumn columnSourceOfIncome;
            
            private System.Data.DataColumn columnPayPerCheque;
            
            private System.Data.DataColumn columnPayDirectDeposit;
            
            private System.Data.DataColumn columnFrequenceOfWage;
            
            private System.Data.DataColumn columnEmploymentType;
            
            private System.Data.DataColumn columnNextPayDate;
            
            private System.Data.DataColumn columnFollowingPayDate;
            
            private System.Data.DataColumn columnCompanyName;
            
            private System.Data.DataColumn columnDepartment;
            
            private System.Data.DataColumn columnDurationMonths;
            
            private System.Data.DataColumn columnDurationYears;
            
            private System.Data.DataColumn columnPostHeld;
            
            private System.Data.DataColumn columnSupervisorName;
            
            private System.Data.DataColumn columnCompanyMainNo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoDataTable() {
                this.TableName = "EmploymentInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmploymentInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmploymentInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmploymentInfoGUIDColumn {
                get {
                    return this.columnEmploymentInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SourceOfIncomeColumn {
                get {
                    return this.columnSourceOfIncome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PayPerChequeColumn {
                get {
                    return this.columnPayPerCheque;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PayDirectDepositColumn {
                get {
                    return this.columnPayDirectDeposit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FrequenceOfWageColumn {
                get {
                    return this.columnFrequenceOfWage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmploymentTypeColumn {
                get {
                    return this.columnEmploymentType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextPayDateColumn {
                get {
                    return this.columnNextPayDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FollowingPayDateColumn {
                get {
                    return this.columnFollowingPayDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentColumn {
                get {
                    return this.columnDepartment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DurationMonthsColumn {
                get {
                    return this.columnDurationMonths;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DurationYearsColumn {
                get {
                    return this.columnDurationYears;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostHeldColumn {
                get {
                    return this.columnPostHeld;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupervisorNameColumn {
                get {
                    return this.columnSupervisorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CompanyMainNoColumn {
                get {
                    return this.columnCompanyMainNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoRow this[int index] {
                get {
                    return ((EmploymentInfoRow)(this.Rows[index]));
                }
            }
            
            public event EmploymentInfoRowChangeEventHandler EmploymentInfoRowChanging;
            
            public event EmploymentInfoRowChangeEventHandler EmploymentInfoRowChanged;
            
            public event EmploymentInfoRowChangeEventHandler EmploymentInfoRowDeleting;
            
            public event EmploymentInfoRowChangeEventHandler EmploymentInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmploymentInfoRow(EmploymentInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoRow AddEmploymentInfoRow(System.Guid EmploymentInfoGUID, string SourceOfIncome, double PayPerCheque, string PayDirectDeposit, string FrequenceOfWage, string EmploymentType, System.DateTime NextPayDate, System.DateTime FollowingPayDate, string CompanyName, string Department, string DurationMonths, string DurationYears, string PostHeld, string SupervisorName, string CompanyMainNo) {
                EmploymentInfoRow rowEmploymentInfoRow = ((EmploymentInfoRow)(this.NewRow()));
                rowEmploymentInfoRow.ItemArray = new object[] {
                        EmploymentInfoGUID,
                        SourceOfIncome,
                        PayPerCheque,
                        PayDirectDeposit,
                        FrequenceOfWage,
                        EmploymentType,
                        NextPayDate,
                        FollowingPayDate,
                        CompanyName,
                        Department,
                        DurationMonths,
                        DurationYears,
                        PostHeld,
                        SupervisorName,
                        CompanyMainNo};
                this.Rows.Add(rowEmploymentInfoRow);
                return rowEmploymentInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmploymentInfoDataTable cln = ((EmploymentInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmploymentInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmploymentInfoGUID = base.Columns["EmploymentInfoGUID"];
                this.columnSourceOfIncome = base.Columns["SourceOfIncome"];
                this.columnPayPerCheque = base.Columns["PayPerCheque"];
                this.columnPayDirectDeposit = base.Columns["PayDirectDeposit"];
                this.columnFrequenceOfWage = base.Columns["FrequenceOfWage"];
                this.columnEmploymentType = base.Columns["EmploymentType"];
                this.columnNextPayDate = base.Columns["NextPayDate"];
                this.columnFollowingPayDate = base.Columns["FollowingPayDate"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnDepartment = base.Columns["Department"];
                this.columnDurationMonths = base.Columns["DurationMonths"];
                this.columnDurationYears = base.Columns["DurationYears"];
                this.columnPostHeld = base.Columns["PostHeld"];
                this.columnSupervisorName = base.Columns["SupervisorName"];
                this.columnCompanyMainNo = base.Columns["CompanyMainNo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmploymentInfoGUID = new System.Data.DataColumn("EmploymentInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmploymentInfoGUID);
                this.columnSourceOfIncome = new System.Data.DataColumn("SourceOfIncome", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceOfIncome);
                this.columnPayPerCheque = new System.Data.DataColumn("PayPerCheque", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayPerCheque);
                this.columnPayDirectDeposit = new System.Data.DataColumn("PayDirectDeposit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayDirectDeposit);
                this.columnFrequenceOfWage = new System.Data.DataColumn("FrequenceOfWage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequenceOfWage);
                this.columnEmploymentType = new System.Data.DataColumn("EmploymentType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmploymentType);
                this.columnNextPayDate = new System.Data.DataColumn("NextPayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextPayDate);
                this.columnFollowingPayDate = new System.Data.DataColumn("FollowingPayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFollowingPayDate);
                this.columnCompanyName = new System.Data.DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnDepartment = new System.Data.DataColumn("Department", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartment);
                this.columnDurationMonths = new System.Data.DataColumn("DurationMonths", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationMonths);
                this.columnDurationYears = new System.Data.DataColumn("DurationYears", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationYears);
                this.columnPostHeld = new System.Data.DataColumn("PostHeld", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostHeld);
                this.columnSupervisorName = new System.Data.DataColumn("SupervisorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupervisorName);
                this.columnCompanyMainNo = new System.Data.DataColumn("CompanyMainNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyMainNo);
                this.columnSourceOfIncome.MaxLength = 128;
                this.columnPayDirectDeposit.MaxLength = 3;
                this.columnFrequenceOfWage.MaxLength = 32;
                this.columnEmploymentType.MaxLength = 64;
                this.columnCompanyName.MaxLength = 128;
                this.columnDepartment.MaxLength = 128;
                this.columnPostHeld.MaxLength = 128;
                this.columnSupervisorName.MaxLength = 128;
                this.columnCompanyMainNo.MaxLength = 32;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoRow NewEmploymentInfoRow() {
                return ((EmploymentInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmploymentInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmploymentInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmploymentInfoRowChanged != null)) {
                    this.EmploymentInfoRowChanged(this, new EmploymentInfoRowChangeEvent(((EmploymentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmploymentInfoRowChanging != null)) {
                    this.EmploymentInfoRowChanging(this, new EmploymentInfoRowChangeEvent(((EmploymentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmploymentInfoRowDeleted != null)) {
                    this.EmploymentInfoRowDeleted(this, new EmploymentInfoRowChangeEvent(((EmploymentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmploymentInfoRowDeleting != null)) {
                    this.EmploymentInfoRowDeleting(this, new EmploymentInfoRowChangeEvent(((EmploymentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmploymentInfoRow(EmploymentInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmploymentInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BankInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBankInfoGUID;
            
            private System.Data.DataColumn columnSocAccountNo;
            
            private System.Data.DataColumn columnBranchSortCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoDataTable() {
                this.TableName = "BankInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BankInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BankInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankInfoGUIDColumn {
                get {
                    return this.columnBankInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SocAccountNoColumn {
                get {
                    return this.columnSocAccountNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BranchSortCodeColumn {
                get {
                    return this.columnBranchSortCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoRow this[int index] {
                get {
                    return ((BankInfoRow)(this.Rows[index]));
                }
            }
            
            public event BankInfoRowChangeEventHandler BankInfoRowChanging;
            
            public event BankInfoRowChangeEventHandler BankInfoRowChanged;
            
            public event BankInfoRowChangeEventHandler BankInfoRowDeleting;
            
            public event BankInfoRowChangeEventHandler BankInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBankInfoRow(BankInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoRow AddBankInfoRow(System.Guid BankInfoGUID, string SocAccountNo, string BranchSortCode) {
                BankInfoRow rowBankInfoRow = ((BankInfoRow)(this.NewRow()));
                rowBankInfoRow.ItemArray = new object[] {
                        BankInfoGUID,
                        SocAccountNo,
                        BranchSortCode};
                this.Rows.Add(rowBankInfoRow);
                return rowBankInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BankInfoDataTable cln = ((BankInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BankInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBankInfoGUID = base.Columns["BankInfoGUID"];
                this.columnSocAccountNo = base.Columns["SocAccountNo"];
                this.columnBranchSortCode = base.Columns["BranchSortCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBankInfoGUID = new System.Data.DataColumn("BankInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankInfoGUID);
                this.columnSocAccountNo = new System.Data.DataColumn("SocAccountNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSocAccountNo);
                this.columnBranchSortCode = new System.Data.DataColumn("BranchSortCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchSortCode);
                this.columnSocAccountNo.MaxLength = 128;
                this.columnBranchSortCode.MaxLength = 32;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoRow NewBankInfoRow() {
                return ((BankInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BankInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BankInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BankInfoRowChanged != null)) {
                    this.BankInfoRowChanged(this, new BankInfoRowChangeEvent(((BankInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BankInfoRowChanging != null)) {
                    this.BankInfoRowChanging(this, new BankInfoRowChangeEvent(((BankInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BankInfoRowDeleted != null)) {
                    this.BankInfoRowDeleted(this, new BankInfoRowChangeEvent(((BankInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BankInfoRowDeleting != null)) {
                    this.BankInfoRowDeleting(this, new BankInfoRowChangeEvent(((BankInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBankInfoRow(BankInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BankInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReferencesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserInfoGUID;
            
            private System.Data.DataColumn columnReferenceRelation;
            
            private System.Data.DataColumn columnReferenceUserGUID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesDataTable() {
                this.TableName = "References";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReferencesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReferencesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserInfoGUIDColumn {
                get {
                    return this.columnUserInfoGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReferenceRelationColumn {
                get {
                    return this.columnReferenceRelation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReferenceUserGUIDColumn {
                get {
                    return this.columnReferenceUserGUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesRow this[int index] {
                get {
                    return ((ReferencesRow)(this.Rows[index]));
                }
            }
            
            public event ReferencesRowChangeEventHandler ReferencesRowChanging;
            
            public event ReferencesRowChangeEventHandler ReferencesRowChanged;
            
            public event ReferencesRowChangeEventHandler ReferencesRowDeleting;
            
            public event ReferencesRowChangeEventHandler ReferencesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReferencesRow(ReferencesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesRow AddReferencesRow(System.Guid UserInfoGUID, string ReferenceRelation, System.Guid ReferenceUserGUID) {
                ReferencesRow rowReferencesRow = ((ReferencesRow)(this.NewRow()));
                rowReferencesRow.ItemArray = new object[] {
                        UserInfoGUID,
                        ReferenceRelation,
                        ReferenceUserGUID};
                this.Rows.Add(rowReferencesRow);
                return rowReferencesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReferencesDataTable cln = ((ReferencesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReferencesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserInfoGUID = base.Columns["UserInfoGUID"];
                this.columnReferenceRelation = base.Columns["ReferenceRelation"];
                this.columnReferenceUserGUID = base.Columns["ReferenceUserGUID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserInfoGUID = new System.Data.DataColumn("UserInfoGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserInfoGUID);
                this.columnReferenceRelation = new System.Data.DataColumn("ReferenceRelation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceRelation);
                this.columnReferenceUserGUID = new System.Data.DataColumn("ReferenceUserGUID", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceUserGUID);
                this.columnReferenceRelation.MaxLength = 32;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesRow NewReferencesRow() {
                return ((ReferencesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReferencesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReferencesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReferencesRowChanged != null)) {
                    this.ReferencesRowChanged(this, new ReferencesRowChangeEvent(((ReferencesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReferencesRowChanging != null)) {
                    this.ReferencesRowChanging(this, new ReferencesRowChangeEvent(((ReferencesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReferencesRowDeleted != null)) {
                    this.ReferencesRowDeleted(this, new ReferencesRowChangeEvent(((ReferencesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReferencesRowDeleting != null)) {
                    this.ReferencesRowDeleting(this, new ReferencesRowChangeEvent(((ReferencesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReferencesRow(ReferencesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Users ds = new Users();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReferencesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserAccountsRow : System.Data.DataRow {
            
            private UserAccountsDataTable tableUserAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserAccounts = ((UserAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AccountGUID {
                get {
                    return ((System.Guid)(this[this.tableUserAccounts.AccountGUIDColumn]));
                }
                set {
                    this[this.tableUserAccounts.AccountGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserGUID {
                get {
                    return ((System.Guid)(this[this.tableUserAccounts.UserGUIDColumn]));
                }
                set {
                    this[this.tableUserAccounts.UserGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableUserAccounts.PasswordColumn]));
                }
                set {
                    this[this.tableUserAccounts.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((System.DateTime)(this[this.tableUserAccounts.CreateDateColumn]));
                }
                set {
                    this[this.tableUserAccounts.CreateDateColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUsers.UserGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserGUID\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UserGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserTypeID {
                get {
                    try {
                        return ((int)(this[this.tableUsers.UserTypeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserTypeID\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UserTypeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    if (this.IsFirstNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.FirstNameColumn]));
                    }
                }
                set {
                    this[this.tableUsers.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleName {
                get {
                    if (this.IsMiddleNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.MiddleNameColumn]));
                    }
                }
                set {
                    this[this.tableUsers.MiddleNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    if (this.IsLastNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.LastNameColumn]));
                    }
                }
                set {
                    this[this.tableUsers.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UserDOB {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUsers.UserDOBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserDOB\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UserDOBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailAddress {
                get {
                    if (this.IsEmailAddressNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.EmailAddressColumn]));
                    }
                }
                set {
                    this[this.tableUsers.EmailAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TelephoneNo {
                get {
                    if (this.IsTelephoneNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.TelephoneNoColumn]));
                    }
                }
                set {
                    this[this.tableUsers.TelephoneNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileNo {
                get {
                    if (this.IsMobileNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.MobileNoColumn]));
                    }
                }
                set {
                    this[this.tableUsers.MobileNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUsers.UserInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserInfoGUID\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UserInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    if (this.IsTitleNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.TitleColumn]));
                    }
                }
                set {
                    this[this.tableUsers.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FaxNo {
                get {
                    if (this.IsFaxNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.FaxNoColumn]));
                    }
                }
                set {
                    this[this.tableUsers.FaxNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeToCallFrom {
                get {
                    if (this.IsTimeToCallFromNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.TimeToCallFromColumn]));
                    }
                }
                set {
                    this[this.tableUsers.TimeToCallFromColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeToCallTo {
                get {
                    if (this.IsTimeToCallToNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.TimeToCallToColumn]));
                    }
                }
                set {
                    this[this.tableUsers.TimeToCallToColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserGUIDNull() {
                return this.IsNull(this.tableUsers.UserGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserGUIDNull() {
                this[this.tableUsers.UserGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserTypeIDNull() {
                return this.IsNull(this.tableUsers.UserTypeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserTypeIDNull() {
                this[this.tableUsers.UserTypeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableUsers.FirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableUsers.FirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableUsers.MiddleNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleNameNull() {
                this[this.tableUsers.MiddleNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableUsers.LastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableUsers.LastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserDOBNull() {
                return this.IsNull(this.tableUsers.UserDOBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserDOBNull() {
                this[this.tableUsers.UserDOBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailAddressNull() {
                return this.IsNull(this.tableUsers.EmailAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailAddressNull() {
                this[this.tableUsers.EmailAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneNoNull() {
                return this.IsNull(this.tableUsers.TelephoneNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneNoNull() {
                this[this.tableUsers.TelephoneNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileNoNull() {
                return this.IsNull(this.tableUsers.MobileNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileNoNull() {
                this[this.tableUsers.MobileNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserInfoGUIDNull() {
                return this.IsNull(this.tableUsers.UserInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserInfoGUIDNull() {
                this[this.tableUsers.UserInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableUsers.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableUsers.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNoNull() {
                return this.IsNull(this.tableUsers.FaxNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNoNull() {
                this[this.tableUsers.FaxNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeToCallFromNull() {
                return this.IsNull(this.tableUsers.TimeToCallFromColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeToCallFromNull() {
                this[this.tableUsers.TimeToCallFromColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeToCallToNull() {
                return this.IsNull(this.tableUsers.TimeToCallToColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeToCallToNull() {
                this[this.tableUsers.TimeToCallToColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserInfoRow : System.Data.DataRow {
            
            private UserInfoDataTable tableUserInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserInfo = ((UserInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUserInfo.UserInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserInfoGUID\' in table \'UserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfo.UserInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUserInfo.UserGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserGUID\' in table \'UserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfo.UserGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AddressInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUserInfo.AddressInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AddressInfoGUID\' in table \'UserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfo.AddressInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid WorkInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUserInfo.WorkInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkInfoGUID\' in table \'UserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfo.WorkInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BankInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableUserInfo.BankInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankInfoGUID\' in table \'UserInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfo.BankInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserInfoGUIDNull() {
                return this.IsNull(this.tableUserInfo.UserInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserInfoGUIDNull() {
                this[this.tableUserInfo.UserInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserGUIDNull() {
                return this.IsNull(this.tableUserInfo.UserGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserGUIDNull() {
                this[this.tableUserInfo.UserGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressInfoGUIDNull() {
                return this.IsNull(this.tableUserInfo.AddressInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressInfoGUIDNull() {
                this[this.tableUserInfo.AddressInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkInfoGUIDNull() {
                return this.IsNull(this.tableUserInfo.WorkInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkInfoGUIDNull() {
                this[this.tableUserInfo.WorkInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankInfoGUIDNull() {
                return this.IsNull(this.tableUserInfo.BankInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankInfoGUIDNull() {
                this[this.tableUserInfo.BankInfoGUIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AddressesRow : System.Data.DataRow {
            
            private AddressesDataTable tableAddresses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddressesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddresses = ((AddressesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingName {
                get {
                    if (this.IsBuildingNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.BuildingNameColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.BuildingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingNo {
                get {
                    if (this.IsBuildingNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.BuildingNoColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.BuildingNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlatNo {
                get {
                    if (this.IsFlatNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.FlatNoColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.FlatNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    if (this.IsStreetNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.StreetColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.StreetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalTown {
                get {
                    if (this.IsPostalTownNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.PostalTownColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.PostalTownColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    if (this.IsPostalCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.PostalCodeColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.PostalCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string County {
                get {
                    if (this.IsCountyNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.CountyColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.CountyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnOrRent {
                get {
                    if (this.IsOwnOrRentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAddresses.OwnOrRentColumn]));
                    }
                }
                set {
                    this[this.tableAddresses.OwnOrRentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DurationYears {
                get {
                    try {
                        return ((int)(this[this.tableAddresses.DurationYearsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DurationYears\' in table \'Addresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddresses.DurationYearsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DurationMonths {
                get {
                    try {
                        return ((int)(this[this.tableAddresses.DurationMonthsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DurationMonths\' in table \'Addresses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddresses.DurationMonthsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AddressInfoGUID {
                get {
                    return ((System.Guid)(this[this.tableAddresses.AddressInfoGUIDColumn]));
                }
                set {
                    this[this.tableAddresses.AddressInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingNameNull() {
                return this.IsNull(this.tableAddresses.BuildingNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingNameNull() {
                this[this.tableAddresses.BuildingNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingNoNull() {
                return this.IsNull(this.tableAddresses.BuildingNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingNoNull() {
                this[this.tableAddresses.BuildingNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlatNoNull() {
                return this.IsNull(this.tableAddresses.FlatNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlatNoNull() {
                this[this.tableAddresses.FlatNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableAddresses.StreetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableAddresses.StreetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalTownNull() {
                return this.IsNull(this.tableAddresses.PostalTownColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalTownNull() {
                this[this.tableAddresses.PostalTownColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddresses.PostalCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableAddresses.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyNull() {
                return this.IsNull(this.tableAddresses.CountyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyNull() {
                this[this.tableAddresses.CountyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnOrRentNull() {
                return this.IsNull(this.tableAddresses.OwnOrRentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnOrRentNull() {
                this[this.tableAddresses.OwnOrRentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationYearsNull() {
                return this.IsNull(this.tableAddresses.DurationYearsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationYearsNull() {
                this[this.tableAddresses.DurationYearsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationMonthsNull() {
                return this.IsNull(this.tableAddresses.DurationMonthsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationMonthsNull() {
                this[this.tableAddresses.DurationMonthsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdentityInfoRow : System.Data.DataRow {
            
            private IdentityInfoDataTable tableIdentityInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdentityInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdentityInfo = ((IdentityInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableIdentityInfo.UserInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserInfoGUID\' in table \'IdentityInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIdentityInfo.UserInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IdentityNumberName {
                get {
                    if (this.IsIdentityNumberNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableIdentityInfo.IdentityNumberNameColumn]));
                    }
                }
                set {
                    this[this.tableIdentityInfo.IdentityNumberNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IdentityNo {
                get {
                    if (this.IsIdentityNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableIdentityInfo.IdentityNoColumn]));
                    }
                }
                set {
                    this[this.tableIdentityInfo.IdentityNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserInfoGUIDNull() {
                return this.IsNull(this.tableIdentityInfo.UserInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserInfoGUIDNull() {
                this[this.tableIdentityInfo.UserInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentityNumberNameNull() {
                return this.IsNull(this.tableIdentityInfo.IdentityNumberNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentityNumberNameNull() {
                this[this.tableIdentityInfo.IdentityNumberNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentityNoNull() {
                return this.IsNull(this.tableIdentityInfo.IdentityNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentityNoNull() {
                this[this.tableIdentityInfo.IdentityNoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmploymentInfoRow : System.Data.DataRow {
            
            private EmploymentInfoDataTable tableEmploymentInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmploymentInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmploymentInfo = ((EmploymentInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid EmploymentInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableEmploymentInfo.EmploymentInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmploymentInfoGUID\' in table \'EmploymentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmploymentInfo.EmploymentInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceOfIncome {
                get {
                    if (this.IsSourceOfIncomeNull()) {
                        return "(Empty)";
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.SourceOfIncomeColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.SourceOfIncomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayPerCheque {
                get {
                    try {
                        return ((double)(this[this.tableEmploymentInfo.PayPerChequeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PayPerCheque\' in table \'EmploymentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmploymentInfo.PayPerChequeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayDirectDeposit {
                get {
                    if (this.IsPayDirectDepositNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.PayDirectDepositColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.PayDirectDepositColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FrequenceOfWage {
                get {
                    if (this.IsFrequenceOfWageNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.FrequenceOfWageColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.FrequenceOfWageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmploymentType {
                get {
                    if (this.IsEmploymentTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.EmploymentTypeColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.EmploymentTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextPayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmploymentInfo.NextPayDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NextPayDate\' in table \'EmploymentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmploymentInfo.NextPayDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FollowingPayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmploymentInfo.FollowingPayDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FollowingPayDate\' in table \'EmploymentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmploymentInfo.FollowingPayDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    if (this.IsCompanyNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.CompanyNameColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.CompanyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Department {
                get {
                    if (this.IsDepartmentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.DepartmentColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.DepartmentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DurationMonths {
                get {
                    if (this.IsDurationMonthsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.DurationMonthsColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.DurationMonthsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DurationYears {
                get {
                    if (this.IsDurationYearsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.DurationYearsColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.DurationYearsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostHeld {
                get {
                    if (this.IsPostHeldNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.PostHeldColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.PostHeldColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupervisorName {
                get {
                    if (this.IsSupervisorNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.SupervisorNameColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.SupervisorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyMainNo {
                get {
                    if (this.IsCompanyMainNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableEmploymentInfo.CompanyMainNoColumn]));
                    }
                }
                set {
                    this[this.tableEmploymentInfo.CompanyMainNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmploymentInfoGUIDNull() {
                return this.IsNull(this.tableEmploymentInfo.EmploymentInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmploymentInfoGUIDNull() {
                this[this.tableEmploymentInfo.EmploymentInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceOfIncomeNull() {
                return this.IsNull(this.tableEmploymentInfo.SourceOfIncomeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceOfIncomeNull() {
                this[this.tableEmploymentInfo.SourceOfIncomeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayPerChequeNull() {
                return this.IsNull(this.tableEmploymentInfo.PayPerChequeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayPerChequeNull() {
                this[this.tableEmploymentInfo.PayPerChequeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayDirectDepositNull() {
                return this.IsNull(this.tableEmploymentInfo.PayDirectDepositColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayDirectDepositNull() {
                this[this.tableEmploymentInfo.PayDirectDepositColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequenceOfWageNull() {
                return this.IsNull(this.tableEmploymentInfo.FrequenceOfWageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequenceOfWageNull() {
                this[this.tableEmploymentInfo.FrequenceOfWageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmploymentTypeNull() {
                return this.IsNull(this.tableEmploymentInfo.EmploymentTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmploymentTypeNull() {
                this[this.tableEmploymentInfo.EmploymentTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextPayDateNull() {
                return this.IsNull(this.tableEmploymentInfo.NextPayDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextPayDateNull() {
                this[this.tableEmploymentInfo.NextPayDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFollowingPayDateNull() {
                return this.IsNull(this.tableEmploymentInfo.FollowingPayDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFollowingPayDateNull() {
                this[this.tableEmploymentInfo.FollowingPayDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableEmploymentInfo.CompanyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableEmploymentInfo.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNull() {
                return this.IsNull(this.tableEmploymentInfo.DepartmentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNull() {
                this[this.tableEmploymentInfo.DepartmentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationMonthsNull() {
                return this.IsNull(this.tableEmploymentInfo.DurationMonthsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationMonthsNull() {
                this[this.tableEmploymentInfo.DurationMonthsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationYearsNull() {
                return this.IsNull(this.tableEmploymentInfo.DurationYearsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationYearsNull() {
                this[this.tableEmploymentInfo.DurationYearsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostHeldNull() {
                return this.IsNull(this.tableEmploymentInfo.PostHeldColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostHeldNull() {
                this[this.tableEmploymentInfo.PostHeldColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupervisorNameNull() {
                return this.IsNull(this.tableEmploymentInfo.SupervisorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupervisorNameNull() {
                this[this.tableEmploymentInfo.SupervisorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyMainNoNull() {
                return this.IsNull(this.tableEmploymentInfo.CompanyMainNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyMainNoNull() {
                this[this.tableEmploymentInfo.CompanyMainNoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BankInfoRow : System.Data.DataRow {
            
            private BankInfoDataTable tableBankInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BankInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBankInfo = ((BankInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BankInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableBankInfo.BankInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankInfoGUID\' in table \'BankInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBankInfo.BankInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SocAccountNo {
                get {
                    if (this.IsSocAccountNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBankInfo.SocAccountNoColumn]));
                    }
                }
                set {
                    this[this.tableBankInfo.SocAccountNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchSortCode {
                get {
                    if (this.IsBranchSortCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBankInfo.BranchSortCodeColumn]));
                    }
                }
                set {
                    this[this.tableBankInfo.BranchSortCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankInfoGUIDNull() {
                return this.IsNull(this.tableBankInfo.BankInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankInfoGUIDNull() {
                this[this.tableBankInfo.BankInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSocAccountNoNull() {
                return this.IsNull(this.tableBankInfo.SocAccountNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSocAccountNoNull() {
                this[this.tableBankInfo.SocAccountNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchSortCodeNull() {
                return this.IsNull(this.tableBankInfo.BranchSortCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchSortCodeNull() {
                this[this.tableBankInfo.BranchSortCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReferencesRow : System.Data.DataRow {
            
            private ReferencesDataTable tableReferences;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReferencesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReferences = ((ReferencesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserInfoGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReferences.UserInfoGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserInfoGUID\' in table \'References\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferences.UserInfoGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceRelation {
                get {
                    if (this.IsReferenceRelationNull()) {
                        return "(Empty)";
                    }
                    else {
                        return ((string)(this[this.tableReferences.ReferenceRelationColumn]));
                    }
                }
                set {
                    this[this.tableReferences.ReferenceRelationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ReferenceUserGUID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReferences.ReferenceUserGUIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReferenceUserGUID\' in table \'References\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferences.ReferenceUserGUIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserInfoGUIDNull() {
                return this.IsNull(this.tableReferences.UserInfoGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserInfoGUIDNull() {
                this[this.tableReferences.UserInfoGUIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceRelationNull() {
                return this.IsNull(this.tableReferences.ReferenceRelationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceRelationNull() {
                this[this.tableReferences.ReferenceRelationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceUserGUIDNull() {
                return this.IsNull(this.tableReferences.ReferenceUserGUIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceUserGUIDNull() {
                this[this.tableReferences.ReferenceUserGUIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserAccountsRowChangeEvent : System.EventArgs {
            
            private UserAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsRowChangeEvent(UserAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserInfoRowChangeEvent : System.EventArgs {
            
            private UserInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoRowChangeEvent(UserInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AddressesRowChangeEvent : System.EventArgs {
            
            private AddressesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesRowChangeEvent(AddressesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdentityInfoRowChangeEvent : System.EventArgs {
            
            private IdentityInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoRowChangeEvent(IdentityInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdentityInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmploymentInfoRowChangeEvent : System.EventArgs {
            
            private EmploymentInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoRowChangeEvent(EmploymentInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmploymentInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BankInfoRowChangeEvent : System.EventArgs {
            
            private BankInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoRowChangeEvent(BankInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReferencesRowChangeEvent : System.EventArgs {
            
            private ReferencesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesRowChangeEvent(ReferencesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReferencesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LAPS.DataLayer.DataSets.UsersTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserAccountsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserAccountsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserAccounts";
            tableMapping.ColumnMappings.Add("AccountGUID", "AccountGUID");
            tableMapping.ColumnMappings.Add("UserGUID", "UserGUID");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[UserAccounts] ([AccountGUID], [UserGUID], [Password], [CreateD" +
                "ate]) VALUES (@AccountGUID, @UserGUID, @Password, @CreateDate)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "AccountGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AccountGUID, UserGUID, Password, CreateDate FROM dbo.UserAccounts";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT * FROM dbo.UserAccounts Where Password=@Password and UserGUID=@UserGuid";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[UserAccounts] ([AccountGUID], [UserGUID], [Password], [CreateD" +
                "ate]) VALUES (@AccountGUID, @UserGUID, @Password, @CreateDate)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "AccountGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.UserAccountsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.UserAccountsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.UserAccountsDataTable dataTable = new Users.UserAccountsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UserAccountsDataTable GetAccount(string Password, System.Guid UserGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Password));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(UserGuid));
            Users.UserAccountsDataTable dataTable = new Users.UserAccountsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.UserAccountsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "UserAccounts");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AccountGUID, System.Guid UserGUID, string Password, System.DateTime CreateDate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AccountGUID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(UserGUID));
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(CreateDate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(System.Guid AccountGUID, System.Guid UserGUID, string Password, System.DateTime CreateDate) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(AccountGUID));
            command.Parameters[1].Value = ((System.Guid)(UserGUID));
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                command.Parameters[2].Value = ((string)(Password));
            }
            command.Parameters[3].Value = ((System.DateTime)(CreateDate));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("UserGUID", "UserGUID");
            tableMapping.ColumnMappings.Add("UserTypeID", "UserTypeID");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("MiddleName", "MiddleName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("UserDOB", "UserDOB");
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
            tableMapping.ColumnMappings.Add("TelephoneNo", "TelephoneNo");
            tableMapping.ColumnMappings.Add("MobileNo", "MobileNo");
            tableMapping.ColumnMappings.Add("UserInfoGUID", "UserInfoGUID");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("FaxNo", "FaxNo");
            tableMapping.ColumnMappings.Add("TimeToCallFrom", "TimeToCallFrom");
            tableMapping.ColumnMappings.Add("TimeToCallTo", "TimeToCallTo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Users] ([UserGUID], [UserTypeID], [FirstName], [MiddleName], [LastName], [UserDOB], [EmailAddress], [TelephoneNo], [MobileNo], [UserInfoGUID], [Title], [FaxNo], [TimeToCallFrom], [TimeToCallTo]) VALUES (@UserGUID, @UserTypeID, @FirstName, @MiddleName, @LastName, @UserDOB, @EmailAddress, @TelephoneNo, @MobileNo, @UserInfoGUID, @Title, @FaxNo, @TimeToCallFrom, @TimeToCallTo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserTypeID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserTypeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MiddleName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MiddleName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserDOB", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "UserDOB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmailAddress", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TelephoneNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TelephoneNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobileNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MobileNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FaxNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FaxNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeToCallFrom", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeToCallFrom", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeToCallTo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeToCallTo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserGUID, UserTypeID, FirstName, MiddleName, LastName, UserDOB, EmailAddre" +
                "ss, TelephoneNo, MobileNo, UserInfoGUID, Title, FaxNo, TimeToCallFrom, TimeToCal" +
                "lTo FROM dbo.Users";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT COUNT(EmailAddress) FROM Users Where EmailAddress = @Email";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.NChar, 256, System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT UserTypeID, FirstName, MiddleName, LastName, UserDOB, EmailAddress, Teleph" +
                "oneNo, MobileNo, UserInfoGUID, Title, FaxNo, TimeToCallFrom, TimeToCallTo FROM d" +
                "bo.Users Where UserGUID = @UserGuid ";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT UserGUID FROM dbo.Users Where EmailAddress = @EmailAddress";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmailAddress", System.Data.SqlDbType.NChar, 256, System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "INSERT INTO [dbo].[Users] ([UserGUID], [UserTypeID], [EmailAddress]) Values (@Use" +
                "rGUID, @UserTypeID, @EmailAddress)";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserTypeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserTypeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmailAddress", System.Data.SqlDbType.NChar, 256, System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "INSERT INTO [dbo].[Users] ([UserGUID], [UserTypeID], [FirstName]) VALUES (@UserGU" +
                "ID, @UserTypeID, @FirstName)";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserTypeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserTypeID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"UPDATE [dbo].[Users] Set [FirstName] = @FirstName, [MiddleName]=@MiddleName,  [LastName]=@LastName, [UserDOB]=@UserDOB, [TelephoneNo]=@TelephoneNo,  [MobileNo]=@MobileNo, [Title]=@Title, [FaxNo]=@FaxNo, [TimeToCallFrom]=@TimeToCallFrom,  [TimeToCallTo]= @TimeToCallTo Where UserGUID=@UserGUID";
            this._commandCollection[6].CommandType = System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "FirstName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MiddleName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "MiddleName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "LastName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserDOB", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "UserDOB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TelephoneNo", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "TelephoneNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobileNo", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "MobileNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FaxNo", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "FaxNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeToCallFrom", System.Data.SqlDbType.NChar, 6, System.Data.ParameterDirection.Input, 0, 0, "TimeToCallFrom", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeToCallTo", System.Data.SqlDbType.NChar, 6, System.Data.ParameterDirection.Input, 0, 0, "TimeToCallTo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.UsersDataTable dataTable = new Users.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UsersDataTable GetUserInfo(System.Nullable<System.Guid> UserGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserGuid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserGuid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.UsersDataTable dataTable = new Users.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UsersDataTable GetUserOnEmailAddress(string EmailAddress) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((EmailAddress == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(EmailAddress));
            }
            Users.UsersDataTable dataTable = new Users.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> UserGUID, System.Nullable<int> UserTypeID, string FirstName, string MiddleName, string LastName, System.Nullable<System.DateTime> UserDOB, string EmailAddress, string TelephoneNo, string MobileNo, System.Nullable<System.Guid> UserInfoGUID, string Title, string FaxNo, string TimeToCallFrom, string TimeToCallTo) {
            if ((UserGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserTypeID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserTypeID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((FirstName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FirstName));
            }
            if ((MiddleName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MiddleName));
            }
            if ((LastName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(LastName));
            }
            if ((UserDOB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(UserDOB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((EmailAddress == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(EmailAddress));
            }
            if ((TelephoneNo == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TelephoneNo));
            }
            if ((MobileNo == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MobileNo));
            }
            if ((UserInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Title == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Title));
            }
            if ((FaxNo == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(FaxNo));
            }
            if ((TimeToCallFrom == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(TimeToCallFrom));
            }
            if ((TimeToCallTo == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(TimeToCallTo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object CheckEmail(string Email) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Email == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(Email));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertOnEmailAddress(System.Nullable<System.Guid> UserGUID, System.Nullable<int> UserTypeID, string EmailAddress) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((UserGUID.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserTypeID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(UserTypeID.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((EmailAddress == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(EmailAddress));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertOnName(System.Nullable<System.Guid> UserGUID, System.Nullable<int> UserTypeID, string FirstName) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((UserGUID.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserTypeID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(UserTypeID.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((FirstName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(FirstName));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int SaveUser(string FirstName, string MiddleName, string LastName, System.Nullable<System.DateTime> UserDOB, string TelephoneNo, string MobileNo, string Title, string FaxNo, string TimeToCallFrom, string TimeToCallTo, System.Nullable<System.Guid> UserGUID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((FirstName == null)) {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(FirstName));
            }
            if ((MiddleName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(MiddleName));
            }
            if ((LastName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(LastName));
            }
            if ((UserDOB.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(UserDOB.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((TelephoneNo == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(TelephoneNo));
            }
            if ((MobileNo == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(MobileNo));
            }
            if ((Title == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Title));
            }
            if ((FaxNo == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(FaxNo));
            }
            if ((TimeToCallFrom == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(TimeToCallFrom));
            }
            if ((TimeToCallTo == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(TimeToCallTo));
            }
            if ((UserGUID.HasValue == true)) {
                command.Parameters[10].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserInfo";
            tableMapping.ColumnMappings.Add("UserInfoGUID", "UserInfoGUID");
            tableMapping.ColumnMappings.Add("UserGUID", "UserGUID");
            tableMapping.ColumnMappings.Add("AddressInfoGUID", "AddressInfoGUID");
            tableMapping.ColumnMappings.Add("WorkInfoGUID", "WorkInfoGUID");
            tableMapping.ColumnMappings.Add("BankInfoGUID", "BankInfoGUID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [UserInfo] ([UserInfoGUID], [UserGUID], [AddressInfoGUID], [WorkInfoG" +
                "UID], [BankInfoGUID]) VALUES (@UserInfoGUID, @UserGUID, @AddressInfoGUID, @WorkI" +
                "nfoGUID, @BankInfoGUID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AddressInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "AddressInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WorkInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "WorkInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "BankInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[11];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserInfoGUID, UserGUID, AddressInfoGUID, WorkInfoGUID, BankInfoGUID FROM U" +
                "serInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT COUNT(UserInfoGUID) FROM UserInfo Where UserGUID = @UserGUID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT AddressInfoGUID FROM UserInfo WHERE (UserInfoGUID = @UserInfoGuid)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT BankInfoGUID FROM UserInfo Where UserInfoGUID = @UserInfoGuid";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT WorkInfoGUID FROM UserInfo WHERE (UserInfoGUID = @UserInfoGuid)";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT UserInfoGUID FROM UserInfo WHERE (UserGUID = @UserGUID)";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "INSERT INTO [dbo].[UserInfo] ([UserInfoGUID], [UserGUID]) VALUES (@UserInfoGUID, " +
                "@UserGUID)";
            this._commandCollection[6].CommandType = System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE UserInfo Set AddressInfoGUID = @AddressInfoGuid Where UserInfoGUID = @User" +
                "InfoGuid";
            this._commandCollection[7].CommandType = System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AddressInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 4, System.Data.ParameterDirection.Input, 0, 0, "AddressInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[8] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "UPDATE UserInfo Set BankInfoGUID = @BankInfoGuid Where UserInfoGUID = @UserInfoGu" +
                "id";
            this._commandCollection[8].CommandType = System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "BankInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[9] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "UPDATE UserInfo Set WorkInfoGUID = @EmploymentInfoGuid Where UserInfoGUID = @User" +
                "InfoGuid";
            this._commandCollection[9].CommandType = System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "WorkInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[10] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "UPDATE UserInfo Set ReferenceInfoGUID = @RefInfoGuid Where UserInfoGUID = @UserIn" +
                "foGuid";
            this._commandCollection[10].CommandType = System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RefInfoGuid", System.Data.SqlDbType.Variant, 1024, System.Data.ParameterDirection.Input, 0, 0, "ReferenceInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.UserInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.UserInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.UserInfoDataTable dataTable = new Users.UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UserInfoDataTable GetAddressInfoGUID(System.Nullable<System.Guid> UserInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserInfoGuid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.UserInfoDataTable dataTable = new Users.UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UserInfoDataTable GetBankInfoGuid(System.Guid UserInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserInfoGuid));
            Users.UserInfoDataTable dataTable = new Users.UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UserInfoDataTable GetEmpInfoGuid(System.Guid UserInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserInfoGuid));
            Users.UserInfoDataTable dataTable = new Users.UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.UserInfoDataTable GetUserInfoGUID(System.Nullable<System.Guid> UserGUID) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((UserGUID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.UserInfoDataTable dataTable = new Users.UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.UserInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "UserInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid UserInfoGUID, System.Nullable<System.Guid> UserGUID, System.Nullable<System.Guid> AddressInfoGUID, System.Nullable<System.Guid> WorkInfoGUID, System.Nullable<System.Guid> BankInfoGUID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserInfoGUID));
            if ((UserGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((AddressInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(AddressInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((WorkInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(WorkInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((BankInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.Guid)(BankInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object CheckUserInfoGUID(System.Nullable<System.Guid> UserGUID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((UserGUID.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertUserInfoGUID(System.Guid UserInfoGUID, System.Nullable<System.Guid> UserGUID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            command.Parameters[0].Value = ((System.Guid)(UserInfoGUID));
            if ((UserGUID.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(UserGUID.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateAddressInfoGUID(System.Nullable<System.Guid> AddressInfoGuid, System.Nullable<System.Guid> UserInfoGuid) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((AddressInfoGuid.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(AddressInfoGuid.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserInfoGuid.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateBankInfoGUID(System.Nullable<System.Guid> BankInfoGuid, System.Nullable<System.Guid> UserInfoGuid) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((BankInfoGuid.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(BankInfoGuid.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserInfoGuid.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateEmploymentInfoGUID(System.Nullable<System.Guid> EmploymentInfoGuid, System.Nullable<System.Guid> UserInfoGuid) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            if ((EmploymentInfoGuid.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(EmploymentInfoGuid.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((UserInfoGuid.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateReferenceInfoGUID(object RefInfoGuid, System.Nullable<System.Guid> UserInfoGuid) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            if ((RefInfoGuid == null)) {
                throw new System.ArgumentNullException("RefInfoGuid");
            }
            else {
                command.Parameters[0].Value = ((object)(RefInfoGuid));
            }
            if ((UserInfoGuid.HasValue == true)) {
                command.Parameters[1].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AddressesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AddressesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Addresses";
            tableMapping.ColumnMappings.Add("BuildingName", "BuildingName");
            tableMapping.ColumnMappings.Add("BuildingNo", "BuildingNo");
            tableMapping.ColumnMappings.Add("FlatNo", "FlatNo");
            tableMapping.ColumnMappings.Add("Street", "Street");
            tableMapping.ColumnMappings.Add("PostalTown", "PostalTown");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("County", "County");
            tableMapping.ColumnMappings.Add("OwnOrRent", "OwnOrRent");
            tableMapping.ColumnMappings.Add("DurationYears", "DurationYears");
            tableMapping.ColumnMappings.Add("DurationsMonths", "DurationMonths");
            tableMapping.ColumnMappings.Add("AddressInfoGUID", "AddressInfoGUID");
            tableMapping.ColumnMappings.Add("DurationMonths", "DurationMonths");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Addresses] ([AddressInfoGUID], [BuildingName], [BuildingNo], [FlatNo], [Street], [PostalTown], [PostalCode], [County], [OwnOrRent], [DurationYears], [DurationMonths]) VALUES (@AddressInfoGUID, @BuildingName, @BuildingNo, @FlatNo, @Street, @PostalTown, @PostalCode, @County, @OwnOrRent, @DurationYears, @DurationMonths)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AddressInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "AddressInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FlatNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FlatNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Street", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Street", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalTown", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalTown", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@County", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "County", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OwnOrRent", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OwnOrRent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationYears", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DurationYears", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationMonths", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DurationMonths", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AddressInfoGUID, BuildingName, BuildingNo, FlatNo, Street, PostalTown, Pos" +
                "talCode, County, OwnOrRent, DurationYears, DurationMonths FROM dbo.Addresses";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT AddressInfoGUID, BuildingName, BuildingNo, County, DurationMonths, Duratio" +
                "nYears, FlatNo, OwnOrRent, PostalCode, PostalTown, Street FROM Addresses WHERE (" +
                "AddressInfoGUID = @AddressInfoGuid)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AddressInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "AddressInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"INSERT INTO [dbo].[Addresses] ([AddressInfoGUID], [BuildingName], [BuildingNo], [FlatNo], [Street], [PostalTown], [PostalCode], [County], [OwnOrRent], [DurationYears], [DurationMonths]) VALUES (@AddressInfoGUID, @BuildingName, @BuildingNo, @FlatNo, @Street, @PostalTown, @PostalCode, @County, @OwnOrRent, @DurationYears, @DurationMonths)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AddressInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "AddressInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingName", System.Data.SqlDbType.NChar, 256, System.Data.ParameterDirection.Input, 0, 0, "BuildingName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingNo", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "BuildingNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FlatNo", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "FlatNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Street", System.Data.SqlDbType.NChar, 256, System.Data.ParameterDirection.Input, 0, 0, "Street", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalTown", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "PostalTown", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostalCode", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "PostalCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@County", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "County", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OwnOrRent", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "OwnOrRent", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationYears", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DurationYears", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationMonths", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DurationMonths", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.AddressesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.AddressesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.AddressesDataTable dataTable = new Users.AddressesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.AddressesDataTable GetAddressInfo(System.Nullable<System.Guid> AddressInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((AddressInfoGuid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(AddressInfoGuid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.AddressesDataTable dataTable = new Users.AddressesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.AddressesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "Addresses");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid AddressInfoGUID, string BuildingName, string BuildingNo, string FlatNo, string Street, string PostalTown, string PostalCode, string County, string OwnOrRent, System.Nullable<int> DurationYears, System.Nullable<int> DurationMonths) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(AddressInfoGUID));
            if ((BuildingName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BuildingName));
            }
            if ((BuildingNo == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(BuildingNo));
            }
            if ((FlatNo == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FlatNo));
            }
            if ((Street == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Street));
            }
            if ((PostalTown == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PostalTown));
            }
            if ((PostalCode == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PostalCode));
            }
            if ((County == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(County));
            }
            if ((OwnOrRent == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(OwnOrRent));
            }
            if ((DurationYears.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(DurationYears.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((DurationMonths.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(DurationMonths.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertAddress(System.Guid AddressInfoGUID, string BuildingName, string BuildingNo, string FlatNo, string Street, string PostalTown, string PostalCode, string County, string OwnOrRent, System.Nullable<int> DurationYears, System.Nullable<int> DurationMonths) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(AddressInfoGUID));
            if ((BuildingName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(BuildingName));
            }
            if ((BuildingNo == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(BuildingNo));
            }
            if ((FlatNo == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(FlatNo));
            }
            if ((Street == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(Street));
            }
            if ((PostalTown == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(PostalTown));
            }
            if ((PostalCode == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(PostalCode));
            }
            if ((County == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(County));
            }
            if ((OwnOrRent == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(OwnOrRent));
            }
            if ((DurationYears.HasValue == true)) {
                command.Parameters[9].Value = ((int)(DurationYears.Value));
            }
            else {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            if ((DurationMonths.HasValue == true)) {
                command.Parameters[10].Value = ((int)(DurationMonths.Value));
            }
            else {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdentityInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdentityInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdentityInfo";
            tableMapping.ColumnMappings.Add("UserInfoGUID", "UserInfoGUID");
            tableMapping.ColumnMappings.Add("IdentityNumberName", "IdentityNumberName");
            tableMapping.ColumnMappings.Add("IdentityNo", "IdentityNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IdentityInfo] ([UserInfoGUID], [IdentityNumberName], [Identity" +
                "No]) VALUES (@UserInfoGUID, @IdentityNumberName, @IdentityNo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNumberName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityNumberName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserInfoGUID, IdentityNumberName, IdentityNo FROM dbo.IdentityInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IdentityNumberName, IdentityNo FROM dbo.IdentityInfo Where UserInfoGUID = " +
                "@UserInfoGuid";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[IdentityInfo] ([UserInfoGUID], [IdentityNumberName], [Identity" +
                "No]) VALUES (@UserInfoGUID, @IdentityNumberName, @IdentityNo)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNumberName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "IdentityNumberName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityNo", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "IdentityNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.IdentityInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.IdentityInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.IdentityInfoDataTable dataTable = new Users.IdentityInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.IdentityInfoDataTable GetIdentityInfo(System.Nullable<System.Guid> UserInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserInfoGuid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.IdentityInfoDataTable dataTable = new Users.IdentityInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.IdentityInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "IdentityInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> UserInfoGUID, string IdentityNumberName, string IdentityNo) {
            if ((UserInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((IdentityNumberName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(IdentityNumberName));
            }
            if ((IdentityNo == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IdentityNo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertIdentityNo(System.Nullable<System.Guid> UserInfoGUID, string IdentityNumberName, string IdentityNo) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((UserInfoGUID.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((IdentityNumberName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(IdentityNumberName));
            }
            if ((IdentityNo == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(IdentityNo));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmploymentInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmploymentInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmploymentInfo";
            tableMapping.ColumnMappings.Add("EmploymentInfoGUID", "EmploymentInfoGUID");
            tableMapping.ColumnMappings.Add("SourceOfIncome", "SourceOfIncome");
            tableMapping.ColumnMappings.Add("PayPerCheque", "PayPerCheque");
            tableMapping.ColumnMappings.Add("PayDirectDeposit", "PayDirectDeposit");
            tableMapping.ColumnMappings.Add("FrequenceOfWage", "FrequenceOfWage");
            tableMapping.ColumnMappings.Add("EmploymentType", "EmploymentType");
            tableMapping.ColumnMappings.Add("NextPayDate", "NextPayDate");
            tableMapping.ColumnMappings.Add("FollowingPayDate", "FollowingPayDate");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("Department", "Department");
            tableMapping.ColumnMappings.Add("PostHeld", "PostHeld");
            tableMapping.ColumnMappings.Add("SupervisorName", "SupervisorName");
            tableMapping.ColumnMappings.Add("CompanyMainNo", "CompanyMainNo");
            tableMapping.ColumnMappings.Add("DurationMonths", "DurationMonths");
            tableMapping.ColumnMappings.Add("DurationYears", "DurationYears");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EmploymentInfo] ([EmploymentInfoGUID], [SourceOfIncome], [PayPerCheque], [PayDirectDeposit], [FrequenceOfWage], [EmploymentType], [NextPayDate], [FollowingPayDate], [CompanyName], [Department], [PostHeld], [SupervisorName], [CompanyMainNo]) VALUES (@EmploymentInfoGUID, @SourceOfIncome, @PayPerCheque, @PayDirectDeposit, @FrequenceOfWage, @EmploymentType, @NextPayDate, @FollowingPayDate, @CompanyName, @Department, @PostHeld, @SupervisorName, @CompanyMainNo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "EmploymentInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SourceOfIncome", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SourceOfIncome", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PayPerCheque", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "PayPerCheque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PayDirectDeposit", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PayDirectDeposit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FrequenceOfWage", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FrequenceOfWage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentType", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmploymentType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NextPayDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NextPayDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FollowingPayDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FollowingPayDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Department", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Department", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostHeld", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PostHeld", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SupervisorName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SupervisorName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyMainNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CompanyMainNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmploymentInfoGUID, SourceOfIncome, PayPerCheque, PayDirectDeposit, Freque" +
                "nceOfWage, EmploymentType, NextPayDate, FollowingPayDate, CompanyName, Departmen" +
                "t, PostHeld, SupervisorName, CompanyMainNo FROM dbo.EmploymentInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT SourceOfIncome, PayPerCheque, PayDirectDeposit, FrequenceOfWage, EmploymentType, NextPayDate, FollowingPayDate, CompanyName, Department, PostHeld, SupervisorName, CompanyMainNo, DurationMonths, DurationYears FROM dbo.EmploymentInfo Where EmploymentInfoGUID = @EmploymentInfoGuid ";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "EmploymentInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"INSERT INTO [dbo].[EmploymentInfo] ([EmploymentInfoGUID], [SourceOfIncome], [PayPerCheque], [PayDirectDeposit], [FrequenceOfWage], [EmploymentType], [NextPayDate], [FollowingPayDate], [CompanyName], [Department], [PostHeld], [SupervisorName], [CompanyMainNo], [DurationYears],[DurationMonths]) VALUES (@EmploymentInfoGUID, @SourceOfIncome, @PayPerCheque, @PayDirectDeposit, @FrequenceOfWage, @EmploymentType, @NextPayDate, @FollowingPayDate, @CompanyName, @Department, @PostHeld, @SupervisorName, @CompanyMainNo, @DurationYears, @DurationMonths)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "EmploymentInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SourceOfIncome", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "SourceOfIncome", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PayPerCheque", System.Data.SqlDbType.Float, 8, System.Data.ParameterDirection.Input, 0, 0, "PayPerCheque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PayDirectDeposit", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, "PayDirectDeposit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FrequenceOfWage", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "FrequenceOfWage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmploymentType", System.Data.SqlDbType.NChar, 64, System.Data.ParameterDirection.Input, 0, 0, "EmploymentType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@NextPayDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "NextPayDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FollowingPayDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "FollowingPayDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "CompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Department", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "Department", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PostHeld", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "PostHeld", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SupervisorName", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "SupervisorName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompanyMainNo", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "CompanyMainNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationYears", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DurationYears", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DurationMonths", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DurationMonths", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.EmploymentInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.EmploymentInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.EmploymentInfoDataTable dataTable = new Users.EmploymentInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.EmploymentInfoDataTable GetUserEmpInfo(System.Guid EmploymentInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(EmploymentInfoGuid));
            Users.EmploymentInfoDataTable dataTable = new Users.EmploymentInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.EmploymentInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "EmploymentInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> EmploymentInfoGUID, string SourceOfIncome, System.Nullable<double> PayPerCheque, string PayDirectDeposit, string FrequenceOfWage, string EmploymentType, System.Nullable<System.DateTime> NextPayDate, System.Nullable<System.DateTime> FollowingPayDate, string CompanyName, string Department, string PostHeld, string SupervisorName, string CompanyMainNo) {
            if ((EmploymentInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(EmploymentInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((SourceOfIncome == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SourceOfIncome));
            }
            if ((PayPerCheque.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(PayPerCheque.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((PayDirectDeposit == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PayDirectDeposit));
            }
            if ((FrequenceOfWage == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FrequenceOfWage));
            }
            if ((EmploymentType == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(EmploymentType));
            }
            if ((NextPayDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(NextPayDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((FollowingPayDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(FollowingPayDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((CompanyName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CompanyName));
            }
            if ((Department == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Department));
            }
            if ((PostHeld == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PostHeld));
            }
            if ((SupervisorName == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(SupervisorName));
            }
            if ((CompanyMainNo == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CompanyMainNo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertEmploymentInfo(System.Guid EmploymentInfoGUID, string SourceOfIncome, System.Nullable<float> PayPerCheque, string PayDirectDeposit, string FrequenceOfWage, string EmploymentType, System.Nullable<System.DateTime> NextPayDate, System.Nullable<System.DateTime> FollowingPayDate, string CompanyName, string Department, string PostHeld, string SupervisorName, string CompanyMainNo, System.Nullable<int> DurationYears, System.Nullable<int> DurationMonths) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(EmploymentInfoGUID));
            if ((SourceOfIncome == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(SourceOfIncome));
            }
            if ((PayPerCheque.HasValue == true)) {
                command.Parameters[2].Value = ((float)(PayPerCheque.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((PayDirectDeposit == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(PayDirectDeposit));
            }
            if ((FrequenceOfWage == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(FrequenceOfWage));
            }
            if ((EmploymentType == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(EmploymentType));
            }
            if ((NextPayDate.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(NextPayDate.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((FollowingPayDate.HasValue == true)) {
                command.Parameters[7].Value = ((System.DateTime)(FollowingPayDate.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((CompanyName == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(CompanyName));
            }
            if ((Department == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(Department));
            }
            if ((PostHeld == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(PostHeld));
            }
            if ((SupervisorName == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(SupervisorName));
            }
            if ((CompanyMainNo == null)) {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(CompanyMainNo));
            }
            if ((DurationYears.HasValue == true)) {
                command.Parameters[13].Value = ((int)(DurationYears.Value));
            }
            else {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            if ((DurationMonths.HasValue == true)) {
                command.Parameters[14].Value = ((int)(DurationMonths.Value));
            }
            else {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BankInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BankInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BankInfo";
            tableMapping.ColumnMappings.Add("BankInfoGUID", "BankInfoGUID");
            tableMapping.ColumnMappings.Add("SocAccountNo", "SocAccountNo");
            tableMapping.ColumnMappings.Add("BranchSortCode", "BranchSortCode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BankInfo] ([UserInfoGUID], [SocAccountNo], [BranchSortCode]) V" +
                "ALUES (@UserInfoGUID, @SocAccountNo, @BranchSortCode)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocAccountNo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SocAccountNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BranchSortCode", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BranchSortCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserInfoGUID, SocAccountNo, BranchSortCode FROM dbo.BankInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT SocAccountNo, BranchSortCode FROM dbo.BankInfo Where BankInfoGUID = @BankI" +
                "nfoGuid ";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankInfoGuid", System.Data.SqlDbType.Variant, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[BankInfo] ([BankInfoGUID], [SocAccountNo], [BranchSortCode]) V" +
                "ALUES (@BankInfoGUID, @SocAccountNo, @BranchSortCode)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "BankInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocAccountNo", System.Data.SqlDbType.NChar, 128, System.Data.ParameterDirection.Input, 0, 0, "SocAccountNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BranchSortCode", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "BranchSortCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.BankInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.BankInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.BankInfoDataTable dataTable = new Users.BankInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(Users.BankInfoDataTable dataTable, object BankInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((BankInfoGuid == null)) {
                throw new System.ArgumentNullException("BankInfoGuid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((object)(BankInfoGuid));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.BankInfoDataTable GetUserBankInfo(object BankInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((BankInfoGuid == null)) {
                throw new System.ArgumentNullException("BankInfoGuid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((object)(BankInfoGuid));
            }
            Users.BankInfoDataTable dataTable = new Users.BankInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.BankInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "BankInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> UserInfoGUID, string SocAccountNo, string BranchSortCode) {
            if ((UserInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((SocAccountNo == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SocAccountNo));
            }
            if ((BranchSortCode == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(BranchSortCode));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertBankInfo(System.Guid BankInfoGUID, string SocAccountNo, string BranchSortCode) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(BankInfoGUID));
            if ((SocAccountNo == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(SocAccountNo));
            }
            if ((BranchSortCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(BranchSortCode));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReferencesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReferencesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "References";
            tableMapping.ColumnMappings.Add("UserInfoGUID", "UserInfoGUID");
            tableMapping.ColumnMappings.Add("ReferenceRelation", "ReferenceRelation");
            tableMapping.ColumnMappings.Add("ReferenceUserGUID", "ReferenceUserGUID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[References] ([UserInfoGUID], [ReferenceRelation], [ReferenceUs" +
                "erGUID]) VALUES (@UserInfoGUID, @ReferenceRelation, @ReferenceUserGUID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReferenceRelation", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ReferenceRelation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReferenceUserGUID", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "ReferenceUserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LAPS.DataLayer.Properties.Settings.Default.LAMS_ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserInfoGUID, ReferenceRelation, ReferenceUserGUID FROM dbo.[References]";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT ReferenceRelation, ReferenceUserGUID FROM dbo.[References] Where UserInfoG" +
                "UID = @UserInfoGuid";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGuid", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[References] ([UserInfoGUID], [ReferenceRelation], [ReferenceUs" +
                "erGUID]) VALUES (@UserInfoGUID, @ReferenceRelation, @ReferenceUserGUID)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserInfoGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "UserInfoGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReferenceRelation", System.Data.SqlDbType.NChar, 32, System.Data.ParameterDirection.Input, 0, 0, "ReferenceRelation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReferenceUserGUID", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "ReferenceUserGUID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Users.ReferencesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Users.ReferencesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Users.ReferencesDataTable dataTable = new Users.ReferencesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual Users.ReferencesDataTable GetReferenceInfo(System.Nullable<System.Guid> UserInfoGuid) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserInfoGuid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(UserInfoGuid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            Users.ReferencesDataTable dataTable = new Users.ReferencesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users.ReferencesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Users dataSet) {
            return this.Adapter.Update(dataSet, "References");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> UserInfoGUID, string ReferenceRelation, System.Nullable<System.Guid> ReferenceUserGUID) {
            if ((UserInfoGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ReferenceRelation == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ReferenceRelation));
            }
            if ((ReferenceUserGUID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(ReferenceUserGUID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertReferenceInfo(System.Nullable<System.Guid> UserInfoGUID, string ReferenceRelation, System.Nullable<System.Guid> ReferenceUserGUID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((UserInfoGUID.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(UserInfoGUID.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ReferenceRelation == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(ReferenceRelation));
            }
            if ((ReferenceUserGUID.HasValue == true)) {
                command.Parameters[2].Value = ((System.Guid)(ReferenceUserGUID.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591