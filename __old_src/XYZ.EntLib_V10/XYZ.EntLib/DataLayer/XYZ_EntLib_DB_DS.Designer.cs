//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace XYZ.EntLib.DataLayer {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("XYZ_EntLib_DB_DS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class XYZ_EntLib_DB_DS : System.Data.DataSet {
        
        private InnerExceptionsDataTable tableInnerExceptions;
        
        private LogTypesDataTable tableLogTypes;
        
        private ExtendedPropsDataTable tableExtendedProps;
        
        private ExceptionDataTable tableException;
        
        private LogEntryDataTable tableLogEntry;
        
        private ExceptionDataDataTable tableExceptionData;
        
        private EnvironmentVariablesDataTable tableEnvironmentVariables;
        
        private VerbsDataTable tableVerbs;
        
        private HostEnvironmentDataTable tableHostEnvironment;
        
        private ReflectionTargetSiteDataTable tableReflectionTargetSite;
        
        private ReflectionFieldsDataTable tableReflectionFields;
        
        private ReflectionGenericArgumentsDataTable tableReflectionGenericArguments;
        
        private ReflectionPropertiesDataTable tableReflectionProperties;
        
        private DiagnosticInfoDataTable tableDiagnosticInfo;
        
        private ProcessInfoDataTable tableProcessInfo;
        
        private StartInfoDataTable tableStartInfo;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XYZ_EntLib_DB_DS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected XYZ_EntLib_DB_DS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["InnerExceptions"] != null)) {
                    base.Tables.Add(new InnerExceptionsDataTable(ds.Tables["InnerExceptions"]));
                }
                if ((ds.Tables["LogTypes"] != null)) {
                    base.Tables.Add(new LogTypesDataTable(ds.Tables["LogTypes"]));
                }
                if ((ds.Tables["ExtendedProps"] != null)) {
                    base.Tables.Add(new ExtendedPropsDataTable(ds.Tables["ExtendedProps"]));
                }
                if ((ds.Tables["Exception"] != null)) {
                    base.Tables.Add(new ExceptionDataTable(ds.Tables["Exception"]));
                }
                if ((ds.Tables["LogEntry"] != null)) {
                    base.Tables.Add(new LogEntryDataTable(ds.Tables["LogEntry"]));
                }
                if ((ds.Tables["ExceptionData"] != null)) {
                    base.Tables.Add(new ExceptionDataDataTable(ds.Tables["ExceptionData"]));
                }
                if ((ds.Tables["EnvironmentVariables"] != null)) {
                    base.Tables.Add(new EnvironmentVariablesDataTable(ds.Tables["EnvironmentVariables"]));
                }
                if ((ds.Tables["Verbs"] != null)) {
                    base.Tables.Add(new VerbsDataTable(ds.Tables["Verbs"]));
                }
                if ((ds.Tables["HostEnvironment"] != null)) {
                    base.Tables.Add(new HostEnvironmentDataTable(ds.Tables["HostEnvironment"]));
                }
                if ((ds.Tables["ReflectionTargetSite"] != null)) {
                    base.Tables.Add(new ReflectionTargetSiteDataTable(ds.Tables["ReflectionTargetSite"]));
                }
                if ((ds.Tables["ReflectionFields"] != null)) {
                    base.Tables.Add(new ReflectionFieldsDataTable(ds.Tables["ReflectionFields"]));
                }
                if ((ds.Tables["ReflectionGenericArguments"] != null)) {
                    base.Tables.Add(new ReflectionGenericArgumentsDataTable(ds.Tables["ReflectionGenericArguments"]));
                }
                if ((ds.Tables["ReflectionProperties"] != null)) {
                    base.Tables.Add(new ReflectionPropertiesDataTable(ds.Tables["ReflectionProperties"]));
                }
                if ((ds.Tables["DiagnosticInfo"] != null)) {
                    base.Tables.Add(new DiagnosticInfoDataTable(ds.Tables["DiagnosticInfo"]));
                }
                if ((ds.Tables["ProcessInfo"] != null)) {
                    base.Tables.Add(new ProcessInfoDataTable(ds.Tables["ProcessInfo"]));
                }
                if ((ds.Tables["StartInfo"] != null)) {
                    base.Tables.Add(new StartInfoDataTable(ds.Tables["StartInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InnerExceptionsDataTable InnerExceptions {
            get {
                return this.tableInnerExceptions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogTypesDataTable LogTypes {
            get {
                return this.tableLogTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtendedPropsDataTable ExtendedProps {
            get {
                return this.tableExtendedProps;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionDataTable Exception {
            get {
                return this.tableException;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogEntryDataTable LogEntry {
            get {
                return this.tableLogEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExceptionDataDataTable ExceptionData {
            get {
                return this.tableExceptionData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnvironmentVariablesDataTable EnvironmentVariables {
            get {
                return this.tableEnvironmentVariables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerbsDataTable Verbs {
            get {
                return this.tableVerbs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HostEnvironmentDataTable HostEnvironment {
            get {
                return this.tableHostEnvironment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReflectionTargetSiteDataTable ReflectionTargetSite {
            get {
                return this.tableReflectionTargetSite;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReflectionFieldsDataTable ReflectionFields {
            get {
                return this.tableReflectionFields;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReflectionGenericArgumentsDataTable ReflectionGenericArguments {
            get {
                return this.tableReflectionGenericArguments;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReflectionPropertiesDataTable ReflectionProperties {
            get {
                return this.tableReflectionProperties;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiagnosticInfoDataTable DiagnosticInfo {
            get {
                return this.tableDiagnosticInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcessInfoDataTable ProcessInfo {
            get {
                return this.tableProcessInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StartInfoDataTable StartInfo {
            get {
                return this.tableStartInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            XYZ_EntLib_DB_DS cln = ((XYZ_EntLib_DB_DS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InnerExceptions"] != null)) {
                    base.Tables.Add(new InnerExceptionsDataTable(ds.Tables["InnerExceptions"]));
                }
                if ((ds.Tables["LogTypes"] != null)) {
                    base.Tables.Add(new LogTypesDataTable(ds.Tables["LogTypes"]));
                }
                if ((ds.Tables["ExtendedProps"] != null)) {
                    base.Tables.Add(new ExtendedPropsDataTable(ds.Tables["ExtendedProps"]));
                }
                if ((ds.Tables["Exception"] != null)) {
                    base.Tables.Add(new ExceptionDataTable(ds.Tables["Exception"]));
                }
                if ((ds.Tables["LogEntry"] != null)) {
                    base.Tables.Add(new LogEntryDataTable(ds.Tables["LogEntry"]));
                }
                if ((ds.Tables["ExceptionData"] != null)) {
                    base.Tables.Add(new ExceptionDataDataTable(ds.Tables["ExceptionData"]));
                }
                if ((ds.Tables["EnvironmentVariables"] != null)) {
                    base.Tables.Add(new EnvironmentVariablesDataTable(ds.Tables["EnvironmentVariables"]));
                }
                if ((ds.Tables["Verbs"] != null)) {
                    base.Tables.Add(new VerbsDataTable(ds.Tables["Verbs"]));
                }
                if ((ds.Tables["HostEnvironment"] != null)) {
                    base.Tables.Add(new HostEnvironmentDataTable(ds.Tables["HostEnvironment"]));
                }
                if ((ds.Tables["ReflectionTargetSite"] != null)) {
                    base.Tables.Add(new ReflectionTargetSiteDataTable(ds.Tables["ReflectionTargetSite"]));
                }
                if ((ds.Tables["ReflectionFields"] != null)) {
                    base.Tables.Add(new ReflectionFieldsDataTable(ds.Tables["ReflectionFields"]));
                }
                if ((ds.Tables["ReflectionGenericArguments"] != null)) {
                    base.Tables.Add(new ReflectionGenericArgumentsDataTable(ds.Tables["ReflectionGenericArguments"]));
                }
                if ((ds.Tables["ReflectionProperties"] != null)) {
                    base.Tables.Add(new ReflectionPropertiesDataTable(ds.Tables["ReflectionProperties"]));
                }
                if ((ds.Tables["DiagnosticInfo"] != null)) {
                    base.Tables.Add(new DiagnosticInfoDataTable(ds.Tables["DiagnosticInfo"]));
                }
                if ((ds.Tables["ProcessInfo"] != null)) {
                    base.Tables.Add(new ProcessInfoDataTable(ds.Tables["ProcessInfo"]));
                }
                if ((ds.Tables["StartInfo"] != null)) {
                    base.Tables.Add(new StartInfoDataTable(ds.Tables["StartInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInnerExceptions = ((InnerExceptionsDataTable)(base.Tables["InnerExceptions"]));
            if ((initTable == true)) {
                if ((this.tableInnerExceptions != null)) {
                    this.tableInnerExceptions.InitVars();
                }
            }
            this.tableLogTypes = ((LogTypesDataTable)(base.Tables["LogTypes"]));
            if ((initTable == true)) {
                if ((this.tableLogTypes != null)) {
                    this.tableLogTypes.InitVars();
                }
            }
            this.tableExtendedProps = ((ExtendedPropsDataTable)(base.Tables["ExtendedProps"]));
            if ((initTable == true)) {
                if ((this.tableExtendedProps != null)) {
                    this.tableExtendedProps.InitVars();
                }
            }
            this.tableException = ((ExceptionDataTable)(base.Tables["Exception"]));
            if ((initTable == true)) {
                if ((this.tableException != null)) {
                    this.tableException.InitVars();
                }
            }
            this.tableLogEntry = ((LogEntryDataTable)(base.Tables["LogEntry"]));
            if ((initTable == true)) {
                if ((this.tableLogEntry != null)) {
                    this.tableLogEntry.InitVars();
                }
            }
            this.tableExceptionData = ((ExceptionDataDataTable)(base.Tables["ExceptionData"]));
            if ((initTable == true)) {
                if ((this.tableExceptionData != null)) {
                    this.tableExceptionData.InitVars();
                }
            }
            this.tableEnvironmentVariables = ((EnvironmentVariablesDataTable)(base.Tables["EnvironmentVariables"]));
            if ((initTable == true)) {
                if ((this.tableEnvironmentVariables != null)) {
                    this.tableEnvironmentVariables.InitVars();
                }
            }
            this.tableVerbs = ((VerbsDataTable)(base.Tables["Verbs"]));
            if ((initTable == true)) {
                if ((this.tableVerbs != null)) {
                    this.tableVerbs.InitVars();
                }
            }
            this.tableHostEnvironment = ((HostEnvironmentDataTable)(base.Tables["HostEnvironment"]));
            if ((initTable == true)) {
                if ((this.tableHostEnvironment != null)) {
                    this.tableHostEnvironment.InitVars();
                }
            }
            this.tableReflectionTargetSite = ((ReflectionTargetSiteDataTable)(base.Tables["ReflectionTargetSite"]));
            if ((initTable == true)) {
                if ((this.tableReflectionTargetSite != null)) {
                    this.tableReflectionTargetSite.InitVars();
                }
            }
            this.tableReflectionFields = ((ReflectionFieldsDataTable)(base.Tables["ReflectionFields"]));
            if ((initTable == true)) {
                if ((this.tableReflectionFields != null)) {
                    this.tableReflectionFields.InitVars();
                }
            }
            this.tableReflectionGenericArguments = ((ReflectionGenericArgumentsDataTable)(base.Tables["ReflectionGenericArguments"]));
            if ((initTable == true)) {
                if ((this.tableReflectionGenericArguments != null)) {
                    this.tableReflectionGenericArguments.InitVars();
                }
            }
            this.tableReflectionProperties = ((ReflectionPropertiesDataTable)(base.Tables["ReflectionProperties"]));
            if ((initTable == true)) {
                if ((this.tableReflectionProperties != null)) {
                    this.tableReflectionProperties.InitVars();
                }
            }
            this.tableDiagnosticInfo = ((DiagnosticInfoDataTable)(base.Tables["DiagnosticInfo"]));
            if ((initTable == true)) {
                if ((this.tableDiagnosticInfo != null)) {
                    this.tableDiagnosticInfo.InitVars();
                }
            }
            this.tableProcessInfo = ((ProcessInfoDataTable)(base.Tables["ProcessInfo"]));
            if ((initTable == true)) {
                if ((this.tableProcessInfo != null)) {
                    this.tableProcessInfo.InitVars();
                }
            }
            this.tableStartInfo = ((StartInfoDataTable)(base.Tables["StartInfo"]));
            if ((initTable == true)) {
                if ((this.tableStartInfo != null)) {
                    this.tableStartInfo.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "XYZ_EntLib_DB_DS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XYZ_EntLib_DB_DS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInnerExceptions = new InnerExceptionsDataTable();
            base.Tables.Add(this.tableInnerExceptions);
            this.tableLogTypes = new LogTypesDataTable();
            base.Tables.Add(this.tableLogTypes);
            this.tableExtendedProps = new ExtendedPropsDataTable();
            base.Tables.Add(this.tableExtendedProps);
            this.tableException = new ExceptionDataTable();
            base.Tables.Add(this.tableException);
            this.tableLogEntry = new LogEntryDataTable();
            base.Tables.Add(this.tableLogEntry);
            this.tableExceptionData = new ExceptionDataDataTable();
            base.Tables.Add(this.tableExceptionData);
            this.tableEnvironmentVariables = new EnvironmentVariablesDataTable();
            base.Tables.Add(this.tableEnvironmentVariables);
            this.tableVerbs = new VerbsDataTable();
            base.Tables.Add(this.tableVerbs);
            this.tableHostEnvironment = new HostEnvironmentDataTable();
            base.Tables.Add(this.tableHostEnvironment);
            this.tableReflectionTargetSite = new ReflectionTargetSiteDataTable();
            base.Tables.Add(this.tableReflectionTargetSite);
            this.tableReflectionFields = new ReflectionFieldsDataTable();
            base.Tables.Add(this.tableReflectionFields);
            this.tableReflectionGenericArguments = new ReflectionGenericArgumentsDataTable();
            base.Tables.Add(this.tableReflectionGenericArguments);
            this.tableReflectionProperties = new ReflectionPropertiesDataTable();
            base.Tables.Add(this.tableReflectionProperties);
            this.tableDiagnosticInfo = new DiagnosticInfoDataTable();
            base.Tables.Add(this.tableDiagnosticInfo);
            this.tableProcessInfo = new ProcessInfoDataTable();
            base.Tables.Add(this.tableProcessInfo);
            this.tableStartInfo = new StartInfoDataTable();
            base.Tables.Add(this.tableStartInfo);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInnerExceptions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtendedProps() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeException() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExceptionData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnvironmentVariables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerbs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHostEnvironment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReflectionTargetSite() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReflectionFields() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReflectionGenericArguments() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReflectionProperties() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiagnosticInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcessInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStartInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void InnerExceptionsRowChangeEventHandler(object sender, InnerExceptionsRowChangeEvent e);
        
        public delegate void LogTypesRowChangeEventHandler(object sender, LogTypesRowChangeEvent e);
        
        public delegate void ExtendedPropsRowChangeEventHandler(object sender, ExtendedPropsRowChangeEvent e);
        
        public delegate void ExceptionRowChangeEventHandler(object sender, ExceptionRowChangeEvent e);
        
        public delegate void LogEntryRowChangeEventHandler(object sender, LogEntryRowChangeEvent e);
        
        public delegate void ExceptionDataRowChangeEventHandler(object sender, ExceptionDataRowChangeEvent e);
        
        public delegate void EnvironmentVariablesRowChangeEventHandler(object sender, EnvironmentVariablesRowChangeEvent e);
        
        public delegate void VerbsRowChangeEventHandler(object sender, VerbsRowChangeEvent e);
        
        public delegate void HostEnvironmentRowChangeEventHandler(object sender, HostEnvironmentRowChangeEvent e);
        
        public delegate void ReflectionTargetSiteRowChangeEventHandler(object sender, ReflectionTargetSiteRowChangeEvent e);
        
        public delegate void ReflectionFieldsRowChangeEventHandler(object sender, ReflectionFieldsRowChangeEvent e);
        
        public delegate void ReflectionGenericArgumentsRowChangeEventHandler(object sender, ReflectionGenericArgumentsRowChangeEvent e);
        
        public delegate void ReflectionPropertiesRowChangeEventHandler(object sender, ReflectionPropertiesRowChangeEvent e);
        
        public delegate void DiagnosticInfoRowChangeEventHandler(object sender, DiagnosticInfoRowChangeEvent e);
        
        public delegate void ProcessInfoRowChangeEventHandler(object sender, ProcessInfoRowChangeEvent e);
        
        public delegate void StartInfoRowChangeEventHandler(object sender, StartInfoRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InnerExceptionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnexceptionId;
            
            private System.Data.DataColumn columninnerExceptionId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsDataTable() {
                this.TableName = "InnerExceptions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InnerExceptionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InnerExceptionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionIdColumn {
                get {
                    return this.columnexceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn innerExceptionIdColumn {
                get {
                    return this.columninnerExceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow this[int index] {
                get {
                    return ((InnerExceptionsRow)(this.Rows[index]));
                }
            }
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowChanging;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowChanged;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowDeleting;
            
            public event InnerExceptionsRowChangeEventHandler InnerExceptionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInnerExceptionsRow(InnerExceptionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow AddInnerExceptionsRow(System.Guid exceptionId, System.Guid innerExceptionId) {
                InnerExceptionsRow rowInnerExceptionsRow = ((InnerExceptionsRow)(this.NewRow()));
                rowInnerExceptionsRow.ItemArray = new object[] {
                        exceptionId,
                        innerExceptionId};
                this.Rows.Add(rowInnerExceptionsRow);
                return rowInnerExceptionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InnerExceptionsDataTable cln = ((InnerExceptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InnerExceptionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexceptionId = base.Columns["exceptionId"];
                this.columninnerExceptionId = base.Columns["innerExceptionId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexceptionId = new System.Data.DataColumn("exceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionId);
                this.columninnerExceptionId = new System.Data.DataColumn("innerExceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninnerExceptionId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow NewInnerExceptionsRow() {
                return ((InnerExceptionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InnerExceptionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InnerExceptionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InnerExceptionsRowChanged != null)) {
                    this.InnerExceptionsRowChanged(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InnerExceptionsRowChanging != null)) {
                    this.InnerExceptionsRowChanging(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InnerExceptionsRowDeleted != null)) {
                    this.InnerExceptionsRowDeleted(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InnerExceptionsRowDeleting != null)) {
                    this.InnerExceptionsRowDeleting(this, new InnerExceptionsRowChangeEvent(((InnerExceptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInnerExceptionsRow(InnerExceptionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InnerExceptionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogTypeId;
            
            private System.Data.DataColumn columnlogType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesDataTable() {
                this.TableName = "LogTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logTypeIdColumn {
                get {
                    return this.columnlogTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logTypeColumn {
                get {
                    return this.columnlogType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesRow this[int index] {
                get {
                    return ((LogTypesRow)(this.Rows[index]));
                }
            }
            
            public event LogTypesRowChangeEventHandler LogTypesRowChanging;
            
            public event LogTypesRowChangeEventHandler LogTypesRowChanged;
            
            public event LogTypesRowChangeEventHandler LogTypesRowDeleting;
            
            public event LogTypesRowChangeEventHandler LogTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogTypesRow(LogTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesRow AddLogTypesRow(string logType) {
                LogTypesRow rowLogTypesRow = ((LogTypesRow)(this.NewRow()));
                rowLogTypesRow.ItemArray = new object[] {
                        null,
                        logType};
                this.Rows.Add(rowLogTypesRow);
                return rowLogTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LogTypesDataTable cln = ((LogTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LogTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogTypeId = base.Columns["logTypeId"];
                this.columnlogType = base.Columns["logType"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogTypeId = new System.Data.DataColumn("logTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogTypeId);
                this.columnlogType = new System.Data.DataColumn("logType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogType);
                this.columnlogTypeId.AutoIncrement = true;
                this.columnlogTypeId.AllowDBNull = false;
                this.columnlogTypeId.ReadOnly = true;
                this.columnlogType.AllowDBNull = false;
                this.columnlogType.MaxLength = 64;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesRow NewLogTypesRow() {
                return ((LogTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LogTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LogTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogTypesRowChanged != null)) {
                    this.LogTypesRowChanged(this, new LogTypesRowChangeEvent(((LogTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogTypesRowChanging != null)) {
                    this.LogTypesRowChanging(this, new LogTypesRowChangeEvent(((LogTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogTypesRowDeleted != null)) {
                    this.LogTypesRowDeleted(this, new LogTypesRowChangeEvent(((LogTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogTypesRowDeleting != null)) {
                    this.LogTypesRowDeleting(this, new LogTypesRowChangeEvent(((LogTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogTypesRow(LogTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtendedPropsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnpropertyKey;
            
            private System.Data.DataColumn columnpropertyValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsDataTable() {
                this.TableName = "ExtendedProps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtendedPropsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtendedPropsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyKeyColumn {
                get {
                    return this.columnpropertyKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyValueColumn {
                get {
                    return this.columnpropertyValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow this[int index] {
                get {
                    return ((ExtendedPropsRow)(this.Rows[index]));
                }
            }
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowChanging;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowChanged;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowDeleting;
            
            public event ExtendedPropsRowChangeEventHandler ExtendedPropsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtendedPropsRow(ExtendedPropsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow AddExtendedPropsRow(System.Guid logEntryId, string propertyKey, string propertyValue) {
                ExtendedPropsRow rowExtendedPropsRow = ((ExtendedPropsRow)(this.NewRow()));
                rowExtendedPropsRow.ItemArray = new object[] {
                        logEntryId,
                        propertyKey,
                        propertyValue};
                this.Rows.Add(rowExtendedPropsRow);
                return rowExtendedPropsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtendedPropsDataTable cln = ((ExtendedPropsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtendedPropsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnpropertyKey = base.Columns["propertyKey"];
                this.columnpropertyValue = base.Columns["propertyValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnpropertyKey = new System.Data.DataColumn("propertyKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyKey);
                this.columnpropertyValue = new System.Data.DataColumn("propertyValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyValue);
                this.columnpropertyKey.MaxLength = 256;
                this.columnpropertyValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow NewExtendedPropsRow() {
                return ((ExtendedPropsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtendedPropsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtendedPropsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtendedPropsRowChanged != null)) {
                    this.ExtendedPropsRowChanged(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtendedPropsRowChanging != null)) {
                    this.ExtendedPropsRowChanging(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtendedPropsRowDeleted != null)) {
                    this.ExtendedPropsRowDeleted(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtendedPropsRowDeleting != null)) {
                    this.ExtendedPropsRowDeleting(this, new ExtendedPropsRowChangeEvent(((ExtendedPropsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtendedPropsRow(ExtendedPropsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtendedPropsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columndateTime;
            
            private System.Data.DataColumn columnexceptionType;
            
            private System.Data.DataColumn columnexceptionMessage;
            
            private System.Data.DataColumn columnsource;
            
            private System.Data.DataColumn columnhelpLink;
            
            private System.Data.DataColumn columnexceptionDataId;
            
            private System.Data.DataColumn columnstackTrace;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataTable() {
                this.TableName = "Exception";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateTimeColumn {
                get {
                    return this.columndateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionTypeColumn {
                get {
                    return this.columnexceptionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionMessageColumn {
                get {
                    return this.columnexceptionMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn helpLinkColumn {
                get {
                    return this.columnhelpLink;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionDataIdColumn {
                get {
                    return this.columnexceptionDataId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stackTraceColumn {
                get {
                    return this.columnstackTrace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow this[int index] {
                get {
                    return ((ExceptionRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionRowChangeEventHandler ExceptionRowChanging;
            
            public event ExceptionRowChangeEventHandler ExceptionRowChanged;
            
            public event ExceptionRowChangeEventHandler ExceptionRowDeleting;
            
            public event ExceptionRowChangeEventHandler ExceptionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionRow(ExceptionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow AddExceptionRow(System.Guid id, System.Guid logEntryId, string description, System.DateTime dateTime, string exceptionType, string exceptionMessage, string source, string helpLink, System.Guid exceptionDataId, string stackTrace) {
                ExceptionRow rowExceptionRow = ((ExceptionRow)(this.NewRow()));
                rowExceptionRow.ItemArray = new object[] {
                        id,
                        logEntryId,
                        description,
                        dateTime,
                        exceptionType,
                        exceptionMessage,
                        source,
                        helpLink,
                        exceptionDataId,
                        stackTrace};
                this.Rows.Add(rowExceptionRow);
                return rowExceptionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow FindByid(System.Guid id) {
                return ((ExceptionRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionDataTable cln = ((ExceptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columndescription = base.Columns["description"];
                this.columndateTime = base.Columns["dateTime"];
                this.columnexceptionType = base.Columns["exceptionType"];
                this.columnexceptionMessage = base.Columns["exceptionMessage"];
                this.columnsource = base.Columns["source"];
                this.columnhelpLink = base.Columns["helpLink"];
                this.columnexceptionDataId = base.Columns["exceptionDataId"];
                this.columnstackTrace = base.Columns["stackTrace"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columndateTime = new System.Data.DataColumn("dateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndateTime);
                this.columnexceptionType = new System.Data.DataColumn("exceptionType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionType);
                this.columnexceptionMessage = new System.Data.DataColumn("exceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionMessage);
                this.columnsource = new System.Data.DataColumn("source", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnhelpLink = new System.Data.DataColumn("helpLink", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelpLink);
                this.columnexceptionDataId = new System.Data.DataColumn("exceptionDataId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionDataId);
                this.columnstackTrace = new System.Data.DataColumn("stackTrace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstackTrace);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columndescription.MaxLength = 256;
                this.columnexceptionType.MaxLength = 256;
                this.columnexceptionMessage.MaxLength = 256;
                this.columnsource.MaxLength = 256;
                this.columnhelpLink.MaxLength = 256;
                this.columnstackTrace.MaxLength = 1024;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow NewExceptionRow() {
                return ((ExceptionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionRowChanged != null)) {
                    this.ExceptionRowChanged(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionRowChanging != null)) {
                    this.ExceptionRowChanging(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionRowDeleted != null)) {
                    this.ExceptionRowDeleted(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionRowDeleting != null)) {
                    this.ExceptionRowDeleting(this, new ExceptionRowChangeEvent(((ExceptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionRow(ExceptionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogEntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnsiteCode;
            
            private System.Data.DataColumn columnissueTag;
            
            private System.Data.DataColumn columnactivityId;
            
            private System.Data.DataColumn columnappDomainName;
            
            private System.Data.DataColumn columnerrorMessages;
            
            private System.Data.DataColumn columneventId;
            
            private System.Data.DataColumn columnloggedSeverity;
            
            private System.Data.DataColumn columnmachineName;
            
            private System.Data.DataColumn columnmanagedThreadName;
            
            private System.Data.DataColumn columnpriority;
            
            private System.Data.DataColumn columnprocessId;
            
            private System.Data.DataColumn columnprocessName;
            
            private System.Data.DataColumn columnseverity;
            
            private System.Data.DataColumn columntimeStamp;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columnwin32ThreadId;
            
            private System.Data.DataColumn columncategoriesId;
            
            private System.Data.DataColumn columnlogTypeId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryDataTable() {
                this.TableName = "LogEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogEntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogEntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn siteCodeColumn {
                get {
                    return this.columnsiteCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn issueTagColumn {
                get {
                    return this.columnissueTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn activityIdColumn {
                get {
                    return this.columnactivityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn appDomainNameColumn {
                get {
                    return this.columnappDomainName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn errorMessagesColumn {
                get {
                    return this.columnerrorMessages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn eventIdColumn {
                get {
                    return this.columneventId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loggedSeverityColumn {
                get {
                    return this.columnloggedSeverity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn machineNameColumn {
                get {
                    return this.columnmachineName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn managedThreadNameColumn {
                get {
                    return this.columnmanagedThreadName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn priorityColumn {
                get {
                    return this.columnpriority;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processIdColumn {
                get {
                    return this.columnprocessId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processNameColumn {
                get {
                    return this.columnprocessName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn severityColumn {
                get {
                    return this.columnseverity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeStampColumn {
                get {
                    return this.columntimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn win32ThreadIdColumn {
                get {
                    return this.columnwin32ThreadId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn categoriesIdColumn {
                get {
                    return this.columncategoriesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logTypeIdColumn {
                get {
                    return this.columnlogTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow this[int index] {
                get {
                    return ((LogEntryRow)(this.Rows[index]));
                }
            }
            
            public event LogEntryRowChangeEventHandler LogEntryRowChanging;
            
            public event LogEntryRowChangeEventHandler LogEntryRowChanged;
            
            public event LogEntryRowChangeEventHandler LogEntryRowDeleting;
            
            public event LogEntryRowChangeEventHandler LogEntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogEntryRow(LogEntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow AddLogEntryRow(
                        System.Guid id, 
                        string siteCode, 
                        System.Guid issueTag, 
                        System.Guid activityId, 
                        string appDomainName, 
                        string errorMessages, 
                        int eventId, 
                        string loggedSeverity, 
                        string machineName, 
                        string managedThreadName, 
                        int priority, 
                        int processId, 
                        string processName, 
                        string severity, 
                        System.DateTime timeStamp, 
                        string title, 
                        int win32ThreadId, 
                        string categoriesId, 
                        int logTypeId) {
                LogEntryRow rowLogEntryRow = ((LogEntryRow)(this.NewRow()));
                rowLogEntryRow.ItemArray = new object[] {
                        id,
                        siteCode,
                        issueTag,
                        activityId,
                        appDomainName,
                        errorMessages,
                        eventId,
                        loggedSeverity,
                        machineName,
                        managedThreadName,
                        priority,
                        processId,
                        processName,
                        severity,
                        timeStamp,
                        title,
                        win32ThreadId,
                        categoriesId,
                        logTypeId};
                this.Rows.Add(rowLogEntryRow);
                return rowLogEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LogEntryDataTable cln = ((LogEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LogEntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsiteCode = base.Columns["siteCode"];
                this.columnissueTag = base.Columns["issueTag"];
                this.columnactivityId = base.Columns["activityId"];
                this.columnappDomainName = base.Columns["appDomainName"];
                this.columnerrorMessages = base.Columns["errorMessages"];
                this.columneventId = base.Columns["eventId"];
                this.columnloggedSeverity = base.Columns["loggedSeverity"];
                this.columnmachineName = base.Columns["machineName"];
                this.columnmanagedThreadName = base.Columns["managedThreadName"];
                this.columnpriority = base.Columns["priority"];
                this.columnprocessId = base.Columns["processId"];
                this.columnprocessName = base.Columns["processName"];
                this.columnseverity = base.Columns["severity"];
                this.columntimeStamp = base.Columns["timeStamp"];
                this.columntitle = base.Columns["title"];
                this.columnwin32ThreadId = base.Columns["win32ThreadId"];
                this.columncategoriesId = base.Columns["categoriesId"];
                this.columnlogTypeId = base.Columns["logTypeId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsiteCode = new System.Data.DataColumn("siteCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsiteCode);
                this.columnissueTag = new System.Data.DataColumn("issueTag", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnissueTag);
                this.columnactivityId = new System.Data.DataColumn("activityId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactivityId);
                this.columnappDomainName = new System.Data.DataColumn("appDomainName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnappDomainName);
                this.columnerrorMessages = new System.Data.DataColumn("errorMessages", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnerrorMessages);
                this.columneventId = new System.Data.DataColumn("eventId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columneventId);
                this.columnloggedSeverity = new System.Data.DataColumn("loggedSeverity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnloggedSeverity);
                this.columnmachineName = new System.Data.DataColumn("machineName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmachineName);
                this.columnmanagedThreadName = new System.Data.DataColumn("managedThreadName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagedThreadName);
                this.columnpriority = new System.Data.DataColumn("priority", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriority);
                this.columnprocessId = new System.Data.DataColumn("processId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessId);
                this.columnprocessName = new System.Data.DataColumn("processName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessName);
                this.columnseverity = new System.Data.DataColumn("severity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnseverity);
                this.columntimeStamp = new System.Data.DataColumn("timeStamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntimeStamp);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnwin32ThreadId = new System.Data.DataColumn("win32ThreadId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwin32ThreadId);
                this.columncategoriesId = new System.Data.DataColumn("categoriesId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncategoriesId);
                this.columnlogTypeId = new System.Data.DataColumn("logTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogTypeId);
                this.columnsiteCode.MaxLength = 256;
                this.columnappDomainName.MaxLength = 256;
                this.columnerrorMessages.MaxLength = 2147483647;
                this.columnloggedSeverity.MaxLength = 64;
                this.columnmachineName.MaxLength = 64;
                this.columnmanagedThreadName.MaxLength = 256;
                this.columnprocessName.MaxLength = 256;
                this.columnseverity.MaxLength = 64;
                this.columntitle.MaxLength = 256;
                this.columncategoriesId.MaxLength = 512;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow NewLogEntryRow() {
                return ((LogEntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LogEntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LogEntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogEntryRowChanged != null)) {
                    this.LogEntryRowChanged(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogEntryRowChanging != null)) {
                    this.LogEntryRowChanging(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogEntryRowDeleted != null)) {
                    this.LogEntryRowDeleted(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogEntryRowDeleting != null)) {
                    this.LogEntryRowDeleting(this, new LogEntryRowChangeEvent(((LogEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogEntryRow(LogEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExceptionDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnexceptionId;
            
            private System.Data.DataColumn columndataKey;
            
            private System.Data.DataColumn columndataValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataDataTable() {
                this.TableName = "ExceptionData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExceptionDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn exceptionIdColumn {
                get {
                    return this.columnexceptionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dataKeyColumn {
                get {
                    return this.columndataKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dataValueColumn {
                get {
                    return this.columndataValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow this[int index] {
                get {
                    return ((ExceptionDataRow)(this.Rows[index]));
                }
            }
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowChanging;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowChanged;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowDeleting;
            
            public event ExceptionDataRowChangeEventHandler ExceptionDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExceptionDataRow(ExceptionDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow AddExceptionDataRow(System.Guid exceptionId, string dataKey, string dataValue) {
                ExceptionDataRow rowExceptionDataRow = ((ExceptionDataRow)(this.NewRow()));
                rowExceptionDataRow.ItemArray = new object[] {
                        exceptionId,
                        dataKey,
                        dataValue};
                this.Rows.Add(rowExceptionDataRow);
                return rowExceptionDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExceptionDataDataTable cln = ((ExceptionDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExceptionDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexceptionId = base.Columns["exceptionId"];
                this.columndataKey = base.Columns["dataKey"];
                this.columndataValue = base.Columns["dataValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexceptionId = new System.Data.DataColumn("exceptionId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexceptionId);
                this.columndataKey = new System.Data.DataColumn("dataKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndataKey);
                this.columndataValue = new System.Data.DataColumn("dataValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndataValue);
                this.columndataKey.MaxLength = 256;
                this.columndataValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow NewExceptionDataRow() {
                return ((ExceptionDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExceptionDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExceptionDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExceptionDataRowChanged != null)) {
                    this.ExceptionDataRowChanged(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExceptionDataRowChanging != null)) {
                    this.ExceptionDataRowChanging(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExceptionDataRowDeleted != null)) {
                    this.ExceptionDataRowDeleted(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExceptionDataRowDeleting != null)) {
                    this.ExceptionDataRowDeleting(this, new ExceptionDataRowChangeEvent(((ExceptionDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExceptionDataRow(ExceptionDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExceptionDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnvironmentVariablesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnvariableName;
            
            private System.Data.DataColumn columnvariableValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesDataTable() {
                this.TableName = "EnvironmentVariables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironmentVariablesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnvironmentVariablesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn variableNameColumn {
                get {
                    return this.columnvariableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn variableValueColumn {
                get {
                    return this.columnvariableValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow this[int index] {
                get {
                    return ((EnvironmentVariablesRow)(this.Rows[index]));
                }
            }
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowChanging;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowChanged;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowDeleting;
            
            public event EnvironmentVariablesRowChangeEventHandler EnvironmentVariablesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnvironmentVariablesRow(EnvironmentVariablesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow AddEnvironmentVariablesRow(System.Guid logEntryId, string variableName, string variableValue) {
                EnvironmentVariablesRow rowEnvironmentVariablesRow = ((EnvironmentVariablesRow)(this.NewRow()));
                rowEnvironmentVariablesRow.ItemArray = new object[] {
                        logEntryId,
                        variableName,
                        variableValue};
                this.Rows.Add(rowEnvironmentVariablesRow);
                return rowEnvironmentVariablesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EnvironmentVariablesDataTable cln = ((EnvironmentVariablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EnvironmentVariablesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnvariableName = base.Columns["variableName"];
                this.columnvariableValue = base.Columns["variableValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnvariableName = new System.Data.DataColumn("variableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvariableName);
                this.columnvariableValue = new System.Data.DataColumn("variableValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvariableValue);
                this.columnvariableName.MaxLength = 256;
                this.columnvariableValue.MaxLength = 1024;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow NewEnvironmentVariablesRow() {
                return ((EnvironmentVariablesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EnvironmentVariablesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EnvironmentVariablesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnvironmentVariablesRowChanged != null)) {
                    this.EnvironmentVariablesRowChanged(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnvironmentVariablesRowChanging != null)) {
                    this.EnvironmentVariablesRowChanging(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnvironmentVariablesRowDeleted != null)) {
                    this.EnvironmentVariablesRowDeleted(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnvironmentVariablesRowDeleting != null)) {
                    this.EnvironmentVariablesRowDeleting(this, new EnvironmentVariablesRowChangeEvent(((EnvironmentVariablesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnvironmentVariablesRow(EnvironmentVariablesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnvironmentVariablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerbsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnverb;
            
            private System.Data.DataColumn columnlogEntryId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsDataTable() {
                this.TableName = "Verbs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerbsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerbsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn verbColumn {
                get {
                    return this.columnverb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow this[int index] {
                get {
                    return ((VerbsRow)(this.Rows[index]));
                }
            }
            
            public event VerbsRowChangeEventHandler VerbsRowChanging;
            
            public event VerbsRowChangeEventHandler VerbsRowChanged;
            
            public event VerbsRowChangeEventHandler VerbsRowDeleting;
            
            public event VerbsRowChangeEventHandler VerbsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerbsRow(VerbsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow AddVerbsRow(string verb, System.Guid logEntryId) {
                VerbsRow rowVerbsRow = ((VerbsRow)(this.NewRow()));
                rowVerbsRow.ItemArray = new object[] {
                        verb,
                        logEntryId};
                this.Rows.Add(rowVerbsRow);
                return rowVerbsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerbsDataTable cln = ((VerbsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerbsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnverb = base.Columns["verb"];
                this.columnlogEntryId = base.Columns["logEntryId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnverb = new System.Data.DataColumn("verb", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnverb);
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnverb.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow NewVerbsRow() {
                return ((VerbsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerbsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerbsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerbsRowChanged != null)) {
                    this.VerbsRowChanged(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerbsRowChanging != null)) {
                    this.VerbsRowChanging(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerbsRowDeleted != null)) {
                    this.VerbsRowDeleted(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerbsRowDeleting != null)) {
                    this.VerbsRowDeleting(this, new VerbsRowChangeEvent(((VerbsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerbsRow(VerbsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerbsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HostEnvironmentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnosVersion;
            
            private System.Data.DataColumn columnprocessorCount;
            
            private System.Data.DataColumn columncurrentDirectory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentDataTable() {
                this.TableName = "HostEnvironment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HostEnvironmentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HostEnvironmentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn osVersionColumn {
                get {
                    return this.columnosVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processorCountColumn {
                get {
                    return this.columnprocessorCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn currentDirectoryColumn {
                get {
                    return this.columncurrentDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow this[int index] {
                get {
                    return ((HostEnvironmentRow)(this.Rows[index]));
                }
            }
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowChanging;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowChanged;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowDeleting;
            
            public event HostEnvironmentRowChangeEventHandler HostEnvironmentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHostEnvironmentRow(HostEnvironmentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow AddHostEnvironmentRow(System.Guid logEntryId, string osVersion, short processorCount, string currentDirectory) {
                HostEnvironmentRow rowHostEnvironmentRow = ((HostEnvironmentRow)(this.NewRow()));
                rowHostEnvironmentRow.ItemArray = new object[] {
                        logEntryId,
                        osVersion,
                        processorCount,
                        currentDirectory};
                this.Rows.Add(rowHostEnvironmentRow);
                return rowHostEnvironmentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HostEnvironmentDataTable cln = ((HostEnvironmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HostEnvironmentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnosVersion = base.Columns["osVersion"];
                this.columnprocessorCount = base.Columns["processorCount"];
                this.columncurrentDirectory = base.Columns["currentDirectory"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnosVersion = new System.Data.DataColumn("osVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnosVersion);
                this.columnprocessorCount = new System.Data.DataColumn("processorCount", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessorCount);
                this.columncurrentDirectory = new System.Data.DataColumn("currentDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrentDirectory);
                this.columnosVersion.MaxLength = 256;
                this.columncurrentDirectory.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow NewHostEnvironmentRow() {
                return ((HostEnvironmentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HostEnvironmentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HostEnvironmentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HostEnvironmentRowChanged != null)) {
                    this.HostEnvironmentRowChanged(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HostEnvironmentRowChanging != null)) {
                    this.HostEnvironmentRowChanging(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HostEnvironmentRowDeleted != null)) {
                    this.HostEnvironmentRowDeleted(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HostEnvironmentRowDeleting != null)) {
                    this.HostEnvironmentRowDeleting(this, new HostEnvironmentRowChangeEvent(((HostEnvironmentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHostEnvironmentRow(HostEnvironmentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HostEnvironmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReflectionTargetSiteDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columncallingConvention;
            
            private System.Data.DataColumn columndeclaringType;
            
            private System.Data.DataColumn columnmemberType;
            
            private System.Data.DataColumn columntoken;
            
            private System.Data.DataColumn columndeclaringModule;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteDataTable() {
                this.TableName = "ReflectionTargetSite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionTargetSiteDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReflectionTargetSiteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn callingConventionColumn {
                get {
                    return this.columncallingConvention;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn declaringTypeColumn {
                get {
                    return this.columndeclaringType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn memberTypeColumn {
                get {
                    return this.columnmemberType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn declaringModuleColumn {
                get {
                    return this.columndeclaringModule;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteRow this[int index] {
                get {
                    return ((ReflectionTargetSiteRow)(this.Rows[index]));
                }
            }
            
            public event ReflectionTargetSiteRowChangeEventHandler ReflectionTargetSiteRowChanging;
            
            public event ReflectionTargetSiteRowChangeEventHandler ReflectionTargetSiteRowChanged;
            
            public event ReflectionTargetSiteRowChangeEventHandler ReflectionTargetSiteRowDeleting;
            
            public event ReflectionTargetSiteRowChangeEventHandler ReflectionTargetSiteRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReflectionTargetSiteRow(ReflectionTargetSiteRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteRow AddReflectionTargetSiteRow(System.Guid logEntryId, string name, string callingConvention, string declaringType, string memberType, string token, string declaringModule) {
                ReflectionTargetSiteRow rowReflectionTargetSiteRow = ((ReflectionTargetSiteRow)(this.NewRow()));
                rowReflectionTargetSiteRow.ItemArray = new object[] {
                        logEntryId,
                        name,
                        callingConvention,
                        declaringType,
                        memberType,
                        token,
                        declaringModule};
                this.Rows.Add(rowReflectionTargetSiteRow);
                return rowReflectionTargetSiteRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReflectionTargetSiteDataTable cln = ((ReflectionTargetSiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReflectionTargetSiteDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnname = base.Columns["name"];
                this.columncallingConvention = base.Columns["callingConvention"];
                this.columndeclaringType = base.Columns["declaringType"];
                this.columnmemberType = base.Columns["memberType"];
                this.columntoken = base.Columns["token"];
                this.columndeclaringModule = base.Columns["declaringModule"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columncallingConvention = new System.Data.DataColumn("callingConvention", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncallingConvention);
                this.columndeclaringType = new System.Data.DataColumn("declaringType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeclaringType);
                this.columnmemberType = new System.Data.DataColumn("memberType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemberType);
                this.columntoken = new System.Data.DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntoken);
                this.columndeclaringModule = new System.Data.DataColumn("declaringModule", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndeclaringModule);
                this.columnname.MaxLength = 256;
                this.columncallingConvention.MaxLength = 256;
                this.columndeclaringType.MaxLength = 256;
                this.columnmemberType.MaxLength = 256;
                this.columntoken.MaxLength = 20;
                this.columndeclaringModule.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteRow NewReflectionTargetSiteRow() {
                return ((ReflectionTargetSiteRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReflectionTargetSiteRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReflectionTargetSiteRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReflectionTargetSiteRowChanged != null)) {
                    this.ReflectionTargetSiteRowChanged(this, new ReflectionTargetSiteRowChangeEvent(((ReflectionTargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReflectionTargetSiteRowChanging != null)) {
                    this.ReflectionTargetSiteRowChanging(this, new ReflectionTargetSiteRowChangeEvent(((ReflectionTargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReflectionTargetSiteRowDeleted != null)) {
                    this.ReflectionTargetSiteRowDeleted(this, new ReflectionTargetSiteRowChangeEvent(((ReflectionTargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReflectionTargetSiteRowDeleting != null)) {
                    this.ReflectionTargetSiteRowDeleting(this, new ReflectionTargetSiteRowChangeEvent(((ReflectionTargetSiteRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReflectionTargetSiteRow(ReflectionTargetSiteRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReflectionTargetSiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReflectionFieldsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnfieldName;
            
            private System.Data.DataColumn columnfieldValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsDataTable() {
                this.TableName = "ReflectionFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionFieldsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReflectionFieldsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fieldNameColumn {
                get {
                    return this.columnfieldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fieldValueColumn {
                get {
                    return this.columnfieldValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsRow this[int index] {
                get {
                    return ((ReflectionFieldsRow)(this.Rows[index]));
                }
            }
            
            public event ReflectionFieldsRowChangeEventHandler ReflectionFieldsRowChanging;
            
            public event ReflectionFieldsRowChangeEventHandler ReflectionFieldsRowChanged;
            
            public event ReflectionFieldsRowChangeEventHandler ReflectionFieldsRowDeleting;
            
            public event ReflectionFieldsRowChangeEventHandler ReflectionFieldsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReflectionFieldsRow(ReflectionFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsRow AddReflectionFieldsRow(System.Guid logEntryId, string fieldName, string fieldValue) {
                ReflectionFieldsRow rowReflectionFieldsRow = ((ReflectionFieldsRow)(this.NewRow()));
                rowReflectionFieldsRow.ItemArray = new object[] {
                        logEntryId,
                        fieldName,
                        fieldValue};
                this.Rows.Add(rowReflectionFieldsRow);
                return rowReflectionFieldsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReflectionFieldsDataTable cln = ((ReflectionFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReflectionFieldsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnfieldName = base.Columns["fieldName"];
                this.columnfieldValue = base.Columns["fieldValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnfieldName = new System.Data.DataColumn("fieldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldName);
                this.columnfieldValue = new System.Data.DataColumn("fieldValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldValue);
                this.columnfieldName.MaxLength = 256;
                this.columnfieldValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsRow NewReflectionFieldsRow() {
                return ((ReflectionFieldsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReflectionFieldsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReflectionFieldsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReflectionFieldsRowChanged != null)) {
                    this.ReflectionFieldsRowChanged(this, new ReflectionFieldsRowChangeEvent(((ReflectionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReflectionFieldsRowChanging != null)) {
                    this.ReflectionFieldsRowChanging(this, new ReflectionFieldsRowChangeEvent(((ReflectionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReflectionFieldsRowDeleted != null)) {
                    this.ReflectionFieldsRowDeleted(this, new ReflectionFieldsRowChangeEvent(((ReflectionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReflectionFieldsRowDeleting != null)) {
                    this.ReflectionFieldsRowDeleting(this, new ReflectionFieldsRowChangeEvent(((ReflectionFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReflectionFieldsRow(ReflectionFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReflectionFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReflectionGenericArgumentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columntype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsDataTable() {
                this.TableName = "ReflectionGenericArguments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionGenericArgumentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReflectionGenericArgumentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsRow this[int index] {
                get {
                    return ((ReflectionGenericArgumentsRow)(this.Rows[index]));
                }
            }
            
            public event ReflectionGenericArgumentsRowChangeEventHandler ReflectionGenericArgumentsRowChanging;
            
            public event ReflectionGenericArgumentsRowChangeEventHandler ReflectionGenericArgumentsRowChanged;
            
            public event ReflectionGenericArgumentsRowChangeEventHandler ReflectionGenericArgumentsRowDeleting;
            
            public event ReflectionGenericArgumentsRowChangeEventHandler ReflectionGenericArgumentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReflectionGenericArgumentsRow(ReflectionGenericArgumentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsRow AddReflectionGenericArgumentsRow(System.Guid logEntryId, System.Guid id, string type) {
                ReflectionGenericArgumentsRow rowReflectionGenericArgumentsRow = ((ReflectionGenericArgumentsRow)(this.NewRow()));
                rowReflectionGenericArgumentsRow.ItemArray = new object[] {
                        logEntryId,
                        id,
                        type};
                this.Rows.Add(rowReflectionGenericArgumentsRow);
                return rowReflectionGenericArgumentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReflectionGenericArgumentsDataTable cln = ((ReflectionGenericArgumentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReflectionGenericArgumentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnid = base.Columns["id"];
                this.columntype = base.Columns["type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnid = new System.Data.DataColumn("id", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columntype.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsRow NewReflectionGenericArgumentsRow() {
                return ((ReflectionGenericArgumentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReflectionGenericArgumentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReflectionGenericArgumentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReflectionGenericArgumentsRowChanged != null)) {
                    this.ReflectionGenericArgumentsRowChanged(this, new ReflectionGenericArgumentsRowChangeEvent(((ReflectionGenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReflectionGenericArgumentsRowChanging != null)) {
                    this.ReflectionGenericArgumentsRowChanging(this, new ReflectionGenericArgumentsRowChangeEvent(((ReflectionGenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReflectionGenericArgumentsRowDeleted != null)) {
                    this.ReflectionGenericArgumentsRowDeleted(this, new ReflectionGenericArgumentsRowChangeEvent(((ReflectionGenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReflectionGenericArgumentsRowDeleting != null)) {
                    this.ReflectionGenericArgumentsRowDeleting(this, new ReflectionGenericArgumentsRowChangeEvent(((ReflectionGenericArgumentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReflectionGenericArgumentsRow(ReflectionGenericArgumentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReflectionGenericArgumentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReflectionPropertiesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnpropertyName;
            
            private System.Data.DataColumn columnpropertyValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesDataTable() {
                this.TableName = "ReflectionProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionPropertiesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReflectionPropertiesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyNameColumn {
                get {
                    return this.columnpropertyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn propertyValueColumn {
                get {
                    return this.columnpropertyValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesRow this[int index] {
                get {
                    return ((ReflectionPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event ReflectionPropertiesRowChangeEventHandler ReflectionPropertiesRowChanging;
            
            public event ReflectionPropertiesRowChangeEventHandler ReflectionPropertiesRowChanged;
            
            public event ReflectionPropertiesRowChangeEventHandler ReflectionPropertiesRowDeleting;
            
            public event ReflectionPropertiesRowChangeEventHandler ReflectionPropertiesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReflectionPropertiesRow(ReflectionPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesRow AddReflectionPropertiesRow(System.Guid logEntryId, string propertyName, string propertyValue) {
                ReflectionPropertiesRow rowReflectionPropertiesRow = ((ReflectionPropertiesRow)(this.NewRow()));
                rowReflectionPropertiesRow.ItemArray = new object[] {
                        logEntryId,
                        propertyName,
                        propertyValue};
                this.Rows.Add(rowReflectionPropertiesRow);
                return rowReflectionPropertiesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReflectionPropertiesDataTable cln = ((ReflectionPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReflectionPropertiesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnpropertyName = base.Columns["propertyName"];
                this.columnpropertyValue = base.Columns["propertyValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnpropertyName = new System.Data.DataColumn("propertyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyName);
                this.columnpropertyValue = new System.Data.DataColumn("propertyValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpropertyValue);
                this.columnpropertyName.MaxLength = 256;
                this.columnpropertyValue.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesRow NewReflectionPropertiesRow() {
                return ((ReflectionPropertiesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReflectionPropertiesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReflectionPropertiesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReflectionPropertiesRowChanged != null)) {
                    this.ReflectionPropertiesRowChanged(this, new ReflectionPropertiesRowChangeEvent(((ReflectionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReflectionPropertiesRowChanging != null)) {
                    this.ReflectionPropertiesRowChanging(this, new ReflectionPropertiesRowChangeEvent(((ReflectionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReflectionPropertiesRowDeleted != null)) {
                    this.ReflectionPropertiesRowDeleted(this, new ReflectionPropertiesRowChangeEvent(((ReflectionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReflectionPropertiesRowDeleting != null)) {
                    this.ReflectionPropertiesRowDeleting(this, new ReflectionPropertiesRowChangeEvent(((ReflectionPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReflectionPropertiesRow(ReflectionPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReflectionPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiagnosticInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnclrVersion;
            
            private System.Data.DataColumn columnexecutingAssemblyName;
            
            private System.Data.DataColumn columnversionFileName;
            
            private System.Data.DataColumn columnversionFileDescription;
            
            private System.Data.DataColumn columnversionFileVersion;
            
            private System.Data.DataColumn columnversionProductName;
            
            private System.Data.DataColumn columnversionProductVersion;
            
            private System.Data.DataColumn columnversionCompanyName;
            
            private System.Data.DataColumn columnversionComments;
            
            private System.Data.DataColumn columnversionInternalName;
            
            private System.Data.DataColumn columnversionIsDebug;
            
            private System.Data.DataColumn columnversionIsPatched;
            
            private System.Data.DataColumn columnversionLanguage;
            
            private System.Data.DataColumn columnversionLegalCopyright;
            
            private System.Data.DataColumn columnversionLegalTrademarks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoDataTable() {
                this.TableName = "DiagnosticInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagnosticInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiagnosticInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn clrVersionColumn {
                get {
                    return this.columnclrVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn executingAssemblyNameColumn {
                get {
                    return this.columnexecutingAssemblyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileNameColumn {
                get {
                    return this.columnversionFileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileDescriptionColumn {
                get {
                    return this.columnversionFileDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionFileVersionColumn {
                get {
                    return this.columnversionFileVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionProductNameColumn {
                get {
                    return this.columnversionProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionProductVersionColumn {
                get {
                    return this.columnversionProductVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionCompanyNameColumn {
                get {
                    return this.columnversionCompanyName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionCommentsColumn {
                get {
                    return this.columnversionComments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionInternalNameColumn {
                get {
                    return this.columnversionInternalName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionIsDebugColumn {
                get {
                    return this.columnversionIsDebug;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionIsPatchedColumn {
                get {
                    return this.columnversionIsPatched;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLanguageColumn {
                get {
                    return this.columnversionLanguage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLegalCopyrightColumn {
                get {
                    return this.columnversionLegalCopyright;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn versionLegalTrademarksColumn {
                get {
                    return this.columnversionLegalTrademarks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow this[int index] {
                get {
                    return ((DiagnosticInfoRow)(this.Rows[index]));
                }
            }
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowChanging;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowChanged;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowDeleting;
            
            public event DiagnosticInfoRowChangeEventHandler DiagnosticInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiagnosticInfoRow(DiagnosticInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow AddDiagnosticInfoRow(
                        System.Guid logEntryId, 
                        string clrVersion, 
                        string executingAssemblyName, 
                        string versionFileName, 
                        string versionFileDescription, 
                        string versionFileVersion, 
                        string versionProductName, 
                        string versionProductVersion, 
                        string versionCompanyName, 
                        string versionComments, 
                        string versionInternalName, 
                        bool versionIsDebug, 
                        bool versionIsPatched, 
                        string versionLanguage, 
                        string versionLegalCopyright, 
                        string versionLegalTrademarks) {
                DiagnosticInfoRow rowDiagnosticInfoRow = ((DiagnosticInfoRow)(this.NewRow()));
                rowDiagnosticInfoRow.ItemArray = new object[] {
                        logEntryId,
                        clrVersion,
                        executingAssemblyName,
                        versionFileName,
                        versionFileDescription,
                        versionFileVersion,
                        versionProductName,
                        versionProductVersion,
                        versionCompanyName,
                        versionComments,
                        versionInternalName,
                        versionIsDebug,
                        versionIsPatched,
                        versionLanguage,
                        versionLegalCopyright,
                        versionLegalTrademarks};
                this.Rows.Add(rowDiagnosticInfoRow);
                return rowDiagnosticInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DiagnosticInfoDataTable cln = ((DiagnosticInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DiagnosticInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnclrVersion = base.Columns["clrVersion"];
                this.columnexecutingAssemblyName = base.Columns["executingAssemblyName"];
                this.columnversionFileName = base.Columns["versionFileName"];
                this.columnversionFileDescription = base.Columns["versionFileDescription"];
                this.columnversionFileVersion = base.Columns["versionFileVersion"];
                this.columnversionProductName = base.Columns["versionProductName"];
                this.columnversionProductVersion = base.Columns["versionProductVersion"];
                this.columnversionCompanyName = base.Columns["versionCompanyName"];
                this.columnversionComments = base.Columns["versionComments"];
                this.columnversionInternalName = base.Columns["versionInternalName"];
                this.columnversionIsDebug = base.Columns["versionIsDebug"];
                this.columnversionIsPatched = base.Columns["versionIsPatched"];
                this.columnversionLanguage = base.Columns["versionLanguage"];
                this.columnversionLegalCopyright = base.Columns["versionLegalCopyright"];
                this.columnversionLegalTrademarks = base.Columns["versionLegalTrademarks"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnclrVersion = new System.Data.DataColumn("clrVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnclrVersion);
                this.columnexecutingAssemblyName = new System.Data.DataColumn("executingAssemblyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecutingAssemblyName);
                this.columnversionFileName = new System.Data.DataColumn("versionFileName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileName);
                this.columnversionFileDescription = new System.Data.DataColumn("versionFileDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileDescription);
                this.columnversionFileVersion = new System.Data.DataColumn("versionFileVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionFileVersion);
                this.columnversionProductName = new System.Data.DataColumn("versionProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionProductName);
                this.columnversionProductVersion = new System.Data.DataColumn("versionProductVersion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionProductVersion);
                this.columnversionCompanyName = new System.Data.DataColumn("versionCompanyName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionCompanyName);
                this.columnversionComments = new System.Data.DataColumn("versionComments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionComments);
                this.columnversionInternalName = new System.Data.DataColumn("versionInternalName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionInternalName);
                this.columnversionIsDebug = new System.Data.DataColumn("versionIsDebug", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionIsDebug);
                this.columnversionIsPatched = new System.Data.DataColumn("versionIsPatched", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionIsPatched);
                this.columnversionLanguage = new System.Data.DataColumn("versionLanguage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLanguage);
                this.columnversionLegalCopyright = new System.Data.DataColumn("versionLegalCopyright", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLegalCopyright);
                this.columnversionLegalTrademarks = new System.Data.DataColumn("versionLegalTrademarks", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnversionLegalTrademarks);
                this.columnclrVersion.MaxLength = 256;
                this.columnexecutingAssemblyName.MaxLength = 256;
                this.columnversionFileName.MaxLength = 256;
                this.columnversionFileDescription.MaxLength = 256;
                this.columnversionFileVersion.MaxLength = 256;
                this.columnversionProductName.MaxLength = 256;
                this.columnversionProductVersion.MaxLength = 64;
                this.columnversionCompanyName.MaxLength = 256;
                this.columnversionComments.MaxLength = 256;
                this.columnversionInternalName.MaxLength = 256;
                this.columnversionLanguage.MaxLength = 256;
                this.columnversionLegalCopyright.MaxLength = 256;
                this.columnversionLegalTrademarks.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow NewDiagnosticInfoRow() {
                return ((DiagnosticInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DiagnosticInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DiagnosticInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiagnosticInfoRowChanged != null)) {
                    this.DiagnosticInfoRowChanged(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiagnosticInfoRowChanging != null)) {
                    this.DiagnosticInfoRowChanging(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiagnosticInfoRowDeleted != null)) {
                    this.DiagnosticInfoRowDeleted(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiagnosticInfoRowDeleting != null)) {
                    this.DiagnosticInfoRowDeleting(this, new DiagnosticInfoRowChangeEvent(((DiagnosticInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiagnosticInfoRow(DiagnosticInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiagnosticInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcessInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnstartTime;
            
            private System.Data.DataColumn columnprocessId;
            
            private System.Data.DataColumn columnterminalServicesSessionId;
            
            private System.Data.DataColumn columnnonPagedSystemMemorySize;
            
            private System.Data.DataColumn columnpagedMemorySize;
            
            private System.Data.DataColumn columnpagedSystemMemory;
            
            private System.Data.DataColumn columnpeakPagedMemorySize;
            
            private System.Data.DataColumn columnpeakVirtualMemorySize;
            
            private System.Data.DataColumn columnpeakWorkingSet;
            
            private System.Data.DataColumn columnprivateMemorySize;
            
            private System.Data.DataColumn columnvirtualMemorySize;
            
            private System.Data.DataColumn columnworkingSet;
            
            private System.Data.DataColumn columntotalProcessorTimeDays;
            
            private System.Data.DataColumn columntotalProcessorTimeHours;
            
            private System.Data.DataColumn columntotalProcessorTimeMinutes;
            
            private System.Data.DataColumn columntotalProcessorTimeSeconds;
            
            private System.Data.DataColumn columntotalProcessorTimeFraction;
            
            private System.Data.DataColumn columnuserProcessorTimeDays;
            
            private System.Data.DataColumn columnuserProcessorTimeHours;
            
            private System.Data.DataColumn columnuserProcessorTimeMinutes;
            
            private System.Data.DataColumn columnuserProcessorTimeSeconds;
            
            private System.Data.DataColumn columnuserProcessorTimeFraction;
            
            private System.Data.DataColumn columnthreadCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoDataTable() {
                this.TableName = "ProcessInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcessInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startTimeColumn {
                get {
                    return this.columnstartTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processIdColumn {
                get {
                    return this.columnprocessId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn terminalServicesSessionIdColumn {
                get {
                    return this.columnterminalServicesSessionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nonPagedSystemMemorySizeColumn {
                get {
                    return this.columnnonPagedSystemMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pagedMemorySizeColumn {
                get {
                    return this.columnpagedMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pagedSystemMemoryColumn {
                get {
                    return this.columnpagedSystemMemory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakPagedMemorySizeColumn {
                get {
                    return this.columnpeakPagedMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakVirtualMemorySizeColumn {
                get {
                    return this.columnpeakVirtualMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn peakWorkingSetColumn {
                get {
                    return this.columnpeakWorkingSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn privateMemorySizeColumn {
                get {
                    return this.columnprivateMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn virtualMemorySizeColumn {
                get {
                    return this.columnvirtualMemorySize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn workingSetColumn {
                get {
                    return this.columnworkingSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeDaysColumn {
                get {
                    return this.columntotalProcessorTimeDays;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeHoursColumn {
                get {
                    return this.columntotalProcessorTimeHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeMinutesColumn {
                get {
                    return this.columntotalProcessorTimeMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeSecondsColumn {
                get {
                    return this.columntotalProcessorTimeSeconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalProcessorTimeFractionColumn {
                get {
                    return this.columntotalProcessorTimeFraction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeDaysColumn {
                get {
                    return this.columnuserProcessorTimeDays;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeHoursColumn {
                get {
                    return this.columnuserProcessorTimeHours;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeMinutesColumn {
                get {
                    return this.columnuserProcessorTimeMinutes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeSecondsColumn {
                get {
                    return this.columnuserProcessorTimeSeconds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userProcessorTimeFractionColumn {
                get {
                    return this.columnuserProcessorTimeFraction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn threadCountColumn {
                get {
                    return this.columnthreadCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow this[int index] {
                get {
                    return ((ProcessInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowChanging;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowChanged;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowDeleting;
            
            public event ProcessInfoRowChangeEventHandler ProcessInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcessInfoRow(ProcessInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow AddProcessInfoRow(
                        System.Guid logEntryId, 
                        System.DateTime startTime, 
                        int processId, 
                        int terminalServicesSessionId, 
                        long nonPagedSystemMemorySize, 
                        long pagedMemorySize, 
                        long pagedSystemMemory, 
                        long peakPagedMemorySize, 
                        long peakVirtualMemorySize, 
                        long peakWorkingSet, 
                        long privateMemorySize, 
                        long virtualMemorySize, 
                        long workingSet, 
                        int totalProcessorTimeDays, 
                        int totalProcessorTimeHours, 
                        int totalProcessorTimeMinutes, 
                        int totalProcessorTimeSeconds, 
                        int totalProcessorTimeFraction, 
                        int userProcessorTimeDays, 
                        int userProcessorTimeHours, 
                        int userProcessorTimeMinutes, 
                        int userProcessorTimeSeconds, 
                        int userProcessorTimeFraction, 
                        int threadCount) {
                ProcessInfoRow rowProcessInfoRow = ((ProcessInfoRow)(this.NewRow()));
                rowProcessInfoRow.ItemArray = new object[] {
                        logEntryId,
                        startTime,
                        processId,
                        terminalServicesSessionId,
                        nonPagedSystemMemorySize,
                        pagedMemorySize,
                        pagedSystemMemory,
                        peakPagedMemorySize,
                        peakVirtualMemorySize,
                        peakWorkingSet,
                        privateMemorySize,
                        virtualMemorySize,
                        workingSet,
                        totalProcessorTimeDays,
                        totalProcessorTimeHours,
                        totalProcessorTimeMinutes,
                        totalProcessorTimeSeconds,
                        totalProcessorTimeFraction,
                        userProcessorTimeDays,
                        userProcessorTimeHours,
                        userProcessorTimeMinutes,
                        userProcessorTimeSeconds,
                        userProcessorTimeFraction,
                        threadCount};
                this.Rows.Add(rowProcessInfoRow);
                return rowProcessInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProcessInfoDataTable cln = ((ProcessInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProcessInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnstartTime = base.Columns["startTime"];
                this.columnprocessId = base.Columns["processId"];
                this.columnterminalServicesSessionId = base.Columns["terminalServicesSessionId"];
                this.columnnonPagedSystemMemorySize = base.Columns["nonPagedSystemMemorySize"];
                this.columnpagedMemorySize = base.Columns["pagedMemorySize"];
                this.columnpagedSystemMemory = base.Columns["pagedSystemMemory"];
                this.columnpeakPagedMemorySize = base.Columns["peakPagedMemorySize"];
                this.columnpeakVirtualMemorySize = base.Columns["peakVirtualMemorySize"];
                this.columnpeakWorkingSet = base.Columns["peakWorkingSet"];
                this.columnprivateMemorySize = base.Columns["privateMemorySize"];
                this.columnvirtualMemorySize = base.Columns["virtualMemorySize"];
                this.columnworkingSet = base.Columns["workingSet"];
                this.columntotalProcessorTimeDays = base.Columns["totalProcessorTimeDays"];
                this.columntotalProcessorTimeHours = base.Columns["totalProcessorTimeHours"];
                this.columntotalProcessorTimeMinutes = base.Columns["totalProcessorTimeMinutes"];
                this.columntotalProcessorTimeSeconds = base.Columns["totalProcessorTimeSeconds"];
                this.columntotalProcessorTimeFraction = base.Columns["totalProcessorTimeFraction"];
                this.columnuserProcessorTimeDays = base.Columns["userProcessorTimeDays"];
                this.columnuserProcessorTimeHours = base.Columns["userProcessorTimeHours"];
                this.columnuserProcessorTimeMinutes = base.Columns["userProcessorTimeMinutes"];
                this.columnuserProcessorTimeSeconds = base.Columns["userProcessorTimeSeconds"];
                this.columnuserProcessorTimeFraction = base.Columns["userProcessorTimeFraction"];
                this.columnthreadCount = base.Columns["threadCount"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnstartTime = new System.Data.DataColumn("startTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartTime);
                this.columnprocessId = new System.Data.DataColumn("processId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessId);
                this.columnterminalServicesSessionId = new System.Data.DataColumn("terminalServicesSessionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterminalServicesSessionId);
                this.columnnonPagedSystemMemorySize = new System.Data.DataColumn("nonPagedSystemMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnonPagedSystemMemorySize);
                this.columnpagedMemorySize = new System.Data.DataColumn("pagedMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpagedMemorySize);
                this.columnpagedSystemMemory = new System.Data.DataColumn("pagedSystemMemory", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpagedSystemMemory);
                this.columnpeakPagedMemorySize = new System.Data.DataColumn("peakPagedMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakPagedMemorySize);
                this.columnpeakVirtualMemorySize = new System.Data.DataColumn("peakVirtualMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakVirtualMemorySize);
                this.columnpeakWorkingSet = new System.Data.DataColumn("peakWorkingSet", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeakWorkingSet);
                this.columnprivateMemorySize = new System.Data.DataColumn("privateMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprivateMemorySize);
                this.columnvirtualMemorySize = new System.Data.DataColumn("virtualMemorySize", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvirtualMemorySize);
                this.columnworkingSet = new System.Data.DataColumn("workingSet", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkingSet);
                this.columntotalProcessorTimeDays = new System.Data.DataColumn("totalProcessorTimeDays", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeDays);
                this.columntotalProcessorTimeHours = new System.Data.DataColumn("totalProcessorTimeHours", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeHours);
                this.columntotalProcessorTimeMinutes = new System.Data.DataColumn("totalProcessorTimeMinutes", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeMinutes);
                this.columntotalProcessorTimeSeconds = new System.Data.DataColumn("totalProcessorTimeSeconds", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeSeconds);
                this.columntotalProcessorTimeFraction = new System.Data.DataColumn("totalProcessorTimeFraction", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalProcessorTimeFraction);
                this.columnuserProcessorTimeDays = new System.Data.DataColumn("userProcessorTimeDays", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeDays);
                this.columnuserProcessorTimeHours = new System.Data.DataColumn("userProcessorTimeHours", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeHours);
                this.columnuserProcessorTimeMinutes = new System.Data.DataColumn("userProcessorTimeMinutes", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeMinutes);
                this.columnuserProcessorTimeSeconds = new System.Data.DataColumn("userProcessorTimeSeconds", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeSeconds);
                this.columnuserProcessorTimeFraction = new System.Data.DataColumn("userProcessorTimeFraction", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserProcessorTimeFraction);
                this.columnthreadCount = new System.Data.DataColumn("threadCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnthreadCount);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow NewProcessInfoRow() {
                return ((ProcessInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProcessInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProcessInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcessInfoRowChanged != null)) {
                    this.ProcessInfoRowChanged(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcessInfoRowChanging != null)) {
                    this.ProcessInfoRowChanging(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcessInfoRowDeleted != null)) {
                    this.ProcessInfoRowDeleted(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcessInfoRowDeleting != null)) {
                    this.ProcessInfoRowDeleting(this, new ProcessInfoRowChangeEvent(((ProcessInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcessInfoRow(ProcessInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcessInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StartInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogEntryId;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnarguments;
            
            private System.Data.DataColumn columndomain;
            
            private System.Data.DataColumn columnverb;
            
            private System.Data.DataColumn columnuseShellExecute;
            
            private System.Data.DataColumn columnworkingDirectory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoDataTable() {
                this.TableName = "StartInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StartInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StartInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logEntryIdColumn {
                get {
                    return this.columnlogEntryId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn argumentsColumn {
                get {
                    return this.columnarguments;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn domainColumn {
                get {
                    return this.columndomain;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn verbColumn {
                get {
                    return this.columnverb;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn useShellExecuteColumn {
                get {
                    return this.columnuseShellExecute;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn workingDirectoryColumn {
                get {
                    return this.columnworkingDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow this[int index] {
                get {
                    return ((StartInfoRow)(this.Rows[index]));
                }
            }
            
            public event StartInfoRowChangeEventHandler StartInfoRowChanging;
            
            public event StartInfoRowChangeEventHandler StartInfoRowChanged;
            
            public event StartInfoRowChangeEventHandler StartInfoRowDeleting;
            
            public event StartInfoRowChangeEventHandler StartInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStartInfoRow(StartInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow AddStartInfoRow(System.Guid logEntryId, string fileName, string arguments, string domain, string verb, bool useShellExecute, string workingDirectory) {
                StartInfoRow rowStartInfoRow = ((StartInfoRow)(this.NewRow()));
                rowStartInfoRow.ItemArray = new object[] {
                        logEntryId,
                        fileName,
                        arguments,
                        domain,
                        verb,
                        useShellExecute,
                        workingDirectory};
                this.Rows.Add(rowStartInfoRow);
                return rowStartInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StartInfoDataTable cln = ((StartInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StartInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogEntryId = base.Columns["logEntryId"];
                this.columnfileName = base.Columns["fileName"];
                this.columnarguments = base.Columns["arguments"];
                this.columndomain = base.Columns["domain"];
                this.columnverb = base.Columns["verb"];
                this.columnuseShellExecute = base.Columns["useShellExecute"];
                this.columnworkingDirectory = base.Columns["workingDirectory"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogEntryId = new System.Data.DataColumn("logEntryId", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogEntryId);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfileName);
                this.columnarguments = new System.Data.DataColumn("arguments", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarguments);
                this.columndomain = new System.Data.DataColumn("domain", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndomain);
                this.columnverb = new System.Data.DataColumn("verb", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnverb);
                this.columnuseShellExecute = new System.Data.DataColumn("useShellExecute", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuseShellExecute);
                this.columnworkingDirectory = new System.Data.DataColumn("workingDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkingDirectory);
                this.columnfileName.MaxLength = 256;
                this.columnarguments.MaxLength = 256;
                this.columndomain.MaxLength = 256;
                this.columnverb.MaxLength = 256;
                this.columnworkingDirectory.MaxLength = 256;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow NewStartInfoRow() {
                return ((StartInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StartInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StartInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StartInfoRowChanged != null)) {
                    this.StartInfoRowChanged(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StartInfoRowChanging != null)) {
                    this.StartInfoRowChanging(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StartInfoRowDeleted != null)) {
                    this.StartInfoRowDeleted(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StartInfoRowDeleting != null)) {
                    this.StartInfoRowDeleting(this, new StartInfoRowChangeEvent(((StartInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStartInfoRow(StartInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                XYZ_EntLib_DB_DS ds = new XYZ_EntLib_DB_DS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StartInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InnerExceptionsRow : System.Data.DataRow {
            
            private InnerExceptionsDataTable tableInnerExceptions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InnerExceptionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInnerExceptions = ((InnerExceptionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableInnerExceptions.exceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionId\' in table \'InnerExceptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInnerExceptions.exceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid innerExceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableInnerExceptions.innerExceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'innerExceptionId\' in table \'InnerExceptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInnerExceptions.innerExceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionIdNull() {
                return this.IsNull(this.tableInnerExceptions.exceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionIdNull() {
                this[this.tableInnerExceptions.exceptionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinnerExceptionIdNull() {
                return this.IsNull(this.tableInnerExceptions.innerExceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinnerExceptionIdNull() {
                this[this.tableInnerExceptions.innerExceptionIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogTypesRow : System.Data.DataRow {
            
            private LogTypesDataTable tableLogTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogTypes = ((LogTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int logTypeId {
                get {
                    return ((int)(this[this.tableLogTypes.logTypeIdColumn]));
                }
                set {
                    this[this.tableLogTypes.logTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logType {
                get {
                    return ((string)(this[this.tableLogTypes.logTypeColumn]));
                }
                set {
                    this[this.tableLogTypes.logTypeColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtendedPropsRow : System.Data.DataRow {
            
            private ExtendedPropsDataTable tableExtendedProps;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtendedPropsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtendedProps = ((ExtendedPropsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableExtendedProps.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ExtendedProps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyKey {
                get {
                    try {
                        return ((string)(this[this.tableExtendedProps.propertyKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyKey\' in table \'ExtendedProps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.propertyKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyValue {
                get {
                    try {
                        return ((string)(this[this.tableExtendedProps.propertyValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyValue\' in table \'ExtendedProps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtendedProps.propertyValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableExtendedProps.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableExtendedProps.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyKeyNull() {
                return this.IsNull(this.tableExtendedProps.propertyKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyKeyNull() {
                this[this.tableExtendedProps.propertyKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyValueNull() {
                return this.IsNull(this.tableExtendedProps.propertyValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyValueNull() {
                this[this.tableExtendedProps.propertyValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionRow : System.Data.DataRow {
            
            private ExceptionDataTable tableException;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableException = ((ExceptionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    return ((System.Guid)(this[this.tableException.idColumn]));
                }
                set {
                    this[this.tableException.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableException.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableException.dateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dateTime\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.dateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string exceptionType {
                get {
                    try {
                        return ((string)(this[this.tableException.exceptionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionType\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string exceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableException.exceptionMessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionMessage\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionMessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableException.sourceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'source\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.sourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helpLink {
                get {
                    try {
                        return ((string)(this[this.tableException.helpLinkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'helpLink\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.helpLinkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionDataId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableException.exceptionDataIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionDataId\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.exceptionDataIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stackTrace {
                get {
                    try {
                        return ((string)(this[this.tableException.stackTraceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stackTrace\' in table \'Exception\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableException.stackTraceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableException.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableException.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableException.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableException.descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateTimeNull() {
                return this.IsNull(this.tableException.dateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateTimeNull() {
                this[this.tableException.dateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionTypeNull() {
                return this.IsNull(this.tableException.exceptionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionTypeNull() {
                this[this.tableException.exceptionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionMessageNull() {
                return this.IsNull(this.tableException.exceptionMessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionMessageNull() {
                this[this.tableException.exceptionMessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableException.sourceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableException.sourceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshelpLinkNull() {
                return this.IsNull(this.tableException.helpLinkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethelpLinkNull() {
                this[this.tableException.helpLinkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionDataIdNull() {
                return this.IsNull(this.tableException.exceptionDataIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionDataIdNull() {
                this[this.tableException.exceptionDataIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstackTraceNull() {
                return this.IsNull(this.tableException.stackTraceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstackTraceNull() {
                this[this.tableException.stackTraceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogEntryRow : System.Data.DataRow {
            
            private LogEntryDataTable tableLogEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogEntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogEntry = ((LogEntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string siteCode {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.siteCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'siteCode\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.siteCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid issueTag {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.issueTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'issueTag\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.issueTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid activityId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableLogEntry.activityIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'activityId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.activityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appDomainName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.appDomainNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'appDomainName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.appDomainNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string errorMessages {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.errorMessagesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'errorMessages\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.errorMessagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int eventId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.eventIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'eventId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.eventIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loggedSeverity {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.loggedSeverityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'loggedSeverity\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.loggedSeverityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string machineName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.machineNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'machineName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.machineNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string managedThreadName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.managedThreadNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'managedThreadName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.managedThreadNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int priority {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.priorityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'priority\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.priorityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.processIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.processIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string processName {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.processNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processName\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.processNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string severity {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.severityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'severity\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.severityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime timeStamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLogEntry.timeStampColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'timeStamp\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.timeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'title\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int win32ThreadId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.win32ThreadIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'win32ThreadId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.win32ThreadIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string categoriesId {
                get {
                    try {
                        return ((string)(this[this.tableLogEntry.categoriesIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'categoriesId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.categoriesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int logTypeId {
                get {
                    try {
                        return ((int)(this[this.tableLogEntry.logTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logTypeId\' in table \'LogEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogEntry.logTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableLogEntry.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableLogEntry.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssiteCodeNull() {
                return this.IsNull(this.tableLogEntry.siteCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsiteCodeNull() {
                this[this.tableLogEntry.siteCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsissueTagNull() {
                return this.IsNull(this.tableLogEntry.issueTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetissueTagNull() {
                this[this.tableLogEntry.issueTagColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactivityIdNull() {
                return this.IsNull(this.tableLogEntry.activityIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactivityIdNull() {
                this[this.tableLogEntry.activityIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappDomainNameNull() {
                return this.IsNull(this.tableLogEntry.appDomainNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappDomainNameNull() {
                this[this.tableLogEntry.appDomainNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IserrorMessagesNull() {
                return this.IsNull(this.tableLogEntry.errorMessagesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeterrorMessagesNull() {
                this[this.tableLogEntry.errorMessagesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseventIdNull() {
                return this.IsNull(this.tableLogEntry.eventIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteventIdNull() {
                this[this.tableLogEntry.eventIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloggedSeverityNull() {
                return this.IsNull(this.tableLogEntry.loggedSeverityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloggedSeverityNull() {
                this[this.tableLogEntry.loggedSeverityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmachineNameNull() {
                return this.IsNull(this.tableLogEntry.machineNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmachineNameNull() {
                this[this.tableLogEntry.machineNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmanagedThreadNameNull() {
                return this.IsNull(this.tableLogEntry.managedThreadNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmanagedThreadNameNull() {
                this[this.tableLogEntry.managedThreadNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriorityNull() {
                return this.IsNull(this.tableLogEntry.priorityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriorityNull() {
                this[this.tableLogEntry.priorityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessIdNull() {
                return this.IsNull(this.tableLogEntry.processIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessIdNull() {
                this[this.tableLogEntry.processIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessNameNull() {
                return this.IsNull(this.tableLogEntry.processNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessNameNull() {
                this[this.tableLogEntry.processNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseverityNull() {
                return this.IsNull(this.tableLogEntry.severityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseverityNull() {
                this[this.tableLogEntry.severityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeStampNull() {
                return this.IsNull(this.tableLogEntry.timeStampColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeStampNull() {
                this[this.tableLogEntry.timeStampColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableLogEntry.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableLogEntry.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswin32ThreadIdNull() {
                return this.IsNull(this.tableLogEntry.win32ThreadIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwin32ThreadIdNull() {
                this[this.tableLogEntry.win32ThreadIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscategoriesIdNull() {
                return this.IsNull(this.tableLogEntry.categoriesIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcategoriesIdNull() {
                this[this.tableLogEntry.categoriesIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogTypeIdNull() {
                return this.IsNull(this.tableLogEntry.logTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogTypeIdNull() {
                this[this.tableLogEntry.logTypeIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExceptionDataRow : System.Data.DataRow {
            
            private ExceptionDataDataTable tableExceptionData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExceptionDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExceptionData = ((ExceptionDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid exceptionId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableExceptionData.exceptionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'exceptionId\' in table \'ExceptionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionData.exceptionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataKey {
                get {
                    try {
                        return ((string)(this[this.tableExceptionData.dataKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dataKey\' in table \'ExceptionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionData.dataKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dataValue {
                get {
                    try {
                        return ((string)(this[this.tableExceptionData.dataValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dataValue\' in table \'ExceptionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExceptionData.dataValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexceptionIdNull() {
                return this.IsNull(this.tableExceptionData.exceptionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexceptionIdNull() {
                this[this.tableExceptionData.exceptionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataKeyNull() {
                return this.IsNull(this.tableExceptionData.dataKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataKeyNull() {
                this[this.tableExceptionData.dataKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataValueNull() {
                return this.IsNull(this.tableExceptionData.dataValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataValueNull() {
                this[this.tableExceptionData.dataValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnvironmentVariablesRow : System.Data.DataRow {
            
            private EnvironmentVariablesDataTable tableEnvironmentVariables;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironmentVariablesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnvironmentVariables = ((EnvironmentVariablesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableEnvironmentVariables.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'EnvironmentVariables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironmentVariables.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string variableName {
                get {
                    try {
                        return ((string)(this[this.tableEnvironmentVariables.variableNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'variableName\' in table \'EnvironmentVariables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironmentVariables.variableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string variableValue {
                get {
                    try {
                        return ((string)(this[this.tableEnvironmentVariables.variableValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'variableValue\' in table \'EnvironmentVariables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironmentVariables.variableValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableEnvironmentVariables.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableEnvironmentVariables.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvariableNameNull() {
                return this.IsNull(this.tableEnvironmentVariables.variableNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvariableNameNull() {
                this[this.tableEnvironmentVariables.variableNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvariableValueNull() {
                return this.IsNull(this.tableEnvironmentVariables.variableValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvariableValueNull() {
                this[this.tableEnvironmentVariables.variableValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerbsRow : System.Data.DataRow {
            
            private VerbsDataTable tableVerbs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerbsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerbs = ((VerbsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string verb {
                get {
                    try {
                        return ((string)(this[this.tableVerbs.verbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'verb\' in table \'Verbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerbs.verbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableVerbs.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'Verbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerbs.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsverbNull() {
                return this.IsNull(this.tableVerbs.verbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetverbNull() {
                this[this.tableVerbs.verbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableVerbs.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableVerbs.logEntryIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HostEnvironmentRow : System.Data.DataRow {
            
            private HostEnvironmentDataTable tableHostEnvironment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HostEnvironmentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHostEnvironment = ((HostEnvironmentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableHostEnvironment.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string osVersion {
                get {
                    try {
                        return ((string)(this[this.tableHostEnvironment.osVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'osVersion\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.osVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short processorCount {
                get {
                    try {
                        return ((short)(this[this.tableHostEnvironment.processorCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processorCount\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.processorCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currentDirectory {
                get {
                    try {
                        return ((string)(this[this.tableHostEnvironment.currentDirectoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'currentDirectory\' in table \'HostEnvironment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHostEnvironment.currentDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableHostEnvironment.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableHostEnvironment.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsosVersionNull() {
                return this.IsNull(this.tableHostEnvironment.osVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetosVersionNull() {
                this[this.tableHostEnvironment.osVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessorCountNull() {
                return this.IsNull(this.tableHostEnvironment.processorCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessorCountNull() {
                this[this.tableHostEnvironment.processorCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurrentDirectoryNull() {
                return this.IsNull(this.tableHostEnvironment.currentDirectoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurrentDirectoryNull() {
                this[this.tableHostEnvironment.currentDirectoryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReflectionTargetSiteRow : System.Data.DataRow {
            
            private ReflectionTargetSiteDataTable tableReflectionTargetSite;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionTargetSiteRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReflectionTargetSite = ((ReflectionTargetSiteDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReflectionTargetSite.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ReflectionTargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'ReflectionTargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string callingConvention {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.callingConventionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'callingConvention\' in table \'ReflectionTargetSite\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.callingConventionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string declaringType {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.declaringTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'declaringType\' in table \'ReflectionTargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.declaringTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memberType {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.memberTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'memberType\' in table \'ReflectionTargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.memberTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string token {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.tokenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'token\' in table \'ReflectionTargetSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.tokenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string declaringModule {
                get {
                    try {
                        return ((string)(this[this.tableReflectionTargetSite.declaringModuleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'declaringModule\' in table \'ReflectionTargetSite\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableReflectionTargetSite.declaringModuleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableReflectionTargetSite.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableReflectionTargetSite.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableReflectionTargetSite.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableReflectionTargetSite.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscallingConventionNull() {
                return this.IsNull(this.tableReflectionTargetSite.callingConventionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcallingConventionNull() {
                this[this.tableReflectionTargetSite.callingConventionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeclaringTypeNull() {
                return this.IsNull(this.tableReflectionTargetSite.declaringTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeclaringTypeNull() {
                this[this.tableReflectionTargetSite.declaringTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemberTypeNull() {
                return this.IsNull(this.tableReflectionTargetSite.memberTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemberTypeNull() {
                this[this.tableReflectionTargetSite.memberTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstokenNull() {
                return this.IsNull(this.tableReflectionTargetSite.tokenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettokenNull() {
                this[this.tableReflectionTargetSite.tokenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeclaringModuleNull() {
                return this.IsNull(this.tableReflectionTargetSite.declaringModuleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeclaringModuleNull() {
                this[this.tableReflectionTargetSite.declaringModuleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReflectionFieldsRow : System.Data.DataRow {
            
            private ReflectionFieldsDataTable tableReflectionFields;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionFieldsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReflectionFields = ((ReflectionFieldsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReflectionFields.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ReflectionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionFields.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fieldName {
                get {
                    try {
                        return ((string)(this[this.tableReflectionFields.fieldNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fieldName\' in table \'ReflectionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionFields.fieldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fieldValue {
                get {
                    try {
                        return ((string)(this[this.tableReflectionFields.fieldValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fieldValue\' in table \'ReflectionFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionFields.fieldValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableReflectionFields.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableReflectionFields.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfieldNameNull() {
                return this.IsNull(this.tableReflectionFields.fieldNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfieldNameNull() {
                this[this.tableReflectionFields.fieldNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfieldValueNull() {
                return this.IsNull(this.tableReflectionFields.fieldValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfieldValueNull() {
                this[this.tableReflectionFields.fieldValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReflectionGenericArgumentsRow : System.Data.DataRow {
            
            private ReflectionGenericArgumentsDataTable tableReflectionGenericArguments;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionGenericArgumentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReflectionGenericArguments = ((ReflectionGenericArgumentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReflectionGenericArguments.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ReflectionGenericArguments\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableReflectionGenericArguments.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid id {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReflectionGenericArguments.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'ReflectionGenericArguments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionGenericArguments.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableReflectionGenericArguments.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'type\' in table \'ReflectionGenericArguments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionGenericArguments.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableReflectionGenericArguments.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableReflectionGenericArguments.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableReflectionGenericArguments.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableReflectionGenericArguments.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableReflectionGenericArguments.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableReflectionGenericArguments.typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReflectionPropertiesRow : System.Data.DataRow {
            
            private ReflectionPropertiesDataTable tableReflectionProperties;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReflectionPropertiesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReflectionProperties = ((ReflectionPropertiesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableReflectionProperties.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ReflectionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionProperties.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyName {
                get {
                    try {
                        return ((string)(this[this.tableReflectionProperties.propertyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyName\' in table \'ReflectionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionProperties.propertyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string propertyValue {
                get {
                    try {
                        return ((string)(this[this.tableReflectionProperties.propertyValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'propertyValue\' in table \'ReflectionProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReflectionProperties.propertyValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableReflectionProperties.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableReflectionProperties.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyNameNull() {
                return this.IsNull(this.tableReflectionProperties.propertyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyNameNull() {
                this[this.tableReflectionProperties.propertyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspropertyValueNull() {
                return this.IsNull(this.tableReflectionProperties.propertyValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpropertyValueNull() {
                this[this.tableReflectionProperties.propertyValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiagnosticInfoRow : System.Data.DataRow {
            
            private DiagnosticInfoDataTable tableDiagnosticInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiagnosticInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiagnosticInfo = ((DiagnosticInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableDiagnosticInfo.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string clrVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.clrVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'clrVersion\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.clrVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string executingAssemblyName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.executingAssemblyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'executingAssemblyName\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.executingAssemblyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileDescription {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileDescription\' in table \'DiagnosticInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionFileVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionFileVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionFileVersion\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionFileVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionProductName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionProductName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionProductVersion {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionProductVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionProductVersion\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionProductVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionCompanyName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionCompanyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionCompanyName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionCompanyNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionComments {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionCommentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionComments\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionCommentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionInternalName {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionInternalNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionInternalName\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionInternalNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool versionIsDebug {
                get {
                    try {
                        return ((bool)(this[this.tableDiagnosticInfo.versionIsDebugColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionIsDebug\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionIsDebugColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool versionIsPatched {
                get {
                    try {
                        return ((bool)(this[this.tableDiagnosticInfo.versionIsPatchedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionIsPatched\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionIsPatchedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLanguage {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLanguageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLanguage\' in table \'DiagnosticInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLanguageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLegalCopyright {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLegalCopyrightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLegalCopyright\' in table \'DiagnosticInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLegalCopyrightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string versionLegalTrademarks {
                get {
                    try {
                        return ((string)(this[this.tableDiagnosticInfo.versionLegalTrademarksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'versionLegalTrademarks\' in table \'DiagnosticInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDiagnosticInfo.versionLegalTrademarksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableDiagnosticInfo.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableDiagnosticInfo.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclrVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.clrVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclrVersionNull() {
                this[this.tableDiagnosticInfo.clrVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexecutingAssemblyNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.executingAssemblyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexecutingAssemblyNameNull() {
                this[this.tableDiagnosticInfo.executingAssemblyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileNameNull() {
                this[this.tableDiagnosticInfo.versionFileNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileDescriptionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileDescriptionNull() {
                this[this.tableDiagnosticInfo.versionFileDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionFileVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionFileVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionFileVersionNull() {
                this[this.tableDiagnosticInfo.versionFileVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionProductNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionProductNameNull() {
                this[this.tableDiagnosticInfo.versionProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionProductVersionNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionProductVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionProductVersionNull() {
                this[this.tableDiagnosticInfo.versionProductVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionCompanyNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionCompanyNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionCompanyNameNull() {
                this[this.tableDiagnosticInfo.versionCompanyNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionCommentsNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionCommentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionCommentsNull() {
                this[this.tableDiagnosticInfo.versionCommentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionInternalNameNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionInternalNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionInternalNameNull() {
                this[this.tableDiagnosticInfo.versionInternalNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionIsDebugNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionIsDebugColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionIsDebugNull() {
                this[this.tableDiagnosticInfo.versionIsDebugColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionIsPatchedNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionIsPatchedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionIsPatchedNull() {
                this[this.tableDiagnosticInfo.versionIsPatchedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLanguageNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLanguageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLanguageNull() {
                this[this.tableDiagnosticInfo.versionLanguageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLegalCopyrightNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLegalCopyrightColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLegalCopyrightNull() {
                this[this.tableDiagnosticInfo.versionLegalCopyrightColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionLegalTrademarksNull() {
                return this.IsNull(this.tableDiagnosticInfo.versionLegalTrademarksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionLegalTrademarksNull() {
                this[this.tableDiagnosticInfo.versionLegalTrademarksColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcessInfoRow : System.Data.DataRow {
            
            private ProcessInfoDataTable tableProcessInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcessInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcessInfo = ((ProcessInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableProcessInfo.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableProcessInfo.startTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'startTime\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.startTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processId {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.processIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'processId\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.processIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int terminalServicesSessionId {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.terminalServicesSessionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'terminalServicesSessionId\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.terminalServicesSessionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long nonPagedSystemMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nonPagedSystemMemorySize\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pagedMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.pagedMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pagedMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.pagedMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long pagedSystemMemory {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.pagedSystemMemoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pagedSystemMemory\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.pagedSystemMemoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakPagedMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakPagedMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakPagedMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakPagedMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakVirtualMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakVirtualMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakVirtualMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakVirtualMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long peakWorkingSet {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.peakWorkingSetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peakWorkingSet\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.peakWorkingSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long privateMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.privateMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'privateMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.privateMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long virtualMemorySize {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.virtualMemorySizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'virtualMemorySize\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.virtualMemorySizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long workingSet {
                get {
                    try {
                        return ((long)(this[this.tableProcessInfo.workingSetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'workingSet\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.workingSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeDays {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeDaysColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeDays\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeDaysColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeHours {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeHours\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeMinutes {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeMinutes\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeSeconds {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeSecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeSeconds\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeSecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalProcessorTimeFraction {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.totalProcessorTimeFractionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalProcessorTimeFraction\' in table \'ProcessInfo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.totalProcessorTimeFractionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeDays {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeDaysColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeDays\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeDaysColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeHours {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeHoursColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeHours\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeHoursColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeMinutes {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeMinutesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeMinutes\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeMinutesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeSeconds {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeSecondsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeSeconds\' in table \'ProcessInfo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeSecondsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int userProcessorTimeFraction {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.userProcessorTimeFractionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userProcessorTimeFraction\' in table \'ProcessInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.userProcessorTimeFractionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int threadCount {
                get {
                    try {
                        return ((int)(this[this.tableProcessInfo.threadCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'threadCount\' in table \'ProcessInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProcessInfo.threadCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableProcessInfo.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableProcessInfo.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartTimeNull() {
                return this.IsNull(this.tableProcessInfo.startTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartTimeNull() {
                this[this.tableProcessInfo.startTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprocessIdNull() {
                return this.IsNull(this.tableProcessInfo.processIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprocessIdNull() {
                this[this.tableProcessInfo.processIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsterminalServicesSessionIdNull() {
                return this.IsNull(this.tableProcessInfo.terminalServicesSessionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetterminalServicesSessionIdNull() {
                this[this.tableProcessInfo.terminalServicesSessionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnonPagedSystemMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.nonPagedSystemMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnonPagedSystemMemorySizeNull() {
                this[this.tableProcessInfo.nonPagedSystemMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspagedMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.pagedMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpagedMemorySizeNull() {
                this[this.tableProcessInfo.pagedMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspagedSystemMemoryNull() {
                return this.IsNull(this.tableProcessInfo.pagedSystemMemoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpagedSystemMemoryNull() {
                this[this.tableProcessInfo.pagedSystemMemoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakPagedMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.peakPagedMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakPagedMemorySizeNull() {
                this[this.tableProcessInfo.peakPagedMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakVirtualMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.peakVirtualMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakVirtualMemorySizeNull() {
                this[this.tableProcessInfo.peakVirtualMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspeakWorkingSetNull() {
                return this.IsNull(this.tableProcessInfo.peakWorkingSetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpeakWorkingSetNull() {
                this[this.tableProcessInfo.peakWorkingSetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprivateMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.privateMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprivateMemorySizeNull() {
                this[this.tableProcessInfo.privateMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvirtualMemorySizeNull() {
                return this.IsNull(this.tableProcessInfo.virtualMemorySizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvirtualMemorySizeNull() {
                this[this.tableProcessInfo.virtualMemorySizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkingSetNull() {
                return this.IsNull(this.tableProcessInfo.workingSetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkingSetNull() {
                this[this.tableProcessInfo.workingSetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeDaysNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeDaysColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeDaysNull() {
                this[this.tableProcessInfo.totalProcessorTimeDaysColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeHoursNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeHoursNull() {
                this[this.tableProcessInfo.totalProcessorTimeHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeMinutesNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeMinutesNull() {
                this[this.tableProcessInfo.totalProcessorTimeMinutesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeSecondsNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeSecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeSecondsNull() {
                this[this.tableProcessInfo.totalProcessorTimeSecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalProcessorTimeFractionNull() {
                return this.IsNull(this.tableProcessInfo.totalProcessorTimeFractionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalProcessorTimeFractionNull() {
                this[this.tableProcessInfo.totalProcessorTimeFractionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeDaysNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeDaysColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeDaysNull() {
                this[this.tableProcessInfo.userProcessorTimeDaysColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeHoursNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeHoursColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeHoursNull() {
                this[this.tableProcessInfo.userProcessorTimeHoursColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeMinutesNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeMinutesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeMinutesNull() {
                this[this.tableProcessInfo.userProcessorTimeMinutesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeSecondsNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeSecondsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeSecondsNull() {
                this[this.tableProcessInfo.userProcessorTimeSecondsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserProcessorTimeFractionNull() {
                return this.IsNull(this.tableProcessInfo.userProcessorTimeFractionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserProcessorTimeFractionNull() {
                this[this.tableProcessInfo.userProcessorTimeFractionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthreadCountNull() {
                return this.IsNull(this.tableProcessInfo.threadCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthreadCountNull() {
                this[this.tableProcessInfo.threadCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StartInfoRow : System.Data.DataRow {
            
            private StartInfoDataTable tableStartInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StartInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStartInfo = ((StartInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid logEntryId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableStartInfo.logEntryIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logEntryId\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.logEntryIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'fileName\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.fileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arguments {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.argumentsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'arguments\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.argumentsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string domain {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.domainColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'domain\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.domainColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string verb {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.verbColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'verb\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.verbColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool useShellExecute {
                get {
                    try {
                        return ((bool)(this[this.tableStartInfo.useShellExecuteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'useShellExecute\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.useShellExecuteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string workingDirectory {
                get {
                    try {
                        return ((string)(this[this.tableStartInfo.workingDirectoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'workingDirectory\' in table \'StartInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStartInfo.workingDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogEntryIdNull() {
                return this.IsNull(this.tableStartInfo.logEntryIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogEntryIdNull() {
                this[this.tableStartInfo.logEntryIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileNameNull() {
                return this.IsNull(this.tableStartInfo.fileNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileNameNull() {
                this[this.tableStartInfo.fileNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsargumentsNull() {
                return this.IsNull(this.tableStartInfo.argumentsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetargumentsNull() {
                this[this.tableStartInfo.argumentsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdomainNull() {
                return this.IsNull(this.tableStartInfo.domainColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdomainNull() {
                this[this.tableStartInfo.domainColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsverbNull() {
                return this.IsNull(this.tableStartInfo.verbColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetverbNull() {
                this[this.tableStartInfo.verbColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuseShellExecuteNull() {
                return this.IsNull(this.tableStartInfo.useShellExecuteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuseShellExecuteNull() {
                this[this.tableStartInfo.useShellExecuteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkingDirectoryNull() {
                return this.IsNull(this.tableStartInfo.workingDirectoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkingDirectoryNull() {
                this[this.tableStartInfo.workingDirectoryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InnerExceptionsRowChangeEvent : System.EventArgs {
            
            private InnerExceptionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRowChangeEvent(InnerExceptionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InnerExceptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogTypesRowChangeEvent : System.EventArgs {
            
            private LogTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesRowChangeEvent(LogTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtendedPropsRowChangeEvent : System.EventArgs {
            
            private ExtendedPropsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRowChangeEvent(ExtendedPropsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtendedPropsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionRowChangeEvent : System.EventArgs {
            
            private ExceptionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRowChangeEvent(ExceptionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogEntryRowChangeEvent : System.EventArgs {
            
            private LogEntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRowChangeEvent(LogEntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExceptionDataRowChangeEvent : System.EventArgs {
            
            private ExceptionDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRowChangeEvent(ExceptionDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExceptionDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnvironmentVariablesRowChangeEvent : System.EventArgs {
            
            private EnvironmentVariablesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRowChangeEvent(EnvironmentVariablesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironmentVariablesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerbsRowChangeEvent : System.EventArgs {
            
            private VerbsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRowChangeEvent(VerbsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerbsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HostEnvironmentRowChangeEvent : System.EventArgs {
            
            private HostEnvironmentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRowChangeEvent(HostEnvironmentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HostEnvironmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReflectionTargetSiteRowChangeEvent : System.EventArgs {
            
            private ReflectionTargetSiteRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteRowChangeEvent(ReflectionTargetSiteRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionTargetSiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReflectionFieldsRowChangeEvent : System.EventArgs {
            
            private ReflectionFieldsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsRowChangeEvent(ReflectionFieldsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReflectionGenericArgumentsRowChangeEvent : System.EventArgs {
            
            private ReflectionGenericArgumentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsRowChangeEvent(ReflectionGenericArgumentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionGenericArgumentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReflectionPropertiesRowChangeEvent : System.EventArgs {
            
            private ReflectionPropertiesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesRowChangeEvent(ReflectionPropertiesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReflectionPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiagnosticInfoRowChangeEvent : System.EventArgs {
            
            private DiagnosticInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRowChangeEvent(DiagnosticInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiagnosticInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcessInfoRowChangeEvent : System.EventArgs {
            
            private ProcessInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRowChangeEvent(ProcessInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcessInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StartInfoRowChangeEvent : System.EventArgs {
            
            private StartInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRowChangeEvent(StartInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StartInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace XYZ.EntLib.DataLayer.XYZ_EntLib_DB_DSTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InnerExceptionsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InnerExceptionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InnerExceptions";
            tableMapping.ColumnMappings.Add("exceptionId", "exceptionId");
            tableMapping.ColumnMappings.Add("innerExceptionId", "innerExceptionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[InnerExceptions] ([exceptionId], [innerExceptionId]) VALUES (@" +
                "exceptionId, @innerExceptionId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@innerExceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "innerExceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT exceptionId, innerExceptionId FROM dbo.InnerExceptions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT exceptionId, innerExceptionId FROM dbo.InnerExceptions Where exceptionId =" +
                " @expId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@expId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.InnerExceptionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.InnerExceptionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.InnerExceptionsDataTable dataTable = new XYZ_EntLib_DB_DS.InnerExceptionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByExpId(XYZ_EntLib_DB_DS.InnerExceptionsDataTable dataTable, System.Nullable<System.Guid> expId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((expId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(expId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.InnerExceptionsDataTable GetDataByExpId(System.Nullable<System.Guid> expId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((expId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(expId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.InnerExceptionsDataTable dataTable = new XYZ_EntLib_DB_DS.InnerExceptionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.InnerExceptionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "InnerExceptions");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> exceptionId, System.Nullable<System.Guid> innerExceptionId) {
            if ((exceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((innerExceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(innerExceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LogTypesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LogTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LogTypes";
            tableMapping.ColumnMappings.Add("logTypeId", "logTypeId");
            tableMapping.ColumnMappings.Add("logType", "logType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LogTypes] ([logType]) VALUES (@logType)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logType", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "logType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logTypeId, logType FROM dbo.LogTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.LogTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.LogTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.LogTypesDataTable dataTable = new XYZ_EntLib_DB_DS.LogTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.LogTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "LogTypes");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string logType) {
            if ((logType == null)) {
                throw new System.ArgumentNullException("logType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(logType));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExtendedPropsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExtendedPropsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExtendedProps";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("propertyKey", "propertyKey");
            tableMapping.ColumnMappings.Add("propertyValue", "propertyValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExtendedProps] ([logEntryId], [propertyKey], [propertyValue]) " +
                "VALUES (@logEntryId, @propertyKey, @propertyValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyKey", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, propertyKey, propertyValue FROM dbo.ExtendedProps";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, propertyKey, propertyValue FROM dbo.ExtendedProps Where logEnt" +
                "ryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ExtendedProps Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ExtendedPropsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ExtendedPropsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ExtendedPropsDataTable dataTable = new XYZ_EntLib_DB_DS.ExtendedPropsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ExtendedPropsDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ExtendedPropsDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ExtendedPropsDataTable dataTable = new XYZ_EntLib_DB_DS.ExtendedPropsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ExtendedPropsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ExtendedProps");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string propertyKey, string propertyValue) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((propertyKey == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(propertyKey));
            }
            if ((propertyValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(propertyValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Exception";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("dateTime", "dateTime");
            tableMapping.ColumnMappings.Add("exceptionType", "exceptionType");
            tableMapping.ColumnMappings.Add("exceptionMessage", "exceptionMessage");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("helpLink", "helpLink");
            tableMapping.ColumnMappings.Add("exceptionDataId", "exceptionDataId");
            tableMapping.ColumnMappings.Add("stackTrace", "stackTrace");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Exception] WHERE (([id] = @Original_id) AND ((@IsNull_logEntryId = 1 AND [logEntryId] IS NULL) OR ([logEntryId] = @Original_logEntryId)) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)) AND ((@IsNull_dateTime = 1 AND [dateTime] IS NULL) OR ([dateTime] = @Original_dateTime)) AND ((@IsNull_exceptionType = 1 AND [exceptionType] IS NULL) OR ([exceptionType] = @Original_exceptionType)) AND ((@IsNull_exceptionMessage = 1 AND [exceptionMessage] IS NULL) OR ([exceptionMessage] = @Original_exceptionMessage)) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Original_source)) AND ((@IsNull_helpLink = 1 AND [helpLink] IS NULL) OR ([helpLink] = @Original_helpLink)) AND ((@IsNull_exceptionDataId = 1 AND [exceptionDataId] IS NULL) OR ([exceptionDataId] = @Original_exceptionDataId)) AND ((@IsNull_stackTrace = 1 AND [stackTrace] IS NULL) OR ([stackTrace] = @Original_stackTrace)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_logEntryId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionMessage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_source", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_helpLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionDataId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_stackTrace", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Exception] ([id], [logEntryId], [description], [dateTime], [exceptionType], [exceptionMessage], [source], [helpLink], [exceptionDataId], [stackTrace]) VALUES (@id, @logEntryId, @description, @dateTime, @exceptionType, @exceptionMessage, @source, @helpLink, @exceptionDataId, @stackTrace);
SELECT id, logEntryId, description, dateTime, exceptionType, exceptionMessage, source, helpLink, exceptionDataId, stackTrace FROM Exception WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Exception] SET [id] = @id, [logEntryId] = @logEntryId, [description] = @description, [dateTime] = @dateTime, [exceptionType] = @exceptionType, [exceptionMessage] = @exceptionMessage, [source] = @source, [helpLink] = @helpLink, [exceptionDataId] = @exceptionDataId, [stackTrace] = @stackTrace WHERE (([id] = @Original_id) AND ((@IsNull_logEntryId = 1 AND [logEntryId] IS NULL) OR ([logEntryId] = @Original_logEntryId)) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)) AND ((@IsNull_dateTime = 1 AND [dateTime] IS NULL) OR ([dateTime] = @Original_dateTime)) AND ((@IsNull_exceptionType = 1 AND [exceptionType] IS NULL) OR ([exceptionType] = @Original_exceptionType)) AND ((@IsNull_exceptionMessage = 1 AND [exceptionMessage] IS NULL) OR ([exceptionMessage] = @Original_exceptionMessage)) AND ((@IsNull_source = 1 AND [source] IS NULL) OR ([source] = @Original_source)) AND ((@IsNull_helpLink = 1 AND [helpLink] IS NULL) OR ([helpLink] = @Original_helpLink)) AND ((@IsNull_exceptionDataId = 1 AND [exceptionDataId] IS NULL) OR ([exceptionDataId] = @Original_exceptionDataId)) AND ((@IsNull_stackTrace = 1 AND [stackTrace] IS NULL) OR ([stackTrace] = @Original_stackTrace)));
SELECT id, logEntryId, description, dateTime, exceptionType, exceptionMessage, source, helpLink, exceptionDataId, stackTrace FROM Exception WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_logEntryId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_dateTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_dateTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "dateTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionMessage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionMessage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionMessage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_source", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "source", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_helpLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_helpLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "helpLink", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exceptionDataId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exceptionDataId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionDataId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_stackTrace", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stackTrace", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stackTrace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, logEntryId, description, dateTime, exceptionType, exceptionMessage, so" +
                "urce, helpLink, exceptionDataId, stackTrace FROM dbo.Exception";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT id, logEntryId, description, dateTime, exceptionType, exceptionMessage, so" +
                "urce, helpLink, exceptionDataId, stackTrace FROM dbo.Exception Where logEntryId " +
                "= @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM Exception Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ExceptionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ExceptionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ExceptionDataTable dataTable = new XYZ_EntLib_DB_DS.ExceptionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ExceptionDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ExceptionDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ExceptionDataTable dataTable = new XYZ_EntLib_DB_DS.ExceptionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ExceptionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "Exception");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Guid Original_id, System.Nullable<System.Guid> Original_logEntryId, string Original_description, System.Nullable<System.DateTime> Original_dateTime, string Original_exceptionType, string Original_exceptionMessage, string Original_source, string Original_helpLink, System.Nullable<System.Guid> Original_exceptionDataId, string Original_stackTrace) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_id));
            if ((Original_logEntryId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_logEntryId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_description));
            }
            if ((Original_dateTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_dateTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_exceptionType == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_exceptionType));
            }
            if ((Original_exceptionMessage == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_exceptionMessage));
            }
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_source));
            }
            if ((Original_helpLink == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_helpLink));
            }
            if ((Original_exceptionDataId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.Guid)(Original_exceptionDataId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_stackTrace == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_stackTrace));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Guid id, System.Nullable<System.Guid> logEntryId, string description, System.Nullable<System.DateTime> dateTime, string exceptionType, string exceptionMessage, string source, string helpLink, System.Nullable<System.Guid> exceptionDataId, string stackTrace) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(description));
            }
            if ((dateTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(dateTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((exceptionType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(exceptionType));
            }
            if ((exceptionMessage == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(exceptionMessage));
            }
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(source));
            }
            if ((helpLink == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(helpLink));
            }
            if ((exceptionDataId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.Guid)(exceptionDataId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((stackTrace == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(stackTrace));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid id, 
                    System.Nullable<System.Guid> logEntryId, 
                    string description, 
                    System.Nullable<System.DateTime> dateTime, 
                    string exceptionType, 
                    string exceptionMessage, 
                    string source, 
                    string helpLink, 
                    System.Nullable<System.Guid> exceptionDataId, 
                    string stackTrace, 
                    System.Guid Original_id, 
                    System.Nullable<System.Guid> Original_logEntryId, 
                    string Original_description, 
                    System.Nullable<System.DateTime> Original_dateTime, 
                    string Original_exceptionType, 
                    string Original_exceptionMessage, 
                    string Original_source, 
                    string Original_helpLink, 
                    System.Nullable<System.Guid> Original_exceptionDataId, 
                    string Original_stackTrace) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(id));
            if ((logEntryId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(description));
            }
            if ((dateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(dateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((exceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(exceptionType));
            }
            if ((exceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(exceptionMessage));
            }
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(source));
            }
            if ((helpLink == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(helpLink));
            }
            if ((exceptionDataId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(exceptionDataId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((stackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(stackTrace));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.Guid)(Original_id));
            if ((Original_logEntryId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.Guid)(Original_logEntryId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_description));
            }
            if ((Original_dateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_dateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_exceptionType == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_exceptionType));
            }
            if ((Original_exceptionMessage == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_exceptionMessage));
            }
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source));
            }
            if ((Original_helpLink == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_helpLink));
            }
            if ((Original_exceptionDataId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.Guid)(Original_exceptionDataId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_stackTrace == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_stackTrace));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LogEntryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LogEntryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LogEntry";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("siteCode", "siteCode");
            tableMapping.ColumnMappings.Add("issueTag", "issueTag");
            tableMapping.ColumnMappings.Add("activityId", "activityId");
            tableMapping.ColumnMappings.Add("appDomainName", "appDomainName");
            tableMapping.ColumnMappings.Add("errorMessages", "errorMessages");
            tableMapping.ColumnMappings.Add("eventId", "eventId");
            tableMapping.ColumnMappings.Add("loggedSeverity", "loggedSeverity");
            tableMapping.ColumnMappings.Add("machineName", "machineName");
            tableMapping.ColumnMappings.Add("managedThreadName", "managedThreadName");
            tableMapping.ColumnMappings.Add("priority", "priority");
            tableMapping.ColumnMappings.Add("processId", "processId");
            tableMapping.ColumnMappings.Add("processName", "processName");
            tableMapping.ColumnMappings.Add("severity", "severity");
            tableMapping.ColumnMappings.Add("timeStamp", "timeStamp");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("win32ThreadId", "win32ThreadId");
            tableMapping.ColumnMappings.Add("categoriesId", "categoriesId");
            tableMapping.ColumnMappings.Add("logTypeId", "logTypeId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LogEntry] ([id], [siteCode], [issueTag], [activityId], [appDomainName], [errorMessages], [eventId], [loggedSeverity], [machineName], [managedThreadName], [priority], [processId], [processName], [severity], [timeStamp], [title], [win32ThreadId], [categoriesId], [logTypeId]) VALUES (@id, @siteCode, @issueTag, @activityId, @appDomainName, @errorMessages, @eventId, @loggedSeverity, @machineName, @managedThreadName, @priority, @processId, @processName, @severity, @timeStamp, @title, @win32ThreadId, @categoriesId, @logTypeId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@siteCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "siteCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@issueTag", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "issueTag", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@activityId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "activityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@appDomainName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "appDomainName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@errorMessages", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "errorMessages", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@eventId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "eventId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@loggedSeverity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "loggedSeverity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@machineName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "machineName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@managedThreadName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "managedThreadName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priority", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "processName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@severity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "severity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@timeStamp", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "timeStamp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@win32ThreadId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "win32ThreadId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@categoriesId", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "categoriesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "logTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, siteCode, issueTag, activityId, appDomainName, errorMessages, eventId," +
                " loggedSeverity, machineName, managedThreadName, priority, processId, processNam" +
                "e, severity, timeStamp, title, win32ThreadId, categoriesId, logTypeId FROM dbo.L" +
                "ogEntry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT id, siteCode, issueTag, activityId, appDomainName, errorMessages, eventId, loggedSeverity, machineName, managedThreadName, priority, processId, processName, severity, timeStamp, title, win32ThreadId, categoriesId, logTypeId FROM dbo.LogEntry Where id=@logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     COUNT(*) AS Expr1\r\nFROM         LogEntry\r\nWHERE     (id = @logId)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.LogEntryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.LogEntryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.LogEntryDataTable dataTable = new XYZ_EntLib_DB_DS.LogEntryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.LogEntryDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.LogEntryDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.LogEntryDataTable dataTable = new XYZ_EntLib_DB_DS.LogEntryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.LogEntryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "LogEntry");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.Guid> id, 
                    string siteCode, 
                    System.Nullable<System.Guid> issueTag, 
                    System.Nullable<System.Guid> activityId, 
                    string appDomainName, 
                    string errorMessages, 
                    System.Nullable<int> eventId, 
                    string loggedSeverity, 
                    string machineName, 
                    string managedThreadName, 
                    System.Nullable<int> priority, 
                    System.Nullable<int> processId, 
                    string processName, 
                    string severity, 
                    System.Nullable<System.DateTime> timeStamp, 
                    string title, 
                    System.Nullable<int> win32ThreadId, 
                    string categoriesId, 
                    System.Nullable<int> logTypeId) {
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((siteCode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(siteCode));
            }
            if ((issueTag.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(issueTag.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((activityId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(activityId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((appDomainName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(appDomainName));
            }
            if ((errorMessages == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(errorMessages));
            }
            if ((eventId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(eventId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((loggedSeverity == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(loggedSeverity));
            }
            if ((machineName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(machineName));
            }
            if ((managedThreadName == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(managedThreadName));
            }
            if ((priority.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(priority.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((processName == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(processName));
            }
            if ((severity == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(severity));
            }
            if ((timeStamp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(timeStamp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((title == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(title));
            }
            if ((win32ThreadId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(win32ThreadId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((categoriesId == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(categoriesId));
            }
            if ((logTypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(logTypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExceptionDataTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExceptionDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExceptionData";
            tableMapping.ColumnMappings.Add("exceptionId", "exceptionId");
            tableMapping.ColumnMappings.Add("dataKey", "dataKey");
            tableMapping.ColumnMappings.Add("dataValue", "dataValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ExceptionData] ([exceptionId], [dataKey], [dataValue]) VALUES " +
                "(@exceptionId, @dataKey, @dataValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exceptionId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataKey", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataKey", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@dataValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dataValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT exceptionId, dataKey, dataValue FROM dbo.ExceptionData";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT exceptionId, dataKey, dataValue FROM dbo.ExceptionData Where exceptionId =" +
                " @expId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@expId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "exceptionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ExceptionDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ExceptionDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ExceptionDataDataTable dataTable = new XYZ_EntLib_DB_DS.ExceptionDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByExpId(XYZ_EntLib_DB_DS.ExceptionDataDataTable dataTable, System.Nullable<System.Guid> expId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((expId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(expId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ExceptionDataDataTable GetDataByExpId(System.Nullable<System.Guid> expId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((expId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(expId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ExceptionDataDataTable dataTable = new XYZ_EntLib_DB_DS.ExceptionDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ExceptionDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ExceptionData");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> exceptionId, string dataKey, string dataValue) {
            if ((exceptionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(exceptionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((dataKey == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(dataKey));
            }
            if ((dataValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(dataValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EnvironmentVariablesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EnvironmentVariablesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EnvironmentVariables";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("variableName", "variableName");
            tableMapping.ColumnMappings.Add("variableValue", "variableValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EnvironmentVariables] ([logEntryId], [variableName], [variable" +
                "Value]) VALUES (@logEntryId, @variableName, @variableValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@variableValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "variableValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, variableName, variableValue FROM dbo.EnvironmentVariables";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, variableName, variableValue FROM dbo.EnvironmentVariables Wher" +
                "e logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM EnvironmentVariables Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable dataTable = new XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable dataTable = new XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.EnvironmentVariablesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "EnvironmentVariables");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string variableName, string variableValue) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((variableName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(variableName));
            }
            if ((variableValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(variableValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VerbsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VerbsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Verbs";
            tableMapping.ColumnMappings.Add("verb", "verb");
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Verbs] ([verb], [logEntryId]) VALUES (@verb, @logEntryId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT verb, logEntryId FROM dbo.Verbs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT verb, logEntryId FROM dbo.Verbs Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM Verbs Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.VerbsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.VerbsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.VerbsDataTable dataTable = new XYZ_EntLib_DB_DS.VerbsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.VerbsDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.VerbsDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.VerbsDataTable dataTable = new XYZ_EntLib_DB_DS.VerbsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.VerbsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "Verbs");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string verb, System.Nullable<System.Guid> logEntryId) {
            if ((verb == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(verb));
            }
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HostEnvironmentTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HostEnvironmentTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HostEnvironment";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("osVersion", "osVersion");
            tableMapping.ColumnMappings.Add("processorCount", "processorCount");
            tableMapping.ColumnMappings.Add("currentDirectory", "currentDirectory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HostEnvironment] ([logEntryId], [osVersion], [processorCount]," +
                " [currentDirectory]) VALUES (@logEntryId, @osVersion, @processorCount, @currentD" +
                "irectory)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@osVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "osVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processorCount", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "processorCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@currentDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "currentDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, osVersion, processorCount, currentDirectory FROM dbo.HostEnvir" +
                "onment";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, osVersion, processorCount, currentDirectory FROM dbo.HostEnvir" +
                "onment Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM HostEnvironment Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.HostEnvironmentDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.HostEnvironmentDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.HostEnvironmentDataTable dataTable = new XYZ_EntLib_DB_DS.HostEnvironmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.HostEnvironmentDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.HostEnvironmentDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.HostEnvironmentDataTable dataTable = new XYZ_EntLib_DB_DS.HostEnvironmentDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.HostEnvironmentDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "HostEnvironment");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string osVersion, System.Nullable<short> processorCount, string currentDirectory) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((osVersion == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(osVersion));
            }
            if ((processorCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((short)(processorCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((currentDirectory == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(currentDirectory));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReflectionTargetSiteTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReflectionTargetSiteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReflectionTargetSite";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("callingConvention", "callingConvention");
            tableMapping.ColumnMappings.Add("declaringType", "declaringType");
            tableMapping.ColumnMappings.Add("memberType", "memberType");
            tableMapping.ColumnMappings.Add("token", "token");
            tableMapping.ColumnMappings.Add("declaringModule", "declaringModule");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReflectionTargetSite] ([logEntryId], [name], [callingConventio" +
                "n], [declaringType], [memberType], [token], [declaringModule]) VALUES (@logEntry" +
                "Id, @name, @callingConvention, @declaringType, @memberType, @token, @declaringMo" +
                "dule)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@callingConvention", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "callingConvention", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@memberType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "memberType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@token", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "token", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@declaringModule", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "declaringModule", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, name, callingConvention, declaringType, memberType, token, dec" +
                "laringModule FROM dbo.ReflectionTargetSite";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, name, callingConvention, declaringType, memberType, token, dec" +
                "laringModule FROM dbo.ReflectionTargetSite Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ReflectionTargetSite Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ReflectionTargetSiteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ReflectionTargetSite");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string name, string callingConvention, string declaringType, string memberType, string token, string declaringModule) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((callingConvention == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(callingConvention));
            }
            if ((declaringType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(declaringType));
            }
            if ((memberType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(memberType));
            }
            if ((token == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(token));
            }
            if ((declaringModule == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(declaringModule));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReflectionFieldsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReflectionFieldsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReflectionFields";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("fieldName", "fieldName");
            tableMapping.ColumnMappings.Add("fieldValue", "fieldValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReflectionFields] ([logEntryId], [fieldName], [fieldValue]) VA" +
                "LUES (@logEntryId, @fieldName, @fieldValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fieldName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fieldValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fieldValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, fieldName, fieldValue FROM dbo.ReflectionFields";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, fieldName, fieldValue FROM dbo.ReflectionFields Where logEntry" +
                "Id = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ReflectionFields Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ReflectionFieldsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ReflectionFieldsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ReflectionFieldsDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionFieldsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ReflectionFieldsDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ReflectionFieldsDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ReflectionFieldsDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionFieldsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ReflectionFieldsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ReflectionFields");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string fieldName, string fieldValue) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((fieldName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fieldName));
            }
            if ((fieldValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(fieldValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReflectionGenericArgumentsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReflectionGenericArgumentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReflectionGenericArguments";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("type", "type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReflectionGenericArguments] ([logEntryId], [id], [type]) VALUE" +
                "S (@logEntryId, @id, @type)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@type", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, id, type FROM dbo.ReflectionGenericArguments";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, id, type FROM dbo.ReflectionGenericArguments Where logEntryId " +
                "= @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ReflectionGenericArguments Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ReflectionGenericArgumentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ReflectionGenericArguments");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, System.Nullable<System.Guid> id, string type) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((type == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(type));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReflectionPropertiesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReflectionPropertiesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReflectionProperties";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("propertyName", "propertyName");
            tableMapping.ColumnMappings.Add("propertyValue", "propertyValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReflectionProperties] ([logEntryId], [propertyName], [property" +
                "Value]) VALUES (@logEntryId, @propertyName, @propertyValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@propertyValue", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propertyValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, propertyName, propertyValue FROM dbo.ReflectionProperties";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, propertyName, propertyValue FROM dbo.ReflectionProperties Wher" +
                "e logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ReflectionProperties Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable dataTable = new XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ReflectionPropertiesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ReflectionProperties");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string propertyName, string propertyValue) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((propertyName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(propertyName));
            }
            if ((propertyValue == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(propertyValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DiagnosticInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DiagnosticInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DiagnosticInfo";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("clrVersion", "clrVersion");
            tableMapping.ColumnMappings.Add("executingAssemblyName", "executingAssemblyName");
            tableMapping.ColumnMappings.Add("versionFileName", "versionFileName");
            tableMapping.ColumnMappings.Add("versionFileDescription", "versionFileDescription");
            tableMapping.ColumnMappings.Add("versionFileVersion", "versionFileVersion");
            tableMapping.ColumnMappings.Add("versionProductName", "versionProductName");
            tableMapping.ColumnMappings.Add("versionProductVersion", "versionProductVersion");
            tableMapping.ColumnMappings.Add("versionCompanyName", "versionCompanyName");
            tableMapping.ColumnMappings.Add("versionComments", "versionComments");
            tableMapping.ColumnMappings.Add("versionInternalName", "versionInternalName");
            tableMapping.ColumnMappings.Add("versionIsDebug", "versionIsDebug");
            tableMapping.ColumnMappings.Add("versionIsPatched", "versionIsPatched");
            tableMapping.ColumnMappings.Add("versionLanguage", "versionLanguage");
            tableMapping.ColumnMappings.Add("versionLegalCopyright", "versionLegalCopyright");
            tableMapping.ColumnMappings.Add("versionLegalTrademarks", "versionLegalTrademarks");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DiagnosticInfo] ([logEntryId], [clrVersion], [executingAssemblyName], [versionFileName], [versionFileDescription], [versionFileVersion], [versionProductName], [versionProductVersion], [versionCompanyName], [versionComments], [versionInternalName], [versionIsDebug], [versionIsPatched], [versionLanguage], [versionLegalCopyright], [versionLegalTrademarks]) VALUES (@logEntryId, @clrVersion, @executingAssemblyName, @versionFileName, @versionFileDescription, @versionFileVersion, @versionProductName, @versionProductVersion, @versionCompanyName, @versionComments, @versionInternalName, @versionIsDebug, @versionIsPatched, @versionLanguage, @versionLegalCopyright, @versionLegalTrademarks)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@clrVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clrVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@executingAssemblyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "executingAssemblyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileDescription", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionFileVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionFileVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionProductVersion", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionProductVersion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionCompanyName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionCompanyName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionComments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionComments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionInternalName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionInternalName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsDebug", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsDebug", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionIsPatched", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "versionIsPatched", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLanguage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLanguage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalCopyright", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalCopyright", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@versionLegalTrademarks", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "versionLegalTrademarks", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT logEntryId, clrVersion, executingAssemblyName, versionFileName, versionFileDescription, versionFileVersion, versionProductName, versionProductVersion, versionCompanyName, versionComments, versionInternalName, versionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, versionLegalTrademarks FROM dbo.DiagnosticInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT logEntryId, clrVersion, executingAssemblyName, versionFileName, versionFileDescription, versionFileVersion, versionProductName, versionProductVersion, versionCompanyName, versionComments, versionInternalName, versionIsDebug, versionIsPatched, versionLanguage, versionLegalCopyright, versionLegalTrademarks FROM dbo.DiagnosticInfo Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM DiagnosticInfo Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.DiagnosticInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.DiagnosticInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.DiagnosticInfoDataTable dataTable = new XYZ_EntLib_DB_DS.DiagnosticInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.DiagnosticInfoDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.DiagnosticInfoDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.DiagnosticInfoDataTable dataTable = new XYZ_EntLib_DB_DS.DiagnosticInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.DiagnosticInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "DiagnosticInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.Guid> logEntryId, 
                    string clrVersion, 
                    string executingAssemblyName, 
                    string versionFileName, 
                    string versionFileDescription, 
                    string versionFileVersion, 
                    string versionProductName, 
                    string versionProductVersion, 
                    string versionCompanyName, 
                    string versionComments, 
                    string versionInternalName, 
                    System.Nullable<bool> versionIsDebug, 
                    System.Nullable<bool> versionIsPatched, 
                    string versionLanguage, 
                    string versionLegalCopyright, 
                    string versionLegalTrademarks) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((clrVersion == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(clrVersion));
            }
            if ((executingAssemblyName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(executingAssemblyName));
            }
            if ((versionFileName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(versionFileName));
            }
            if ((versionFileDescription == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(versionFileDescription));
            }
            if ((versionFileVersion == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(versionFileVersion));
            }
            if ((versionProductName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(versionProductName));
            }
            if ((versionProductVersion == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(versionProductVersion));
            }
            if ((versionCompanyName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(versionCompanyName));
            }
            if ((versionComments == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(versionComments));
            }
            if ((versionInternalName == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(versionInternalName));
            }
            if ((versionIsDebug.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(versionIsDebug.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((versionIsPatched.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(versionIsPatched.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((versionLanguage == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(versionLanguage));
            }
            if ((versionLegalCopyright == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(versionLegalCopyright));
            }
            if ((versionLegalTrademarks == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(versionLegalTrademarks));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProcessInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProcessInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ProcessInfo";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("startTime", "startTime");
            tableMapping.ColumnMappings.Add("processId", "processId");
            tableMapping.ColumnMappings.Add("terminalServicesSessionId", "terminalServicesSessionId");
            tableMapping.ColumnMappings.Add("nonPagedSystemMemorySize", "nonPagedSystemMemorySize");
            tableMapping.ColumnMappings.Add("pagedMemorySize", "pagedMemorySize");
            tableMapping.ColumnMappings.Add("pagedSystemMemory", "pagedSystemMemory");
            tableMapping.ColumnMappings.Add("peakPagedMemorySize", "peakPagedMemorySize");
            tableMapping.ColumnMappings.Add("peakVirtualMemorySize", "peakVirtualMemorySize");
            tableMapping.ColumnMappings.Add("peakWorkingSet", "peakWorkingSet");
            tableMapping.ColumnMappings.Add("privateMemorySize", "privateMemorySize");
            tableMapping.ColumnMappings.Add("virtualMemorySize", "virtualMemorySize");
            tableMapping.ColumnMappings.Add("workingSet", "workingSet");
            tableMapping.ColumnMappings.Add("totalProcessorTimeDays", "totalProcessorTimeDays");
            tableMapping.ColumnMappings.Add("totalProcessorTimeHours", "totalProcessorTimeHours");
            tableMapping.ColumnMappings.Add("totalProcessorTimeMinutes", "totalProcessorTimeMinutes");
            tableMapping.ColumnMappings.Add("totalProcessorTimeSeconds", "totalProcessorTimeSeconds");
            tableMapping.ColumnMappings.Add("totalProcessorTimeFraction", "totalProcessorTimeFraction");
            tableMapping.ColumnMappings.Add("userProcessorTimeDays", "userProcessorTimeDays");
            tableMapping.ColumnMappings.Add("userProcessorTimeHours", "userProcessorTimeHours");
            tableMapping.ColumnMappings.Add("userProcessorTimeMinutes", "userProcessorTimeMinutes");
            tableMapping.ColumnMappings.Add("userProcessorTimeSeconds", "userProcessorTimeSeconds");
            tableMapping.ColumnMappings.Add("userProcessorTimeFraction", "userProcessorTimeFraction");
            tableMapping.ColumnMappings.Add("threadCount", "threadCount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ProcessInfo] ([logEntryId], [startTime], [processId], [terminalServicesSessionId], [nonPagedSystemMemorySize], [pagedMemorySize], [pagedSystemMemory], [peakPagedMemorySize], [peakVirtualMemorySize], [peakWorkingSet], [privateMemorySize], [virtualMemorySize], [workingSet], [totalProcessorTimeDays], [totalProcessorTimeHours], [totalProcessorTimeMinutes], [totalProcessorTimeSeconds], [totalProcessorTimeFraction], [userProcessorTimeDays], [userProcessorTimeHours], [userProcessorTimeMinutes], [userProcessorTimeSeconds], [userProcessorTimeFraction], [threadCount]) VALUES (@logEntryId, @startTime, @processId, @terminalServicesSessionId, @nonPagedSystemMemorySize, @pagedMemorySize, @pagedSystemMemory, @peakPagedMemorySize, @peakVirtualMemorySize, @peakWorkingSet, @privateMemorySize, @virtualMemorySize, @workingSet, @totalProcessorTimeDays, @totalProcessorTimeHours, @totalProcessorTimeMinutes, @totalProcessorTimeSeconds, @totalProcessorTimeFraction, @userProcessorTimeDays, @userProcessorTimeHours, @userProcessorTimeMinutes, @userProcessorTimeSeconds, @userProcessorTimeFraction, @threadCount)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@startTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "startTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@processId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "processId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@terminalServicesSessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "terminalServicesSessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nonPagedSystemMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "nonPagedSystemMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pagedSystemMemory", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "pagedSystemMemory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakPagedMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakPagedMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakVirtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakVirtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@peakWorkingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "peakWorkingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@privateMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "privateMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@virtualMemorySize", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "virtualMemorySize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingSet", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "workingSet", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@totalProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "totalProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeDays", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeDays", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeHours", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeHours", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeMinutes", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeMinutes", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeSeconds", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeSeconds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userProcessorTimeFraction", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userProcessorTimeFraction", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@threadCount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "threadCount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT logEntryId, startTime, processId, terminalServicesSessionId, nonPagedSystemMemorySize, pagedMemorySize, pagedSystemMemory, peakPagedMemorySize, peakVirtualMemorySize, peakWorkingSet, privateMemorySize, virtualMemorySize, workingSet, totalProcessorTimeDays, totalProcessorTimeHours, totalProcessorTimeMinutes, totalProcessorTimeSeconds, totalProcessorTimeFraction, userProcessorTimeDays, userProcessorTimeHours, userProcessorTimeMinutes, userProcessorTimeSeconds, userProcessorTimeFraction, threadCount FROM dbo.ProcessInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT logEntryId, startTime, processId, terminalServicesSessionId, nonPagedSystemMemorySize, pagedMemorySize, pagedSystemMemory, peakPagedMemorySize, peakVirtualMemorySize, peakWorkingSet, privateMemorySize, virtualMemorySize, workingSet, totalProcessorTimeDays, totalProcessorTimeHours, totalProcessorTimeMinutes, totalProcessorTimeSeconds, totalProcessorTimeFraction, userProcessorTimeDays, userProcessorTimeHours, userProcessorTimeMinutes, userProcessorTimeSeconds, userProcessorTimeFraction, threadCount FROM dbo.ProcessInfo Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM ProcessInfo Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.ProcessInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.ProcessInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.ProcessInfoDataTable dataTable = new XYZ_EntLib_DB_DS.ProcessInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.ProcessInfoDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.ProcessInfoDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.ProcessInfoDataTable dataTable = new XYZ_EntLib_DB_DS.ProcessInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.ProcessInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "ProcessInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Nullable<System.Guid> logEntryId, 
                    System.Nullable<System.DateTime> startTime, 
                    System.Nullable<int> processId, 
                    System.Nullable<int> terminalServicesSessionId, 
                    System.Nullable<long> nonPagedSystemMemorySize, 
                    System.Nullable<long> pagedMemorySize, 
                    System.Nullable<long> pagedSystemMemory, 
                    System.Nullable<long> peakPagedMemorySize, 
                    System.Nullable<long> peakVirtualMemorySize, 
                    System.Nullable<long> peakWorkingSet, 
                    System.Nullable<long> privateMemorySize, 
                    System.Nullable<long> virtualMemorySize, 
                    System.Nullable<long> workingSet, 
                    System.Nullable<int> totalProcessorTimeDays, 
                    System.Nullable<int> totalProcessorTimeHours, 
                    System.Nullable<int> totalProcessorTimeMinutes, 
                    System.Nullable<int> totalProcessorTimeSeconds, 
                    System.Nullable<int> totalProcessorTimeFraction, 
                    System.Nullable<int> userProcessorTimeDays, 
                    System.Nullable<int> userProcessorTimeHours, 
                    System.Nullable<int> userProcessorTimeMinutes, 
                    System.Nullable<int> userProcessorTimeSeconds, 
                    System.Nullable<int> userProcessorTimeFraction, 
                    System.Nullable<int> threadCount) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((startTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(startTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((processId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(processId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((terminalServicesSessionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(terminalServicesSessionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((nonPagedSystemMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(nonPagedSystemMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((pagedMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(pagedMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((pagedSystemMemory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(pagedSystemMemory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((peakPagedMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(peakPagedMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((peakVirtualMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((long)(peakVirtualMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((peakWorkingSet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(peakWorkingSet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((privateMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(privateMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((virtualMemorySize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(virtualMemorySize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((workingSet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(workingSet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeDays.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(totalProcessorTimeDays.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(totalProcessorTimeHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(totalProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(totalProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((totalProcessorTimeFraction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(totalProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeDays.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(userProcessorTimeDays.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeHours.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(userProcessorTimeHours.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeMinutes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(userProcessorTimeMinutes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeSeconds.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(userProcessorTimeSeconds.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            if ((userProcessorTimeFraction.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(userProcessorTimeFraction.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((threadCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(threadCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StartInfoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StartInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StartInfo";
            tableMapping.ColumnMappings.Add("logEntryId", "logEntryId");
            tableMapping.ColumnMappings.Add("fileName", "fileName");
            tableMapping.ColumnMappings.Add("arguments", "arguments");
            tableMapping.ColumnMappings.Add("domain", "domain");
            tableMapping.ColumnMappings.Add("verb", "verb");
            tableMapping.ColumnMappings.Add("useShellExecute", "useShellExecute");
            tableMapping.ColumnMappings.Add("workingDirectory", "workingDirectory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[StartInfo] ([logEntryId], [fileName], [arguments], [domain], [" +
                "verb], [useShellExecute], [workingDirectory]) VALUES (@logEntryId, @fileName, @a" +
                "rguments, @domain, @verb, @useShellExecute, @workingDirectory)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@logEntryId", System.Data.SqlDbType.UniqueIdentifier, 0, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@fileName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "fileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arguments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "arguments", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@domain", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "domain", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@verb", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "verb", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@useShellExecute", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "useShellExecute", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@workingDirectory", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "workingDirectory", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::XYZ.EntLib.Properties.Settings.Default.XYZ_EntLib_DBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT logEntryId, fileName, arguments, domain, verb, useShellExecute, workingDir" +
                "ectory FROM dbo.StartInfo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT logEntryId, fileName, arguments, domain, verb, useShellExecute, workingDir" +
                "ectory FROM dbo.StartInfo Where logEntryId = @logId";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM StartInfo Where logEntryId = @logId";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@logId", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "logEntryId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(XYZ_EntLib_DB_DS.StartInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual XYZ_EntLib_DB_DS.StartInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            XYZ_EntLib_DB_DS.StartInfoDataTable dataTable = new XYZ_EntLib_DB_DS.StartInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogId(XYZ_EntLib_DB_DS.StartInfoDataTable dataTable, System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual XYZ_EntLib_DB_DS.StartInfoDataTable GetDataByLogId(System.Nullable<System.Guid> logId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((logId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            XYZ_EntLib_DB_DS.StartInfoDataTable dataTable = new XYZ_EntLib_DB_DS.StartInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS.StartInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(XYZ_EntLib_DB_DS dataSet) {
            return this.Adapter.Update(dataSet, "StartInfo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.Guid> logEntryId, string fileName, string arguments, string domain, string verb, System.Nullable<bool> useShellExecute, string workingDirectory) {
            if ((logEntryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(logEntryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((fileName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fileName));
            }
            if ((arguments == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(arguments));
            }
            if ((domain == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(domain));
            }
            if ((verb == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(verb));
            }
            if ((useShellExecute.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(useShellExecute.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((workingDirectory == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(workingDirectory));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetCount(System.Nullable<System.Guid> logId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((logId.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(logId.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}

#pragma warning restore 1591