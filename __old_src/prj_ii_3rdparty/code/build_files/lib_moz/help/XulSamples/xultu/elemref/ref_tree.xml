<?xml version='1.0'?>

<element name='tree'>
<documentation>http://www.xulplanet.com/tutorials/xultu/trees.html</documentation>
<reference>http://www.xulplanet.com/reference/elemref/ref_tree.html</reference>
  A container which can be used to hold a tabular or hierarchical set of rows  of elements. The tree may contain any number of rows and any number of  columns. Each row of the tree may contain child rows which are displayed  indented from the parent. Unlike other elements, the data to display inside  the tree is not specified using tags, but is determined from a view object.  The view object implements the   nsITreeView   interface. The view is queried for the data to appear in the tree.   There are several ways in which trees are used, as listed below. The second  column lists the interfaces available via the tree's view property. The  third column indicates whether treeitem element are used.               Tree Type        View Interfaces        Has DOM Nodes        Description                  Content Tree                 nsITreeView ,         nsITreeContentView               Yes        This tree has treeitem elements placed within the treechildren          element. In this situation, a content view (which implements the          interface nsITreeContentView) which is a more specialized type of          view, uses the treeitem elements and their descendants to          determine the data to display in the tree. However, the treeitems          are not displayed directly; they are used only as data to the          content view. However, the content view will automatically update          the tree if treeitems are changed.                        RDF Tree                 nsITreeView ,         nsIXULTreeBuilder               No        This tree is generated from an RDF datasource. It is used when a          tree has a datasources attribute, and has 'dont-build-content' in          its flags attribute. For this tree, the data comes directly from           the RDF datasource. DOM treeitems are not created. Even though the          template uses treeitem elements to define the content, DOM nodes for          these elements are not created. This is the type that should be used          for RDF generated trees with lots of rows.                        RDF Content Tree                 nsITreeView ,         nsIXULTreeBuilder          nsITreeContentView               Yes        This tree is generated from an RDF datasource. It is similar to the          previous type but is used when the tree does not have          'dont-build-content' in its flags attribute. DOM treeitems are          created, so you can access the data using RDF functions or DOM          functions. This type is suitable for RDF generated trees with a          fairly small number of rows.                        Custom View Tree                 nsITreeView               No        For this tree you implement the nsITreeView interface yourself. The          tree's data is retrieved from this custom view. The custom view          should be attached to the tree by setting its view property.                 
<html><![CDATA[
<p>  A container which can be used to hold a tabular or hierarchical set of rows  of elements. The tree may contain any number of rows and any number of  columns. Each row of the tree may contain child rows which are displayed  indented from the parent. Unlike other elements, the data to display inside  the tree is not specified using tags, but is determined from a view object.  The view object implements the  <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>  interface. The view is queried for the data to appear in the tree.   There are several ways in which trees are used, as listed below. The second  column lists the interfaces available via the tree's view property. The  third column indicates whether treeitem element are used.  <table border="1">    <tr>      <th>Tree Type</th>      <th>View Interfaces</th>      <th>Has DOM Nodes</th>      <th>Description</th>    </tr>    <tr>      <td>Content Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeContentView.html">nsITreeContentView</a>      </td>      <td>Yes</td>      <td>This tree has treeitem elements placed within the treechildren          element. In this situation, a content view (which implements the          interface nsITreeContentView) which is a more specialized type of          view, uses the treeitem elements and their descendants to          determine the data to display in the tree. However, the treeitems          are not displayed directly; they are used only as data to the          content view. However, the content view will automatically update          the tree if treeitems are changed.      </td>    </tr>    <tr>      <td>RDF Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsIXULTreeBuilder.html">nsIXULTreeBuilder</a>      </td>      <td>No</td>      <td>This tree is generated from an RDF datasource. It is used when a          tree has a datasources attribute, and has 'dont-build-content' in          its flags attribute. For this tree, the data comes directly from           the RDF datasource. DOM treeitems are not created. Even though the          template uses treeitem elements to define the content, DOM nodes for          these elements are not created. This is the type that should be used          for RDF generated trees with lots of rows.      </td>    </tr>    <tr>      <td>RDF Content Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>,        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsIXULTreeBuilder.html">nsIXULTreeBuilder</a>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeContentView.html">nsITreeContentView</a>      </td>      <td>Yes</td>      <td>This tree is generated from an RDF datasource. It is similar to the          previous type but is used when the tree does not have          'dont-build-content' in its flags attribute. DOM treeitems are          created, so you can access the data using RDF functions or DOM          functions. This type is suitable for RDF generated trees with a          fairly small number of rows.      </td>    </tr>    <tr>      <td>Custom View Tree</td>      <td>        <a href="http://www.xulplanet.com/references/xpcomref/ifaces/nsITreeView.html">nsITreeView</a>      </td>      <td>No</td>      <td>For this tree you implement the nsITreeView interface yourself. The          tree's data is retrieved from this custom view. The custom view          should be attached to the tree by setting its view property.      </td>    </tr>  </table>  </p>
]]></html>

<implements>nsIAccessibleProvider</implements>
<attr name='alternatingbackground' spec=' Moz1.7 ' type='boolean'>
  If true, the background of the tree's rows will alternate between two  colors.
</attr>
<attr name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the tree by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a tree by setting this attribute to  true.
</attr>
<attr name='enableColumnDrag' type='boolean'>
  When set to 'true', the user may drag the column headers around to change the  order that they are displayed in.
</attr>
<attr name='flags' type='string'>
  Set this attribute to 'dont-build-content' for a template generated tree. For  trees that have their content placed directly inside the tree or have a custom  view object, this flag should not be used.
</attr>
<attr name='hidecolumnpicker' type='boolean'>
  When set to false, a drop-down will appear in the upper right corner of the  tree, which the user may use to show and hide columns. When set to true,  the column picker will be hidden. The default value is false.
</attr>
<attr name='onselect' type='script code'>
  This event is sent to an tree when a row is selected, or whenever the  selection changes. The user can select multiple rows by holding down Shift or  Control and click on a row. The onselect event will be sent for each item added  or removed to the selection.
</attr>
<attr name='rows' type='integer'>
  The number of rows to display in the tree.
</attr>
<attr name='seltype'>
  Used to indicate whether multiple selection is allowed.
<value name='single'>
    Only one row may be selected at a time.
</value>
<value name='multiple' default='true'>
    Multiple rows may be selected at once.
</value>
</attr>
<attr name='statedatasource' type='datasource URI'>
  Chrome XUL may specify an RDF datasource to use to store tree state  information. This is used to hold which tree items are open and which items  are collapsed. This information will be remembered for the next time the  XUL file is opened. If you do not specify this attribute, state information  will be stored in the local store (rdf:local-store).
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the tree.
</prop>
<prop name='builderView' type='nsIXULTreeBuilder'>
  A reference to the tree builder which constructed the tree data. The builder  provides access to the RDF resources for each row in the tree, and allows  sorting the data by column. In newer versions of Mozilla, the builderView  property is actually a synonym for the view property, since the two  interfaces are flattened together into a single interface in JavaScript.  This property is read only.
</prop>
<prop name='contentView' type='nsITreeContentView'>
  For trees built with a content builder - that is, those that do not have   flags="dont-build-content" set -- the contentView will be a reference to the   nsITreeContentView   for the tree. This interface lets you retrieve the DOM element corresponding  to a given a row index and vice versa. For trees that are not built with a  content builder, the functions of nsITreeContentView will not be available,  since there are no DOM nodes to retrieve. In newer versions of Mozilla, the  contentView property is actually a synonym for the view property, since the  two interfaces are flattened together into a single interface in JavaScript.  This property is read only.
</prop>
<prop name='currentIndex' type='integer'>
  Set to the index of the currently focused row in the tree. If no row is  focused, the value will be -1. For multiple selection trees, the current index  is the last row selected. Do not use this property to change the selection.  Instead, use the methods of the   TreeSelection   object available via tree.view.selection.
</prop>
<prop name='disableKeyNavigation' type='boolean'>
  If this attribute is not used, the user can navigate to specific items in  the tree by pressing the first the first letter of the item's label. This is  done incrementally, so pressing additional keys will select more specific  items. This feature may be disabled for a tree by setting this attribute to  true.
</prop>
<prop name='enableColumnDrag' type='boolean'>
  When set to 'true', the user may drag the column headers around to change the  order that they are displayed in.
</prop>
<prop name='firstOrdinalColumn' type='treecol element'>
  A reference to the first treecol element, which or may not be the first column  displayed in the tree.
</prop>
<prop name='selstyle' type='string'>
  If set to the value 'primary', only the label of the primary column will be  highlighted when an item in the tree is selected. Otherwise, the entire row  will be highlighted. To see the difference, compare the selection style in  the folder list and the message list in Mozilla mail.
</prop>
<prop name='treeBoxObject' type='nsITreeBoxObject'>
  The box object is responsible for rendering the tree on the window. This  object implements the   nsITreeBoxObject   interface and contains functions for retrieving the cells at certain coordinates,  redrawing cells and scrolling the tree. This property is equivalent to the  boxObject property.
</prop>
<prop name='view' type='nsITreeView'>
  The view for the tree, which is the object which generates the data to be  displayed. You can assign an object which implements nsITreeView to this  property. Trees built from RDF or those which use treeitems directly will  already have a view. Functions available in the view allow one to retrieve  the data within the cells, and determine which rows are nested within  others. For a complete list of view functions, see the   nsITreeView   interface.
</prop>
</element>
