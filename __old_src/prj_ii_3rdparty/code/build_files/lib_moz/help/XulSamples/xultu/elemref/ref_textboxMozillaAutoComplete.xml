<?xml version='1.0'?>

<element name='textbox (Mozilla Auto Complete)'>
<reference>http://www.xulplanet.com/reference/elemref/ref_textboxMozillaAutoComplete.html</reference>
  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.        The autocomplete functionality is handled through one of more session objects, each  of which can return a set of results given the current value of the textbox. The  sessions can be set using the searchSessions attribute or by calling the addSession  method.
<html><![CDATA[
<p>  This element is created by setting the type attribute of a textbox to 'autocomplete'.  It is used to create a textbox with a popup containing a list of possible completions  for what the user has started to type.  </p>  <p>  The autocomplete functionality is handled through one of more session objects, each  of which can return a set of results given the current value of the textbox. The  sessions can be set using the searchSessions attribute or by calling the addSession  method.</p>
]]></html>

<implements>nsIAccessibleProvider</implements>
<implements>nsIDOMXULMenuListElement</implements>
<attr name='alwaysopenpopup' type='boolean'>
  If true, the autocomplete popup will be displayed even when there are no  matches. If false, the default value, the popup will be hidden.
</attr>
<attr name='autoFill' type='boolean'>
  If set to true, the best match will be filled into the textbox as the user  types. If false, the default, the value will not be filled in until the user  selects an item.
</attr>
<attr name='autoFillAfterMatch' type='boolean'>
  If set to true, the entire text of the best match will be displayed at the  end of the input. If false, only the text that hasn't been entered yet will  be filled in. The autoFill attribute must be set to true to use this  feature.
</attr>
<attr name='crop'>
  If the label of the textbox is too small to fit in its given space, the  text will be cropped on the side specified by the crop attribute.  An ellipsis will be used in place of the cropped text. If the box  direction is reversed, the cropping is reversed.
<value name='start'>
    The text will be cropped on its left side. 
</value>
<value name='end'>
    The text will be cropped on its right side.
</value>
<value name='left'>
     (Deprecated)  The text will be cropped on its left side.
</value>
<value name='right'>
     (Deprecated)  The text will be cropped on its right side.
</value>
<value name='center'>
    The text will be cropped on both sides.
</value>
<value name='none'>
    The text will be not be cropped using an ellipsis. However, the text will
    simply be cut off if it is too large. The side depends on the CSS text
    alignment.
</value>
</attr>
<attr name='disableAutocomplete' type='boolean'>
  If true, the autocomplete behavior will be disabled. You might use a script  to change this attribute. If false, the default, autocomplete is enabled.
</attr>
<attr name='disabled' type='boolean'>
  Indicates whether the textbox is disabled or not. If this attribute is set to true,  the textbox is disabled. This is usually drawn with the text in grey. If the textbox is  disabled, it does not respond to user actions. The element cannot be focused  and the command event will not fire. The element will still respond to mouse  events. To enable the textbox, leave the attribute out entirely as opposed to  setting the value to false.
</attr>
<attr name='disablehistory'>
  If false, an arrow button will appear on the end of the textbox which, when  pressed, will open a dropdown menu of the history items. The default value  is true, which will hide the dropdown button.
</attr>
<attr name='focused' type='boolean'>
  This attribute is set to true if the textbox element is focused.
</attr>
<attr name='forceComplete' type='boolean'>
  If true, the textbox will be filled in with the best match when it loses the  focus. If false, it will only be filled in when the user selects an item.
</attr>
<attr name='ignoreBlurWhileSearching' type='boolean'>
  If true, blur events are ignored while searching, which means that the  autocomplete popup will not disappear.
</attr>
<attr name='inputtooltiptext' type='string'>
  The tooltip text for the textbox.
</attr>
<attr name='label' type='string'>
  The label that will appear on the textbox. If this is left out, no text appears.
</attr>
<attr name='maxlength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</attr>
<attr name='maxrows'>
  The number of rows to show in the results list at a time. A scrollbar will appear  so the user can scroll through the remaining items.
</attr>
<attr name='minResultsForPopup' type='integer'>
  The minimum number of results that must be returned for the popup to be  displayed.
</attr>
<attr name='nomatch'>
  This attribute will be set to true if the last search resulted in no matches.
</attr>
<attr name='onerrorcommand'>
  This event handler is called when an error occurs when selecting a result  from the popup.
</attr>
<attr name='ontextcommand'>
  This event handler is called when a result is selected for the textbox.
</attr>
<attr name='ontextrevert'>
  This event handler is called when the user presses Escape to revert the  textbox to its original uncompleted value.
</attr>
<attr name='open' type='boolean'>
  If true, the popup is showing. You can change this value to show or hide the popup.
</attr>
<attr name='searchSessions' type='space separated list of session names'>
  Set to a keyword indicating what type of data to look up for autocomplete. You  may set multiple types by separating their names by spaces. The following values  are possible, although custom components may be installed which add others.
<value name='history'>
    The user's URL history is searched.
</value>
<value name='addrbook'>
    The user's address book is searched.
</value>
<value name='ldap'>
    The user's LDAP directories are searched.
</value>
</attr>
<attr name='showCommentColumn' type='boolean'>
  If true, a comment column appears in the popup. For the URL history, the comment  column will contain the page titles associated with each URL. The default value  of this property is false.
</attr>
<attr name='showpopup' type='boolean'>
  If true, the popup will be shown. If false, the popup will not be shown, but  the autocomplete results will still be available. You can set this to false  and set the autoFill attribute to true to emulate a Communicator 4.x style  autocomplete textbox. The default value is true.
</attr>
<attr name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</attr>
<attr name='tabScrolling' type='boolean'>
  If true, the user may cycle through the results list by pressing the TAB key.  If false, the default, the TAB key moves the focus to the next element.
</attr>
<attr name='tabindex' type='integer'>
  The tab order of the element. The tab order is the order in which the focus  is moved when the user presses the Tab key. Elements with a higher tabindex are  later in the tab order sequence.
</attr>
<attr name='timeout'>
  Set to the number of milliseconds to wait between when the users presses a key  and the results list updates. The default value is 50, which is very fast.
</attr>
<attr name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</attr>
<attr name='userAction'>
  This attribute will be set to the action the user is currently performing.  Possible values:
<value name='none'>
    The user is not interacting with the textbox.
</value>
<value name='typing'>
    The user is typing into the textbox.
</value>
<value name='scrolling'>
    The user is scrolling through the textbox.
</value>
</attr>
<attr name='value' type='string'>
  The default value entered in the textbox. The attribute only holds the  default value and is never modified when the user enters text. To get the  updated value, use the value property.
</attr>
<prop name='accessible' type='nsIAccessible'>
  Returns the accessibility object for the textbox.
</prop>
<method name='addSession'>
<prototype> addSession ( session ) </prototype>
  
  Adds a new session object to the autocomplete widget. This can be used to  create a customized autocomplete results list. The argument should be an object  which implements the nsIAutoCompleteSession interface.
</method>
<prop name='alwaysOpenPopup'/>
<prop name='autoFill'/>
<prop name='autoFillAfterMatch'/>
<method name='clearResults'>
<prototype> clearResults ( ) </prototype>
  
  Clears the results list.
</method>
<prop name='crop'/>
<prop name='disableAutocomplete'/>
<prop name='disabled'/>
<prop name='editable' type='boolean'>
  Autocomplete fields are editable so this property always returns true.
</prop>
<prop name='focused'/>
<prop name='forceComplete'/>
<method name='getDefaultSession'>
<prototype> getDefaultSession ( ) </prototype>
  
  Returns the name of the first session with available results.
</method>
<method name='getResultAt'>
<prototype> getResultAt ( index ) </prototype>
  
  Returns the result item at the specified index. The item will be a value  of type nsIAutoCompleteItem.
</method>
<method name='getResultCount'>
<prototype> getResultCount ( session ) </prototype>
  
  Returns the number of results. (The session argument is currently ignored).
</method>
<method name='getResultValueAt'>
<prototype> getResultValueAt ( index ) </prototype>
  
  Returns the result value at the specified index. The item will correspond  to the text of that item that appears in the popup.
</method>
<method name='getSession'>
<prototype> getSession ( index ) </prototype>
  
  Returns the session object with the given index. This will return an object  of type nsIAutoCompleteSession.
</method>
<method name='getSessionByName'>
<prototype> getSessionByName ( name ) </prototype>
  
  Returns the session object with the given name. This will return an object  of type nsIAutoCompleteSession.
</method>
<method name='getSessionResultAt'>
<prototype> getSessionResultAt ( session , index ) </prototype>
  
  Returns the result item at the specified index for a specific session.
</method>
<method name='getSessionStatusAt'>
<prototype> getSessionStatusAt ( index ) </prototype>
  
  Returns the status for the session object with the given index.
</method>
<method name='getSessionValueAt'>
<prototype> getSessionValueAt ( session , index ) </prototype>
  
  Returns the result value at the specified index for a specific session.
</method>
<prop name='ignoreBlurWhileSearching' type='boolean'>
  If true, blur events are ignored while searching, which means that the  autocomplete popup will not disappear.
</prop>
<prop name='inputField' type='textbox element'>
  In Mozilla, the XUL textbox is implemented as a wrapper around an HTML  input element. This read only property holds a reference to this inner input  element.
</prop>
<prop name='isSearching'>
  This property is set to true while a search is occuring.
</prop>
<prop name='isWaiting'>
  This property is set to true during the period while waiting for the timeout   between the time when a user has pressed a key and a search is performed.
</prop>
<prop name='label'/>
<prop name='maxLength' type='integer'>
  The maximum number of characters that the textbox allows to be entered.
</prop>
<prop name='maxRows'/>
<prop name='minResultsForPopup'/>
<prop name='noMatch'>
  This property will be set to true if the last search resulted in no matches.
</prop>
<prop name='open'/>
<method name='removeSession'>
<prototype> removeSession ( session ) </prototype>
  
  Removes a session object from the autocomplete widget. The argument should be an  object which implements the nsIAutoCompleteSession interface.
</method>
<prop name='resultsPopup'>
  This property is set to the popup element that displays the results.
</prop>
<prop name='searchSessions' type='space separated list of session names'>
  Set to a keyword indicating what type of data to look up for autocomplete. You  may set multiple types by separating their names by spaces. The following values  are possible, although custom components may be installed which add others.
<value name='history'>
    The user's URL history is searched.
</value>
<value name='addrbook'>
    The user's address book is searched.
</value>
<value name='ldap'>
    The user's LDAP directories are searched.
</value>
</prop>
<method name='select'>
<prototype> select ( ) </prototype>
  
  Select all the text in the textbox.
</method>
<prop name='selectionEnd' type='integer'>
  Get or modify the end of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the character after the selection. If this value is equal to the selectionStart  property, no text is selected, but the value indicates the position of the  caret (cursor) within the textbox.
</prop>
<prop name='selectionStart' type='integer'>
  Get or modify the beginning of the selected portion of the field's text. Use  in conjuction with the selectionEnd property. The value specifies the index of  the first selected character.
</prop>
<prop name='sessionCount'>
  Holds the number of sessions.
</prop>
<method name='setSelectionRange'>
<prototype> setSelectionRange ( start , end ) </prototype>
  
  Sets the selected portion of the textbox, where the start argument is the  index of the first character to select and the end argument is the index of the  character after the selection. Set both arguments to the same value to move the  cursor to the corresponding position without selecting text.
</method>
<prop name='showCommentColumn'/>
<prop name='showPopup'/>
<prop name='size' type='integer'>
  The number of characters that can be displayed in the textbox.
</prop>
<method name='syncSessions'>
<prototype> syncSessions ( autoCompleteElement ) </prototype>
  
  Copy the sessions from another autocomplete element.
</method>
<prop name='tabScrolling'/>
<prop name='textLength' type='integer'>
  Holds the length of the text entered in the textbox. This property is read only.
</prop>
<prop name='timeout'/>
<prop name='type' type='string'>
  Set to the value 'autocomplete' to have an autocomplete textbox.
</prop>
<prop name='userAction'/>
<prop name='value' type='string'>
  Returns the text entered into the textbox. You can set this property to  change the text in the textbox.
</prop>
</element>
